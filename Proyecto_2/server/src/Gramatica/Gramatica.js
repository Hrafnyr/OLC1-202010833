/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,12],$V2=[1,22],$V3=[1,32],$V4=[1,23],$V5=[1,24],$V6=[1,25],$V7=[1,38],$V8=[1,39],$V9=[1,40],$Va=[1,41],$Vb=[1,42],$Vc=[1,33],$Vd=[1,34],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[5,14,15,24,31,33,43,44,46,60,65,69,70,75,76,77,82,83,84,85,86],$Vi=[1,59],$Vj=[1,60],$Vk=[1,61],$Vl=[1,62],$Vm=[1,71],$Vn=[1,82],$Vo=[1,83],$Vp=[1,84],$Vq=[1,85],$Vr=[1,86],$Vs=[1,87],$Vt=[1,88],$Vu=[1,70],$Vv=[1,72],$Vw=[1,73],$Vx=[1,74],$Vy=[1,75],$Vz=[1,76],$VA=[1,77],$VB=[1,78],$VC=[24,27,30,50],$VD=[6,45,48],$VE=[6,27],$VF=[1,111],$VG=[1,110],$VH=[1,112],$VI=[1,113],$VJ=[1,114],$VK=[1,115],$VL=[1,116],$VM=[1,117],$VN=[1,118],$VO=[1,119],$VP=[1,120],$VQ=[1,121],$VR=[1,122],$VS=[1,123],$VT=[6,27,28,31,45,51,81,87,88,89,90,91,92,93,94,95,96,97,98,99,100],$VU=[1,127],$VV=[1,148],$VW=[2,29],$VX=[1,160],$VY=[27,31,45],$VZ=[6,27,28,31,45,51,81,87,88,93,94,95,96,97,98,99,100],$V_=[27,45],$V$=[6,27,28,31,45,51,81,87,88,89,90,91,93,94,95,96,97,98,99,100],$V01=[6,27,28,31,45,51,81,93,94,95,96,97,98,99,100],$V11=[1,218],$V21=[1,247],$V31=[1,275],$V41=[31,69,70];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIAR":3,"CUERPO":4,"EOF":5,"tkPtComa":6,"INS":7,"DECLARACION":8,"ASIGNACION":9,"INCREMENTO":10,"VECTORES":11,"MODIFICARVEC":12,"PRINTS":13,"prBreak":14,"prContinue":15,"RETURN":16,"CONDICIONALES":17,"CICLOS":18,"FUNCIONES":19,"METODOS":20,"LLAMADAS":21,"RUN":22,"OPVEC":23,"tkID":24,"tkAbrP":25,"PARAMETROSF":26,"tkCerrP":27,"tk2Puntos":28,"prVoid":29,"tkAbrLL":30,"tkCerrLL":31,"TIPODATO":32,"prRun":33,"LISTAVEC1":34,"FUNCS":35,"prLower":36,"EXPRESION":37,"prUpper":38,"prRound":39,"prLength":40,"prTypeof":41,"prToString":42,"prPrint":43,"prPrintln":44,"tkComa":45,"prReturn":46,"LISTAID":47,"tkSgIgual":48,"CASTEO":49,"tkAbrC":50,"tkCerrC":51,"TIPOV1":52,"TIPOV2":53,"prNew":54,"prToCharArray":55,"prPush":56,"prPop":57,"IF":58,"SWITCH":59,"prIF":60,"BLOQUEIF":61,"ELIFELSE":62,"prElif":63,"prElse":64,"prSwitch":65,"BLOQUESW":66,"CASE":67,"DEFAULT":68,"prCase":69,"prDefault":70,"WHILE":71,"FOR":72,"DOWHILE":73,"DOUNTIL":74,"prWhile":75,"prFor":76,"prDo":77,"prUntil":78,"tkIncremento":79,"tkDecremento":80,"tkTernario":81,"prInt":82,"prDouble":83,"prString":84,"prChar":85,"prBoolean":86,"tkMenos":87,"tkMas":88,"tkMult":89,"tkDiv":90,"tkMod":91,"tkPot":92,"tkMenor":93,"tkMayor":94,"tkMayorIgual":95,"tkMenorIgual":96,"tkIgual":97,"tkDiferente":98,"tkAnd":99,"tkOr":100,"tkNot":101,"tkEntero":102,"tkDecimal":103,"prTrue":104,"prFalse":105,"tkCadena":106,"tkCaracter":107,"ACCEDERVECTOR":108,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"tkPtComa",14:"prBreak",15:"prContinue",24:"tkID",25:"tkAbrP",27:"tkCerrP",28:"tk2Puntos",29:"prVoid",30:"tkAbrLL",31:"tkCerrLL",33:"prRun",36:"prLower",38:"prUpper",39:"prRound",40:"prLength",41:"prTypeof",42:"prToString",43:"prPrint",44:"prPrintln",45:"tkComa",46:"prReturn",48:"tkSgIgual",50:"tkAbrC",51:"tkCerrC",54:"prNew",55:"prToCharArray",56:"prPush",57:"prPop",60:"prIF",63:"prElif",64:"prElse",65:"prSwitch",69:"prCase",70:"prDefault",75:"prWhile",76:"prFor",77:"prDo",78:"prUntil",79:"tkIncremento",80:"tkDecremento",81:"tkTernario",82:"prInt",83:"prDouble",84:"prString",85:"prChar",86:"prBoolean",87:"tkMenos",88:"tkMas",89:"tkMult",90:"tkDiv",91:"tkMod",92:"tkPot",93:"tkMenor",94:"tkMayor",95:"tkMayorIgual",96:"tkMenorIgual",97:"tkIgual",98:"tkDiferente",99:"tkAnd",100:"tkOr",101:"tkNot",102:"tkEntero",103:"tkDecimal",104:"prTrue",105:"prFalse",106:"tkCadena",107:"tkCaracter"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,1],[7,1],[7,1],[7,1],[7,2],[7,1],[7,2],[20,9],[20,7],[20,8],[20,6],[19,9],[19,8],[22,3],[21,4],[21,3],[35,4],[35,4],[35,4],[35,4],[35,4],[35,4],[13,4],[13,4],[26,4],[26,2],[16,2],[8,4],[8,5],[8,2],[11,4],[11,6],[52,7],[52,6],[52,8],[52,5],[53,10],[53,11],[34,3],[34,1],[12,6],[12,9],[23,5],[23,4],[17,1],[17,1],[58,5],[61,3],[61,4],[62,5],[62,2],[59,5],[66,4],[66,3],[66,3],[67,5],[67,4],[68,3],[18,1],[18,1],[18,1],[18,1],[71,7],[72,11],[72,11],[72,11],[72,11],[73,9],[74,9],[49,3],[10,2],[10,2],[9,3],[9,7],[47,3],[47,1],[32,1],[32,1],[32,1],[32,1],[32,1],[37,2],[37,2],[37,2],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,2],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,3],[108,4],[108,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
   
            // console.log($$[$0-1])
            // tree.Raiz.verNodo();
            // tree.verHijosRecursivo(root);
            // tree.Graficar();

            // //Reiniciar valores
            // tree = new AST();
            // root = tree.insertarRaiz(padre);
            // cont1 = 0;
            return $$[$0-1];
        
break;
case 2:
console.log("Error sintactico, no se esperaba: "+ yytext +" en linea " + yylineno );
break;
case 3:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 4:
 this.$ = [$$[$0]];
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 12: case 13: case 18: case 20:
  this.$ = $$[$0-1];  
break;
case 11:
  this.$ = ["BREAK"];  
break;
case 14: case 15: case 16: case 17: case 19:
  this.$ = $$[$0];  
break;
case 21:
 this.$= ["METODO",$$[$0-8],"PARAMETROS",$$[$0-6],"VOID",$$[$0-1]]
break;
case 22:
 this.$= ["METODO",$$[$0-6],"PARAMETROS",$$[$0-4],$$[$0-1]]
break;
case 23:
 this.$= ["METODO",$$[$0-7],"VOID",$$[$0-1]]
break;
case 24:
 this.$= ["METODO",$$[$0-5],$$[$0-1]]
break;
case 25:

        this.$=["FUNCION",$$[$0-8],"PARAMETROS",$$[$0-6],$$[$0-3],$$[$0-1]];
    
break;
case 26:

        this.$=["FUNCION",$$[$0-7],$$[$0-3],$$[$0-1]];
    
break;
case 27:

        this.$ = ["Run",$$[$0-1]];
    
break;
case 28:

        var aux = ["LLAMADAS",$$[$0-3]];
        for (let i = 0; i < $$[$0-1].length; i++){
            aux.push($$[$0-1][i]);
        }
        this.$ = aux;
    
break;
case 29:
this.$ = [$$[$0-2]]
break;
case 30:
this.$ = ["toLower",$$[$0-1]]
break;
case 31:
this.$ = ["toUpper",$$[$0-1]]
break;
case 32:
this.$ = ["round",$$[$0-1]]
break;
case 33:
this.$ = ["lenght",$$[$0-1]]
break;
case 34:
this.$ = ["TypeOf",$$[$0-1]]
break;
case 35:
this.$ = ["toString",$$[$0-1]]
break;
case 36:

        // tree.InsertarRecursivo(root,cont1+"-Print",padre);
        // tree.InsertarRecursivo(root,$$[$0-1].replace("\""," "),cont1+"-Print");
        // cont1++;
        var aux = ["Print"];
        if(typeof $$[$0-1] === "object"){
            for (let i = 0; i < $$[$0-1].length; i++){
                aux.push($$[$0-1][i]);
            }
        }else{
            aux.push($$[$0-1]);
        }
        this.$ = aux;
    
break;
case 37:

        // tree.InsertarRecursivo(root,cont1+"-Println",padre);
        // tree.InsertarRecursivo(root,$$[$0-1].replace("\""," "),cont1+"-Println");
        // cont1++;
        this.$ = ["Println",$$[$0-1]];
    
break;
case 38:
$$[$0-3].push([$$[$0-1],$$[$0]]);this.$=$$[$0-3]
break;
case 39:
this.$ = [$$[$0-1],$$[$0]]
break;
case 40:

        var aux = ["Return"];
        if(typeof $$[$0] === "object"){
            for (let i = 0; i < $$[$0].length; i++){
                aux.push($$[$0][i]);
            }
        }else{
            aux.push($$[$0]);
        }
        this.$ = aux;
    
break;
case 41:

        var aux = ["DECLARACION"];
        aux.push($$[$0-3]);
        for (let i = 0; i < $$[$0-2].length; i++){
            aux.push($$[$0-2][i])
        }
        aux.push("=")
        if(typeof $$[$0] === "object"){
            for (let i = 0; i < $$[$0].length; i++){
                aux.push($$[$0][i]);
            }
        }else{
            aux.push($$[$0]);
        }
        this.$ = aux;
    
break;
case 42:

        var aux = ["DECLARACION"];
         aux.push($$[$0-4]);
        for (let i = 0; i < $$[$0-3].length; i++){
            aux.push($$[$0-3][i])
        }
        aux.push($$[$0-2]);
        aux.push("CASTEO");
        aux.push($$[$0-1]);
        
        if(typeof $$[$0] === "object"){
            for (let i = 0; i < $$[$0].length; i++){
                aux.push($$[$0][i]);
            }
        }else{
            aux.push($$[$0]);
        }
        this.$ = aux;
    
break;
case 43:

        var aux = ["DECLARACION"];
         aux.push($$[$0-1]);
        for (let i = 0; i < $$[$0].length; i++){
            aux.push($$[$0][i])
        }
        this.$ = aux;
    
break;
case 44:

        var aux = ["Vector"];
        aux.push($$[$0-3]);
        for (let i = 0; i < $$[$0].length; i++){
            aux.push($$[$0][i]);
        }
        this.$ = aux;

    
break;
case 45:

        var aux = ["Vector"];
        aux.push($$[$0-5]);
        for (let i = 0; i < $$[$0].length; i++){
            aux.push($$[$0][i]);
        }
        this.$ = aux;
    
break;
case 46:
this.$ = [$$[$0-6],"Tamaño1",$$[$0-1]];
break;
case 47:
this.$ = [$$[$0-5],"toCharArray",$$[$0-1]];
break;
case 48:
this.$ = [$$[$0-7],"Tamaño1","CASTEO",$$[$0-1]];
break;
case 49:

        var aux = [$$[$0-4],"Valores1"];
        for (let i = 0; i < $$[$0-1].length; i++){
            aux.push($$[$0-1][i]);
        }
        this.$ = aux;
    
break;
case 50:
 this.$ = [$$[$0-9],"Tamaño2",$$[$0-4],$$[$0-1]];
break;
case 51:

        var aux = [$$[$0-10],"ValoresP1"];      
        for (let i = 0; i < $$[$0-6].length; i++){
            aux.push($$[$0-6][i]);
        }
        aux.push("ValoresP2");
        for (let i = 0; i < $$[$0-2].length; i++){
            aux.push($$[$0-2][i]);
        }
        this.$ = aux;
    
break;
case 52:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 53:
this.$ = [$$[$0]];
break;
case 54:
 this.$ = ["ModificarVector",$$[$0-5],$$[$0-3],$$[$0-1],$$[$0]]
break;
case 55:
 this.$ = ["ModificarVector",$$[$0-8],"Posicion1",$$[$0-6],"Posicion2",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 56:

        var aux = ["PUSH",$$[$0-4]];
        if(typeof $$[$0-1] === "object"){
            for (let i = 0; i < $$[$0-1].length; i++){
                aux.push($$[$0-1][i]);
            }
        }else{
            aux.push($$[$0-1]);
        }
        this.$ = aux;
    
break;
case 57:
this.$=["POP",$$[$0-3]]
break;
case 58: case 59:
this.$ =$$[$0]
break;
case 60:
   
        var aux = ["IF"];
        
        for (let i = 0; i < $$[$0-2].length; i++){
            aux.push($$[$0-2][i]);
        }

        //instrucciones
        if($$[$0][1][0] === "ELSE" || $$[$0][1][0] === "ELIF"){
            for (let i = 0; i < $$[$0].length; i++){
                aux.push($$[$0][i]);
            }
        }else{
            aux.push($$[$0]);
        }

        this.$ = aux;
    
break;
case 61: case 83:
this.$ = $$[$0-1];
break;
case 62:
this.$ = [$$[$0-2],$$[$0]]
break;
case 63:

        var aux = ["ELIF"];
        for (let i = 0; i < $$[$0-2].length; i++){
            aux.push($$[$0-2][i]);
        }
       
        //instrucciones
        if($$[$0][1][0] === "ELSE" || $$[$0][1][0] === "ELIF"){
            for (let i = 0; i < $$[$0].length; i++){
                aux.push($$[$0][i]);
            }
        }else{
            aux.push($$[$0]);
        }
       
        this.$ = aux;
    
break;
case 64:

        var aux = ["ELSE"];
        aux.push($$[$0]);
        this.$ = aux;
    
break;
case 65:

        var aux = ["SWITCH"];
        if(typeof $$[$0-2] === "object"){
            for (let i = 0; i < $$[$0-2].length; i++){
                aux.push($$[$0-2][i]);
            }
        }else{
            aux.push($$[$0-2]);
        }
        aux.push($$[$0]);
        this.$ = aux;
    
break;
case 66:
this.$ = [$$[$0-2],$$[$0-1]]
break;
case 67: case 68:
this.$ = $$[$0-1]
break;
case 69:

        var aux = ["CASE"];
        if(typeof $$[$0-2] === "object"){
            for (let i = 0; i < $$[$0-2].length; i++){
                aux.push($$[$0-2][i]);
            }
        }else{
            aux.push($$[$0-2]);
        }
        aux.push($$[$0]);
        $$[$0-4].push(aux);
    
break;
case 70:

        var aux = ["CASE"];
        if(typeof $$[$0-2] === "object"){
            for (let i = 0; i < $$[$0-2].length; i++){
                aux.push($$[$0-2][i]);
            }
        }else{
            aux.push($$[$0-2]);
        }
        aux.push($$[$0]);
        this.$=aux;
    
break;
case 71:
this.$ = ["DEFAULT",$$[$0]]
break;
case 72: case 73: case 74: case 75: case 122:
this.$ = $$[$0]
break;
case 76:

        var aux = ["WHILE"]
        if(typeof $$[$0-4] === "object"){
            for (let i = 0; i < $$[$0-4].length; i++){
                aux.push($$[$0-4][i]);
            }
        }else{
            aux.push($$[$0-4]);
        }
        aux.push($$[$0-1])
        this.$ = aux;
    
break;
case 77: case 78: case 79: case 80:

        this.$ = ["FOR",$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]]
    
break;
case 81:

        var aux = ["DOWHILE",$$[$0-6],"WHILE"];
        if(typeof $$[$0-2] === "object"){
            for (let i = 0; i < $$[$0-2].length; i++){
                aux.push($$[$0-2][i]);
            }
        }else{
            aux.push($$[$0-2]);
        }
        this.$ = aux;
    
break;
case 82:

        var aux = ["DOUNTIL",$$[$0-6],"HASTA"];
        if(typeof $$[$0-2] === "object"){
            for (let i = 0; i < $$[$0-2].length; i++){
                aux.push($$[$0-2][i]);
            }
        }else{
            aux.push($$[$0-2]);
        }
        this.$ = aux;
    
break;
case 84: case 97:
this.$ = ["Incremento",$$[$0-1]]
break;
case 85: case 96:
this.$ = ["Decremento",$$[$0-1]]
break;
case 86:

        var aux = ["ASIGNACION",$$[$0-2],$$[$0-1]];

        if(typeof $$[$0] === "object"){
            for (let i = 0; i < $$[$0].length; i++){
                aux.push($$[$0][i]);
            }
        }else{
            aux.push($$[$0]);
        }
        this.$ = aux
    
break;
case 87:

        var aux = ["ASIGNACION",$$[$0-6],$$[$0-5]];
        if(typeof $$[$0-4] === "object"){
            for (let i = 0; i < $$[$0-4].length; i++){
                aux.push($$[$0-4][i]);
            }
        }else{
            aux.push($$[$0-4]);
        }
        aux.push("TERNARIO");
        if(typeof $$[$0-2] === "object"){
            for (let i = 0; i < $$[$0-2].length; i++){
                aux.push($$[$0-2][i]);
            }
        }else{
            aux.push($$[$0-2]);
        }
        aux.push(":");
        if(typeof $$[$0] === "object"){
            for (let i = 0; i < $$[$0].length; i++){
                aux.push($$[$0][i]);
            }
        }else{
            aux.push($$[$0]);
        }
        this.$ = aux;
    
break;
case 88:
$$[$0-2].push($$[$0]);this.$ = $$[$0-2];
break;
case 89:
  this.$ = [$$[$0]]; 
break;
case 90: case 91: case 92: case 93: case 94:
this.$=$$[$0]
break;
case 95:
 var t = parseInt($$[$0]) * -1; this.$=[t.toString()]
break;
case 98:
 var t = parseInt($$[$0-2]) + parseInt($$[$0]);this.$=t.toString()
break;
case 99:
 var t = parseInt($$[$0-2]) - parseInt($$[$0]);this.$=t.toString()
break;
case 100:
 var t = parseInt($$[$0-2]) * parseInt($$[$0]);this.$=t.toString()
break;
case 101:
 var t = parseInt($$[$0-2]) / parseInt($$[$0]);this.$=t.toString()
break;
case 102:
 var t = parseInt($$[$0-2]) % parseInt($$[$0]);this.$=t.toString()
break;
case 103:
 var t = Math.pow($$[$0-2],$$[$0]); this.$=t.toString()
break;
case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111:
 this.$ = [$$[$0-2],$$[$0-1],$$[$0]] 
break;
case 112:
 this.$ = [$$[$0-1],$$[$0]] 
break;
case 113: case 114: case 115: case 116: case 117: case 118: case 119:
this.$ = $$[$0];
break;
case 120: case 121:
this.$=$$[$0];
break;
case 123:
this.$=$$[$0-1]
break;
case 124:
this.$=["ACCV",$$[$0-3],"Posicion1",$$[$0-1]]
break;
case 125:
this.$=["ACCV",$$[$0-6],"Posicion1",$$[$0-4],"Posicion2",$$[$0-1]]
break;
}
},
table: [{2:[1,3],3:1,4:2,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{1:[3]},{5:[1,43],7:44,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{6:[1,45]},o($Vh,[2,4]),{6:[1,46]},{6:[1,47]},{6:[1,48]},{6:[1,49]},{6:[1,50]},{6:[1,51]},{6:[1,52]},{6:[1,53]},{6:[1,54]},o($Vh,[2,14]),o($Vh,[2,15]),o($Vh,[2,16]),o($Vh,[2,17]),{6:[1,55]},o($Vh,[2,19]),{6:[1,56]},{24:$Vi,47:57,50:[1,58]},{25:[1,64],48:$Vj,50:[1,63],56:[1,65],57:[1,66],79:$Vk,80:$Vl},{25:[1,67]},{25:[1,68]},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:69,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},o($Vh,[2,58]),o($Vh,[2,59]),o($Vh,[2,72]),o($Vh,[2,73]),o($Vh,[2,74]),o($Vh,[2,75]),{21:89,24:[1,90]},o($VC,[2,90]),o($VC,[2,91]),o($VC,[2,92]),o($VC,[2,93]),o($VC,[2,94]),{25:[1,91]},{25:[1,92]},{25:[1,93]},{25:[1,94]},{30:[1,95]},{1:[2,1]},o($Vh,[2,3]),{1:[2,2]},o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),o($Vh,[2,11]),o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,18]),o($Vh,[2,20]),{6:[2,43],45:[1,97],48:[1,96]},{51:[1,98]},o($VD,[2,89]),{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:99,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},o($VE,[2,84]),o($VE,[2,85]),{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:100,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,26:101,27:[1,102],32:104,34:103,35:80,36:$Vo,37:105,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{25:[1,106]},{25:[1,107]},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:108,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:109,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{6:[2,40],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:124,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},o($VT,[2,115],{25:$VU,50:[1,128],79:[1,126],80:[1,125]}),{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:129,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},o($VT,[2,113]),o($VT,[2,114]),o($VT,[2,116]),o($VT,[2,117]),o($VT,[2,118]),o($VT,[2,119]),o($VT,[2,120]),o($VT,[2,121]),o($VT,[2,122]),{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:130,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{25:[1,131]},{25:[1,132]},{25:[1,133]},{25:[1,134]},{25:[1,135]},{25:[1,136]},{6:[1,137]},{25:$VU},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:138,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:139,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:140,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{8:141,9:142,24:[1,144],32:143,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{4:145,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{21:79,24:$Vm,25:$VV,35:80,36:$Vo,37:146,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,49:147,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{24:[1,149]},{24:[1,152],50:[1,151],52:150},o($VE,[2,86],{81:[1,153],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS}),{51:[1,154],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{27:[1,155],45:[1,156]},{6:$VW,28:[1,157],30:[1,158]},{27:[1,159],45:$VX},{24:[1,161]},o($VY,[2,53],{87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS}),{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:162,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{27:[1,163]},{27:[1,164],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{27:[1,165],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:166,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:167,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:168,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:169,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:170,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:171,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:172,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:173,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:174,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:175,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:176,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:177,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:178,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:179,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},o($VZ,[2,95],{89:$VH,90:$VI,91:$VJ,92:$VK}),o($VT,[2,96]),o($VT,[2,97]),{21:79,24:$Vm,25:$Vn,27:[1,180],34:103,35:80,36:$Vo,37:105,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:181,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},o($VT,[2,112]),{27:[1,182],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:183,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:184,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:185,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:186,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:187,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:188,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},o($Vh,[2,27]),{27:[1,189],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{27:[1,190],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{27:[1,191],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{6:[1,192]},{6:[1,193]},{24:$Vi,47:57},{48:$Vj},{7:44,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,31:[1,194],32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{6:[2,41],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:195,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,32:196,35:80,36:$Vo,37:130,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},o($VD,[2,88]),{6:[2,44]},{51:[1,197]},{48:[1,198]},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:199,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{48:[1,200],50:[1,201]},{28:[1,202],30:[1,203]},{32:204,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{29:[1,206],32:205,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{4:207,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},o($VT,[2,28]),{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:208,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},o($V_,[2,39]),{27:[1,209],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{6:[2,57]},{6:[2,36]},{6:[2,37]},o($VZ,[2,98],{89:$VH,90:$VI,91:$VJ,92:$VK}),o($VZ,[2,99],{89:$VH,90:$VI,91:$VJ,92:$VK}),o($V$,[2,100],{92:$VK}),o($V$,[2,101],{92:$VK}),o($V$,[2,102],{92:$VK}),o($VT,[2,103]),o($V01,[2,104],{87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK}),o($V01,[2,105],{87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK}),o($V01,[2,106],{87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK}),o($V01,[2,107],{87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK}),o($V01,[2,108],{87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK}),o($V01,[2,109],{87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK}),o([6,27,28,31,45,51,81,99,100],[2,110],{87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ}),o([6,27,28,31,45,51,81,100],[2,111],{87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR}),o($VT,$VW),{51:[1,210],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},o($VT,[2,123]),{27:[1,211],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{27:[1,212],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{27:[1,213],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{27:[1,214],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{27:[1,215],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{27:[1,216],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{30:$V11,61:217},{30:[1,220],66:219},{30:[1,221]},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:222,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:223,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{75:[1,224],78:[1,225]},{6:[2,42],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{27:[1,226]},{24:[1,228],53:227},{30:[1,231],54:[1,229],55:[1,230]},{28:[1,232],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:233,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:234,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{29:[1,236],32:235,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{4:237,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{24:[1,238]},{30:[1,239]},{30:[1,240]},{7:44,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,31:[1,241],32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},o($VY,[2,52],{87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS}),{6:[2,56]},o($VT,[2,124],{50:[1,242]}),o($VT,[2,30]),o($VT,[2,31]),o($VT,[2,32]),o($VT,[2,33]),o($VT,[2,34]),o($VT,[2,35]),o($Vh,[2,60]),{4:243,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},o($Vh,[2,65]),{67:244,68:245,69:[1,246],70:$V21},{4:248,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{6:[1,249],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{6:[1,250],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{25:[1,251]},{25:[1,252]},o([24,25,36,38,39,40,41,42,87,101,102,103,104,105,106,107],[2,83]),{6:[2,45]},{48:[1,253]},{32:254,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{25:[1,255]},{21:79,24:$Vm,25:$Vn,34:256,35:80,36:$Vo,37:105,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:257,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{6:[2,54],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{51:[1,258],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{30:[1,259]},{30:[1,260]},{7:44,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,31:[1,261],32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},o($V_,[2,38]),{4:262,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{4:263,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},o($Vh,[2,24]),{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:264,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{7:44,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,31:[1,265],32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{31:[1,267],68:266,69:[1,268],70:$V21},{31:[1,269]},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:270,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{28:[1,271]},{7:44,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,31:[1,272],32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{9:274,10:273,24:$V31},{9:277,10:276,24:$V31},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:278,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:279,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{30:[1,281],54:[1,280]},{50:[1,282]},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:283,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{31:[1,284],45:$VX},o($VE,[2,87],{87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS}),{48:[1,285]},{4:286,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{4:287,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},o($Vh,[2,22]),{7:44,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,31:[1,288],32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{7:44,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,31:[1,289],32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{51:[1,290],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},o($Vh,[2,61],{62:291,63:[1,292],64:[1,293]}),{31:[1,294]},o($Vh,[2,67]),{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:295,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},o($Vh,[2,68]),{28:[1,296],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{4:297,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},o($Vh,[2,76]),{27:[1,298]},{27:[1,299]},{48:$Vj,79:$Vk,80:$Vl},{27:[1,300]},{27:[1,301]},{27:[1,302],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{27:[1,303],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{32:304,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{30:[1,305]},{21:79,24:$Vm,25:$VV,35:80,36:$Vo,37:306,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,49:307,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{27:[1,308],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{6:[2,49]},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:309,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{7:44,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,31:[1,310],32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{7:44,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,31:[1,311],32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},o($Vh,[2,26]),o($Vh,[2,23]),o($VT,[2,125]),o($Vh,[2,62]),{25:[1,312]},{30:$V11,61:313},o($Vh,[2,66]),{28:[1,314],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{4:315,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{7:44,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,31:[2,71],32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{30:[1,316]},{30:[1,317]},{30:[1,318]},{30:[1,319]},{6:[1,320]},{6:[1,321]},{50:[1,322]},{21:79,24:$Vm,25:$Vn,34:323,35:80,36:$Vo,37:105,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{51:[1,324],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:325,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{6:[2,47]},{6:[2,55],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},o($Vh,[2,25]),o($Vh,[2,21]),{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:326,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},o($Vh,[2,64]),{4:327,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},o($V41,[2,70],{8:5,9:6,10:7,11:8,12:9,13:10,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,32:21,58:26,59:27,71:28,72:29,73:30,74:31,7:44,14:$V0,15:$V1,24:$V2,33:$V3,43:$V4,44:$V5,46:$V6,60:$V7,65:$V8,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg}),{4:328,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{4:329,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{4:330,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{4:331,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},o($Vh,[2,81]),o($Vh,[2,82]),{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:332,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{31:[1,333],45:$VX},{6:[2,46]},{51:[1,334],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{27:[1,335],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},o($V41,[2,69],{8:5,9:6,10:7,11:8,12:9,13:10,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,32:21,58:26,59:27,71:28,72:29,73:30,74:31,7:44,14:$V0,15:$V1,24:$V2,33:$V3,43:$V4,44:$V5,46:$V6,60:$V7,65:$V8,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg}),{7:44,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,31:[1,336],32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{7:44,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,31:[1,337],32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{7:44,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,31:[1,338],32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{7:44,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V2,31:[1,339],32:21,33:$V3,43:$V4,44:$V5,46:$V6,58:26,59:27,60:$V7,65:$V8,71:28,72:29,73:30,74:31,75:$V9,76:$Va,77:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{51:[1,340],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{45:[1,341]},{6:[2,48]},{30:$V11,61:342},o($Vh,[2,77]),o($Vh,[2,78]),o($Vh,[2,79]),o($Vh,[2,80]),{50:[1,343]},{30:[1,344]},o($Vh,[2,63]),{21:79,24:$Vm,25:$Vn,35:80,36:$Vo,37:345,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{21:79,24:$Vm,25:$Vn,34:346,35:80,36:$Vo,37:105,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,87:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:81},{51:[1,347],87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS},{31:[1,348],45:$VX},{6:[2,50]},{31:[1,349]},{6:[2,51]}],
defaultActions: {43:[2,1],45:[2,2],150:[2,44],163:[2,57],164:[2,36],165:[2,37],209:[2,56],227:[2,45],284:[2,49],308:[2,47],324:[2,46],334:[2,48],347:[2,50],349:[2,51]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var cont1 = 0;
    var cont2 = 0;
    var cont3 = 0;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:console.log("Token <comentario 1>: "+yy_.yytext)
break;
case 1:console.log("Token <comentario 2>: "+yy_.yytext)
break;
case 2:
break;
case 3:
break;
case 4:console.log("Token <pr_int>: "+yy_.yytext);     return "prInt";      
break;
case 5:console.log("Token <pr_double>: "+yy_.yytext);  return "prDouble";   
break;
case 6:console.log("Token <pr_boolean>: "+yy_.yytext); return "prBoolean";  
break;
case 7:console.log("Token <pr_char>: "+yy_.yytext);    return "prChar";     
break;
case 8:console.log("Token <pr_string>: "+yy_.yytext);  return "prString";   
break;
case 9:console.log("Token <decimal>: "+yy_.yytext); return "tkDecimal";  
break;
case 10:console.log("Token <entero>: "+yy_.yytext);  return "tkEntero";   
break;
case 11:console.log("Token <pr_true>: "+yy_.yytext);   return "prTrue";  
break;
case 12:console.log("Token <pr_false>: "+yy_.yytext);  return "prFalse"; 
break;
case 13:console.log("Token <tk_caracter>: "+yy_.yytext);  return "tkCaracter"; 
break;
case 14:console.log("Token <tk_cadena>:  "+yy_.yytext);  return "tkCadena"; 
break;
case 15:console.log("Token <tk_incremento>:  "+yy_.yytext);  return "tkIncremento";   
break;
case 16:console.log("Token <tk_decremento>:  "+yy_.yytext);  return "tkDecremento"; 
break;
case 17:console.log("Token <tk_mas>:  "+yy_.yytext);    return "tkMas";   
break;
case 18:console.log("Token <tk_menos>:  "+yy_.yytext);  return "tkMenos"; 
break;
case 19:console.log("Token <tk_mult>:  "+yy_.yytext);   return "tkMult";  
break;
case 20:console.log("Token <tk_div>:  "+yy_.yytext);     return "tkDiv";  
break;
case 21:console.log("Token <tk_pot>:  "+yy_.yytext);     return "tkPot";  
break;
case 22:console.log("Token <tk_mod>:  "+yy_.yytext);     return "tkMod";  
break;
case 23:console.log("Token <tk_mayorIgual>:  "+yy_.yytext);   return "tkMayorIgual";  
break;
case 24:console.log("Token <tk_menorIgual>:  "+yy_.yytext);   return "tkMenorIgual";  
break;
case 25:console.log("Token <tk_Igual>:  "+yy_.yytext);        return "tkIgual";       
break;
case 26:console.log("Token <tk_diferente>:  "+yy_.yytext);    return "tkDiferente";   
break;
case 27:console.log("Token <tk_mayor>:  "+yy_.yytext);        return "tkMayor";       
break;
case 28:console.log("Token <tk_menor>:  "+yy_.yytext);        return "tkMenor";       
break;
case 29:console.log("Token <tk_sgIgual>:  "+yy_.yytext);      return "tkSgIgual";
break;
case 30:console.log("Token <tk_or>:  "+yy_.yytext);   return "tkOr";  
break;
case 31:console.log("Token <tk_and>:  "+yy_.yytext);  return "tkAnd"; 
break;
case 32:console.log("Token <tk_not>:  "+yy_.yytext);  return "tkNot"; 
break;
case 33:console.log("Token <tk_abrP>:  "+yy_.yytext);   return "tkAbrP";  
break;
case 34:console.log("Token <tk_cerrP>:  "+yy_.yytext);  return "tkCerrP"; 
break;
case 35:console.log("Token <tk_ptComa>:  "+yy_.yytext);  return "tkPtComa"; 
break;
case 36:console.log("Token <tk_abrLL>:  "+yy_.yytext);   return "tkAbrLL";  
break;
case 37:console.log("Token <tk_cerrLL>:  "+yy_.yytext);  return "tkCerrLL"; 
break;
case 38:console.log("Token <pr_new>:  "+yy_.yytext);     return "prNew";       
break;
case 39:console.log("Token <pr_print>:  "+yy_.yytext);   return "prPrint";     
break;
case 40:console.log("Token <pr_printl>:  "+yy_.yytext);  return "prPrintln";   
break;
case 41:console.log("Token <pr_if>:  "+yy_.yytext);      return "prIF";        
break;
case 42:console.log("Token <pr_else>:  "+yy_.yytext);    return "prElse";      
break;
case 43:console.log("Token <pr_elif>:  "+yy_.yytext);    return "prElif";      
break;
case 44:console.log("Token <pr_switch>:  "+yy_.yytext);  return "prSwitch";    
break;
case 45:console.log("Token <pr_case>:  "+yy_.yytext);    return "prCase";      
break;
case 46:console.log("Token <pr_default>:  "+yy_.yytext); return "prDefault";   
break;
case 47:console.log("Token <pr_break>:  "+yy_.yytext);   return "prBreak";     
break;
case 48:console.log("Token <pr_continue>:  "+yy_.yytext);   return "prContinue";     
break;
case 49:console.log("Token <pr_while>:  "+yy_.yytext);   return "prWhile";     
break;
case 50:console.log("Token <pr_for>:  "+yy_.yytext);     return "prFor";       
break;
case 51:console.log("Token <pr_do>:  "+yy_.yytext);      return "prDo";        
break;
case 52:console.log("Token <pr_until>:  "+yy_.yytext);   return "prUntil";     
break;
case 53:console.log("Token <pr_return>:  "+yy_.yytext);   return "prReturn";   
break;
case 54:console.log("Token <pr_lower>:  "+yy_.yytext);   return "prLower";     
break;
case 55:console.log("Token <pr_Upper>:  "+yy_.yytext);   return "prUpper";   
break;
case 56:console.log("Token <pr_Round>:  "+yy_.yytext);   return "prRound";   
break;
case 57:console.log("Token <pr_void>:  "+yy_.yytext);   return "prVoid";  
break;
case 58:console.log("Token <pr_Run>:  "+yy_.yytext);   return "prRun";  
break;
case 59:console.log("Token <pr_length>:  "+yy_.yytext);   return "prLength";     
break;
case 60:console.log("Token <pr_typeof>:  "+yy_.yytext);   return "prTypeof";   
break;
case 61:console.log("Token <pr_push>:  "+yy_.yytext);   return "prPush";     
break;
case 62:console.log("Token <pr_pop>:  "+yy_.yytext);   return "prPop";   
break;
case 63:console.log("Token <pr_toString>:  "+yy_.yytext);   return "prToString";   
break;
case 64:console.log("Token <pr_toCharArray>:  "+yy_.yytext);   return "prToCharArray";  
break;
case 65:console.log("Token <tk_ID>:  "+yy_.yytext);  return "tkID"; 
break;
case 66:console.log("Token <tk_coma>:  "+yy_.yytext);  return "tkComa"; 
break;
case 67:console.log("Token <tk_2puntos>:  "+yy_.yytext);  return "tk2Puntos"; 
break;
case 68:console.log("Token <tk_ternario>:  "+yy_.yytext);  return "tkTernario"; 
break;
case 69:console.log("Token <tk_abrC>: "+yy_.yytext);  return "tkAbrC"; 
break;
case 70:console.log("Token <tk_cerrC>: "+yy_.yytext);  return "tkCerrC"; 
break;
case 71:console.log("Fin de documento"); return 5;
break;
case 72: console.error('Error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:(\/\/)[^\n]*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:[\'][^'][\'])/i,/^(?:[\"][^"]*[\"])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:[(])/i,/^(?:[)])/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:new\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:return\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:void\b)/i,/^(?:run\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:\.push\b)/i,/^(?:\.pop\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:,)/i,/^(?::)/i,/^(?:\?)/i,/^(?:[[])/i,/^(?:\])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}