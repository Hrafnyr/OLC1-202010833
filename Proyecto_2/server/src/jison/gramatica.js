/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,10],$V2=[1,11],$V3=[1,22],$V4=[1,32],$V5=[1,23],$V6=[1,24],$V7=[1,25],$V8=[1,38],$V9=[1,39],$Va=[1,40],$Vb=[1,41],$Vc=[1,42],$Vd=[1,33],$Ve=[1,34],$Vf=[1,35],$Vg=[1,36],$Vh=[1,37],$Vi=[2,5,14,15,24,31,33,43,44,46,60,66,70,71,76,77,78,83,84,85,86,87],$Vj=[1,59],$Vk=[1,60],$Vl=[1,61],$Vm=[1,62],$Vn=[1,71],$Vo=[1,82],$Vp=[1,83],$Vq=[1,84],$Vr=[1,85],$Vs=[1,86],$Vt=[1,87],$Vu=[1,88],$Vv=[1,70],$Vw=[1,72],$Vx=[1,73],$Vy=[1,74],$Vz=[1,75],$VA=[1,76],$VB=[1,77],$VC=[1,78],$VD=[24,27,30,50],$VE=[8,45,48],$VF=[8,27],$VG=[1,111],$VH=[1,110],$VI=[1,112],$VJ=[1,113],$VK=[1,114],$VL=[1,115],$VM=[1,116],$VN=[1,117],$VO=[1,118],$VP=[1,119],$VQ=[1,120],$VR=[1,121],$VS=[1,122],$VT=[1,123],$VU=[8,27,28,31,45,51,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101],$VV=[1,127],$VW=[1,148],$VX=[2,29],$VY=[1,160],$VZ=[27,31,45],$V_=[8,27,28,31,45,51,82,88,89,94,95,96,97,98,99,100,101],$V$=[8,27,28,31,45,51,82,100,101],$V01=[27,45],$V11=[8,27,28,31,45,51,82,88,89,90,91,92,94,95,96,97,98,99,100,101],$V21=[8,27,28,31,45,51,82,94,95,96,97,98,99,100,101],$V31=[1,218],$V41=[1,247],$V51=[1,275],$V61=[31,70,71];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIAR":3,"CUERPO":4,"EOF":5,"INS":6,"DECLARACION":7,"tkPtComa":8,"ASIGNACION":9,"INCREMENTO":10,"VECTORES":11,"MODIFICARVEC":12,"PRINTS":13,"prBreak":14,"prContinue":15,"RETURN":16,"CONDICIONALES":17,"CICLOS":18,"FUNCIONES":19,"METODOS":20,"LLAMADAS":21,"RUN":22,"OPVEC":23,"tkID":24,"tkAbrP":25,"PARAMETROSF":26,"tkCerrP":27,"tk2Puntos":28,"prVoid":29,"tkAbrLL":30,"tkCerrLL":31,"TIPODATO":32,"prRun":33,"LISTAVEC1":34,"FUNCS":35,"prLower":36,"EXPRESION":37,"prUpper":38,"prRound":39,"prLength":40,"prTypeof":41,"prToString":42,"prPrint":43,"prPrintln":44,"tkComa":45,"prReturn":46,"LISTAID":47,"tkSgIgual":48,"CASTEO":49,"tkAbrC":50,"tkCerrC":51,"TIPOV1":52,"TIPOV2":53,"prNew":54,"prToCharArray":55,"prPush":56,"prPop":57,"IF":58,"SWITCH":59,"prIF":60,"BLOQUEIF":61,"ELIFB":62,"ELSEB":63,"prElif":64,"prElse":65,"prSwitch":66,"BLOQUESW":67,"CASE":68,"DEFAULT":69,"prCase":70,"prDefault":71,"WHILE":72,"FOR":73,"DOWHILE":74,"DOUNTIL":75,"prWhile":76,"prFor":77,"prDo":78,"prUntil":79,"tkIncremento":80,"tkDecremento":81,"tkTernario":82,"prInt":83,"prDouble":84,"prString":85,"prChar":86,"prBoolean":87,"tkMenos":88,"tkMas":89,"tkMult":90,"tkDiv":91,"tkMod":92,"tkPot":93,"tkMenor":94,"tkMayor":95,"tkMayorIgual":96,"tkMenorIgual":97,"tkIgual":98,"tkDiferente":99,"tkAnd":100,"tkOr":101,"tkNot":102,"tkEntero":103,"tkDecimal":104,"prTrue":105,"prFalse":106,"tkCadena":107,"tkCaracter":108,"ACCEDERVECTOR":109,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"tkPtComa",14:"prBreak",15:"prContinue",24:"tkID",25:"tkAbrP",27:"tkCerrP",28:"tk2Puntos",29:"prVoid",30:"tkAbrLL",31:"tkCerrLL",33:"prRun",36:"prLower",38:"prUpper",39:"prRound",40:"prLength",41:"prTypeof",42:"prToString",43:"prPrint",44:"prPrintln",45:"tkComa",46:"prReturn",48:"tkSgIgual",50:"tkAbrC",51:"tkCerrC",54:"prNew",55:"prToCharArray",56:"prPush",57:"prPop",60:"prIF",64:"prElif",65:"prElse",66:"prSwitch",70:"prCase",71:"prDefault",76:"prWhile",77:"prFor",78:"prDo",79:"prUntil",80:"tkIncremento",81:"tkDecremento",82:"tkTernario",83:"prInt",84:"prDouble",85:"prString",86:"prChar",87:"prBoolean",88:"tkMenos",89:"tkMas",90:"tkMult",91:"tkDiv",92:"tkMod",93:"tkPot",94:"tkMenor",95:"tkMayor",96:"tkMayorIgual",97:"tkMenorIgual",98:"tkIgual",99:"tkDiferente",100:"tkAnd",101:"tkOr",102:"tkNot",103:"tkEntero",104:"tkDecimal",105:"prTrue",106:"prFalse",107:"tkCadena",108:"tkCaracter"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[20,9],[20,7],[20,8],[20,6],[19,9],[19,8],[22,3],[21,4],[21,3],[35,4],[35,4],[35,4],[35,4],[35,4],[35,4],[13,4],[13,4],[26,4],[26,2],[16,2],[7,4],[7,5],[7,2],[11,4],[11,6],[52,7],[52,6],[52,8],[52,5],[53,10],[53,11],[34,3],[34,1],[12,6],[12,9],[23,5],[23,4],[17,1],[17,1],[58,5],[61,3],[61,4],[61,4],[62,5],[63,2],[59,5],[67,4],[67,3],[67,3],[68,5],[68,4],[69,3],[18,1],[18,1],[18,1],[18,1],[72,7],[73,11],[73,11],[73,11],[73,11],[74,9],[75,9],[49,3],[10,2],[10,2],[9,3],[9,7],[47,3],[47,1],[32,1],[32,1],[32,1],[32,1],[32,1],[37,2],[37,2],[37,2],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,2],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,3],[109,4],[109,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 20:
console.log("Error sintactico, no se esperaba: "+ yytext +" en linea " + yylineno );
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{1:[3]},{2:$V0,5:[1,43],6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},o($Vi,[2,3]),{8:[1,45]},{8:[1,46]},{8:[1,47]},{8:[1,48]},{8:[1,49]},{8:[1,50]},{8:[1,51]},{8:[1,52]},{8:[1,53]},o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),{8:[1,54]},o($Vi,[2,18]),{8:[1,55]},{8:[1,56]},{24:$Vj,47:57,50:[1,58]},{25:[1,64],48:$Vk,50:[1,63],56:[1,65],57:[1,66],80:$Vl,81:$Vm},{25:[1,67]},{25:[1,68]},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:69,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},o($Vi,[2,58]),o($Vi,[2,59]),o($Vi,[2,73]),o($Vi,[2,74]),o($Vi,[2,75]),o($Vi,[2,76]),{21:89,24:[1,90]},o($VD,[2,91]),o($VD,[2,92]),o($VD,[2,93]),o($VD,[2,94]),o($VD,[2,95]),{25:[1,91]},{25:[1,92]},{25:[1,93]},{25:[1,94]},{30:[1,95]},{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,17]),o($Vi,[2,19]),o($Vi,[2,20]),{8:[2,43],45:[1,97],48:[1,96]},{51:[1,98]},o($VE,[2,90]),{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:99,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},o($VF,[2,85]),o($VF,[2,86]),{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:100,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,26:101,27:[1,102],32:104,34:103,35:80,36:$Vp,37:105,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{25:[1,106]},{25:[1,107]},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:108,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:109,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{8:[2,40],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:124,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},o($VU,[2,116],{25:$VV,50:[1,128],80:[1,126],81:[1,125]}),{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:129,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},o($VU,[2,114]),o($VU,[2,115]),o($VU,[2,117]),o($VU,[2,118]),o($VU,[2,119]),o($VU,[2,120]),o($VU,[2,121]),o($VU,[2,122]),o($VU,[2,123]),{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:130,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{25:[1,131]},{25:[1,132]},{25:[1,133]},{25:[1,134]},{25:[1,135]},{25:[1,136]},{8:[1,137]},{25:$VV},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:138,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:139,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:140,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{7:141,9:142,24:[1,144],32:143,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{2:$V0,4:145,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{21:79,24:$Vn,25:$VW,35:80,36:$Vp,37:146,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,49:147,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{24:[1,149]},{24:[1,152],50:[1,151],52:150},o($VF,[2,87],{82:[1,153],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT}),{51:[1,154],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{27:[1,155],45:[1,156]},{8:$VX,28:[1,157],30:[1,158]},{27:[1,159],45:$VY},{24:[1,161]},o($VZ,[2,53],{88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT}),{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:162,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{27:[1,163]},{27:[1,164],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{27:[1,165],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:166,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:167,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:168,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:169,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:170,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:171,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:172,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:173,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:174,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:175,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:176,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:177,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:178,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:179,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},o($V_,[2,96],{90:$VI,91:$VJ,92:$VK,93:$VL}),o($VU,[2,97]),o($VU,[2,98]),{21:79,24:$Vn,25:$Vo,27:[1,180],34:103,35:80,36:$Vp,37:105,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:181,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},o($V$,[2,113],{88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR}),{27:[1,182],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:183,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:184,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:185,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:186,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:187,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:188,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},o($Vi,[2,27]),{27:[1,189],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{27:[1,190],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{27:[1,191],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{8:[1,192]},{8:[1,193]},{24:$Vj,47:57},{48:$Vk},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,31:[1,194],32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{8:[2,41],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:195,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,32:196,35:80,36:$Vp,37:130,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},o($VE,[2,89]),{8:[2,44]},{51:[1,197]},{48:[1,198]},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:199,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{48:[1,200],50:[1,201]},{28:[1,202],30:[1,203]},{32:204,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{29:[1,206],32:205,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{2:$V0,4:207,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},o($VU,[2,28]),{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:208,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},o($V01,[2,39]),{27:[1,209],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{8:[2,57]},{8:[2,36]},{8:[2,37]},o($V_,[2,99],{90:$VI,91:$VJ,92:$VK,93:$VL}),o($V_,[2,100],{90:$VI,91:$VJ,92:$VK,93:$VL}),o($V11,[2,101],{93:$VL}),o($V11,[2,102],{93:$VL}),o($V11,[2,103],{93:$VL}),o($VU,[2,104]),o($V21,[2,105],{88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL}),o($V21,[2,106],{88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL}),o($V21,[2,107],{88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL}),o($V21,[2,108],{88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL}),o($V21,[2,109],{88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL}),o($V21,[2,110],{88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL}),o($V$,[2,111],{88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR}),o([8,27,28,31,45,51,82,101],[2,112],{88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS}),o($VU,$VX),{51:[1,210],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},o($VU,[2,124]),{27:[1,211],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{27:[1,212],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{27:[1,213],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{27:[1,214],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{27:[1,215],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{27:[1,216],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{30:$V31,61:217},{30:[1,220],67:219},{30:[1,221]},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:222,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:223,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{76:[1,224],79:[1,225]},{8:[2,42],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{27:[1,226]},{24:[1,228],53:227},{30:[1,231],54:[1,229],55:[1,230]},{28:[1,232],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:233,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:234,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{29:[1,236],32:235,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{2:$V0,4:237,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{24:[1,238]},{30:[1,239]},{30:[1,240]},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,31:[1,241],32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},o($VZ,[2,52],{88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT}),{8:[2,56]},o($VU,[2,125],{50:[1,242]}),o($VU,[2,30]),o($VU,[2,31]),o($VU,[2,32]),o($VU,[2,33]),o($VU,[2,34]),o($VU,[2,35]),o($Vi,[2,60]),{2:$V0,4:243,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},o($Vi,[2,66]),{68:244,69:245,70:[1,246],71:$V41},{2:$V0,4:248,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{8:[1,249],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{8:[1,250],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{25:[1,251]},{25:[1,252]},o([24,25,36,38,39,40,41,42,88,102,103,104,105,106,107,108],[2,84]),{8:[2,45]},{48:[1,253]},{32:254,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{25:[1,255]},{21:79,24:$Vn,25:$Vo,34:256,35:80,36:$Vp,37:105,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:257,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{8:[2,54],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{51:[1,258],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{30:[1,259]},{30:[1,260]},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,31:[1,261],32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},o($V01,[2,38]),{2:$V0,4:262,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{2:$V0,4:263,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},o($Vi,[2,24]),{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:264,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,31:[1,265],32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{31:[1,267],69:266,70:[1,268],71:$V41},{31:[1,269]},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:270,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{28:[1,271]},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,31:[1,272],32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{9:274,10:273,24:$V51},{9:277,10:276,24:$V51},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:278,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:279,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{30:[1,281],54:[1,280]},{50:[1,282]},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:283,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{31:[1,284],45:$VY},o($VF,[2,88],{88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT}),{48:[1,285]},{2:$V0,4:286,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{2:$V0,4:287,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},o($Vi,[2,22]),{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,31:[1,288],32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,31:[1,289],32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{51:[1,290],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},o($Vi,[2,61],{62:291,63:292,64:[1,293],65:[1,294]}),{31:[1,295]},o($Vi,[2,68]),{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:296,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},o($Vi,[2,69]),{28:[1,297],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{2:$V0,4:298,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},o($Vi,[2,77]),{27:[1,299]},{27:[1,300]},{48:$Vk,80:$Vl,81:$Vm},{27:[1,301]},{27:[1,302]},{27:[1,303],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{27:[1,304],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{32:305,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{30:[1,306]},{21:79,24:$Vn,25:$VW,35:80,36:$Vp,37:307,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,49:308,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{27:[1,309],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{8:[2,49]},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:310,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,31:[1,311],32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,31:[1,312],32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},o($Vi,[2,26]),o($Vi,[2,23]),o($VU,[2,126]),o($Vi,[2,62]),o($Vi,[2,63]),{25:[1,313]},{30:$V31,61:314},o($Vi,[2,67]),{28:[1,315],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{2:$V0,4:316,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,31:[2,72],32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{30:[1,317]},{30:[1,318]},{30:[1,319]},{30:[1,320]},{8:[1,321]},{8:[1,322]},{50:[1,323]},{21:79,24:$Vn,25:$Vo,34:324,35:80,36:$Vp,37:105,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{51:[1,325],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:326,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{8:[2,47]},{8:[2,55],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},o($Vi,[2,25]),o($Vi,[2,21]),{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:327,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},o($Vi,[2,65]),{2:$V0,4:328,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},o($V61,[2,71],{7:4,9:5,10:6,11:7,12:8,13:9,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,32:21,58:26,59:27,72:28,73:29,74:30,75:31,6:44,2:$V0,14:$V1,15:$V2,24:$V3,33:$V4,43:$V5,44:$V6,46:$V7,60:$V8,66:$V9,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh}),{2:$V0,4:329,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{2:$V0,4:330,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{2:$V0,4:331,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{2:$V0,4:332,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},o($Vi,[2,82]),o($Vi,[2,83]),{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:333,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{31:[1,334],45:$VY},{8:[2,46]},{51:[1,335],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{27:[1,336],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},o($V61,[2,70],{7:4,9:5,10:6,11:7,12:8,13:9,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,32:21,58:26,59:27,72:28,73:29,74:30,75:31,6:44,2:$V0,14:$V1,15:$V2,24:$V3,33:$V4,43:$V5,44:$V6,46:$V7,60:$V8,66:$V9,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh}),{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,31:[1,337],32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,31:[1,338],32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,31:[1,339],32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:$V1,15:$V2,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,31:[1,340],32:21,33:$V4,43:$V5,44:$V6,46:$V7,58:26,59:27,60:$V8,66:$V9,72:28,73:29,74:30,75:31,76:$Va,77:$Vb,78:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh},{51:[1,341],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{45:[1,342]},{8:[2,48]},{30:$V31,61:343},o($Vi,[2,78]),o($Vi,[2,79]),o($Vi,[2,80]),o($Vi,[2,81]),{50:[1,344]},{30:[1,345]},o($Vi,[2,64]),{21:79,24:$Vn,25:$Vo,35:80,36:$Vp,37:346,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{21:79,24:$Vn,25:$Vo,34:347,35:80,36:$Vp,37:105,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,88:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA,107:$VB,108:$VC,109:81},{51:[1,348],88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN,96:$VO,97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT},{31:[1,349],45:$VY},{8:[2,50]},{31:[1,350]},{8:[2,51]}],
defaultActions: {43:[2,1],150:[2,44],163:[2,57],164:[2,36],165:[2,37],209:[2,56],227:[2,45],284:[2,49],309:[2,47],325:[2,46],335:[2,48],348:[2,50],350:[2,51]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //Área de declaraciones
    var flag = 0
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:console.log("Token <comentario 1>: "+yy_.yytext)
break;
case 1:console.log("Token <comentario 2>: "+yy_.yytext)
break;
case 2:
break;
case 3:
break;
case 4:console.log("Token <pr_int>: "+yy_.yytext);     return "prInt";      
break;
case 5:console.log("Token <pr_double>: "+yy_.yytext);  return "prDouble";   
break;
case 6:console.log("Token <pr_boolean>: "+yy_.yytext); return "prBoolean";  
break;
case 7:console.log("Token <pr_char>: "+yy_.yytext);    return "prChar";     
break;
case 8:console.log("Token <pr_string>: "+yy_.yytext);  return "prString";   
break;
case 9:console.log("Token <decimal>: "+yy_.yytext); return "tkDecimal";  
break;
case 10:console.log("Token <entero>: "+yy_.yytext);  return "tkEntero";   
break;
case 11:console.log("Token <pr_true>: "+yy_.yytext);   return "prTrue";  
break;
case 12:console.log("Token <pr_false>: "+yy_.yytext);  return "prFalse"; 
break;
case 13:console.log("Token <tk_caracter>: "+yy_.yytext);  return "tkCaracter"; 
break;
case 14:console.log("Token <tk_cadena>:  "+yy_.yytext);  return "tkCadena"; 
break;
case 15:console.log("Token <tk_mas>:  "+yy_.yytext);    return "tkMas";   
break;
case 16:console.log("Token <tk_menos>:  "+yy_.yytext);  return "tkMenos"; 
break;
case 17:console.log("Token <tk_mult>:  "+yy_.yytext);   return "tkMult";  
break;
case 18:console.log("Token <tk_div>:  "+yy_.yytext);     return "tkDiv";  
break;
case 19:console.log("Token <tk_pot>:  "+yy_.yytext);     return "tkPot";  
break;
case 20:console.log("Token <tk_mod>:  "+yy_.yytext);     return "tkMod";  
break;
case 21:console.log("Token <tk_incremento>:  "+yy_.yytext);  return "tkIncremento";   
break;
case 22:console.log("Token <tk_decremento>:  "+yy_.yytext);  return "tkDecremento"; 
break;
case 23:console.log("Token <tk_mayor>:  "+yy_.yytext);        return "tkMayor";       
break;
case 24:console.log("Token <tk_menor>:  "+yy_.yytext);        return "tkMenor";       
break;
case 25:console.log("Token <tk_mayorIgual>:  "+yy_.yytext);   return "tkMayorIgual";  
break;
case 26:console.log("Token <tk_menorIgual>:  "+yy_.yytext);   return "tkMenorIgual";  
break;
case 27:console.log("Token <tk_sgIgual>:  "+yy_.yytext);      return "tkSgIgual";
break;
case 28:console.log("Token <tk_Igual>:  "+yy_.yytext);        return "tkIgual";       
break;
case 29:console.log("Token <tk_diferente>:  "+yy_.yytext);    return "tkDiferente";   
break;
case 30:console.log("Token <tk_or>:  "+yy_.yytext);   return "tkOr";  
break;
case 31:console.log("Token <tk_and>:  "+yy_.yytext);  return "tkAnd"; 
break;
case 32:console.log("Token <tk_not>:  "+yy_.yytext);  return "tkNot"; 
break;
case 33:console.log("Token <tk_abrP>:  "+yy_.yytext);   return "tkAbrP";  
break;
case 34:console.log("Token <tk_cerrP>:  "+yy_.yytext);  return "tkCerrP"; 
break;
case 35:console.log("Token <tk_ptComa>:  "+yy_.yytext);  return "tkPtComa"; 
break;
case 36:console.log("Token <tk_abrLL>:  "+yy_.yytext);   return "tkAbrLL";  
break;
case 37:console.log("Token <tk_cerrLL>:  "+yy_.yytext);  return "tkCerrLL"; 
break;
case 38:console.log("Token <pr_new>:  "+yy_.yytext);     return "prNew";       
break;
case 39:console.log("Token <pr_print>:  "+yy_.yytext);   return "prPrint";     
break;
case 40:console.log("Token <pr_printl>:  "+yy_.yytext);  return "prPrintln";   
break;
case 41:console.log("Token <pr_if>:  "+yy_.yytext);      return "prIF";        
break;
case 42:console.log("Token <pr_else>:  "+yy_.yytext);    return "prElse";      
break;
case 43:console.log("Token <pr_elif>:  "+yy_.yytext);    return "prElif";      
break;
case 44:console.log("Token <pr_switch>:  "+yy_.yytext);  return "prSwitch";    
break;
case 45:console.log("Token <pr_case>:  "+yy_.yytext);    return "prCase";      
break;
case 46:console.log("Token <pr_default>:  "+yy_.yytext); return "prDefault";   
break;
case 47:console.log("Token <pr_break>:  "+yy_.yytext);   return "prBreak";     
break;
case 48:console.log("Token <pr_continue>:  "+yy_.yytext);   return "prContinue";     
break;
case 49:console.log("Token <pr_while>:  "+yy_.yytext);   return "prWhile";     
break;
case 50:console.log("Token <pr_for>:  "+yy_.yytext);     return "prFor";       
break;
case 51:console.log("Token <pr_do>:  "+yy_.yytext);      return "prDo";        
break;
case 52:console.log("Token <pr_until>:  "+yy_.yytext);   return "prUntil";     
break;
case 53:console.log("Token <pr_return>:  "+yy_.yytext);   return "prReturn";   
break;
case 54:console.log("Token <pr_lower>:  "+yy_.yytext);   return "prLower";     
break;
case 55:console.log("Token <pr_Upper>:  "+yy_.yytext);   return "prUpper";   
break;
case 56:console.log("Token <pr_Round>:  "+yy_.yytext);   return "prRound";   
break;
case 57:console.log("Token <pr_void>:  "+yy_.yytext);   return "prVoid";  
break;
case 58:console.log("Token <pr_Run>:  "+yy_.yytext);   return "prRun";  
break;
case 59:console.log("Token <pr_length>:  "+yy_.yytext);   return "prLength";     
break;
case 60:console.log("Token <pr_typeof>:  "+yy_.yytext);   return "prTypeof";   
break;
case 61:console.log("Token <pr_push>:  "+yy_.yytext);   return "prPush";     
break;
case 62:console.log("Token <pr_pop>:  "+yy_.yytext);   return "prPop";   
break;
case 63:console.log("Token <pr_toString>:  "+yy_.yytext);   return "prToString";   
break;
case 64:console.log("Token <pr_toCharArray>:  "+yy_.yytext);   return "prToCharArray";  
break;
case 65:console.log("Token <tk_ID>:  "+yy_.yytext);  return "tkID"; 
break;
case 66:console.log("Token <tk_coma>:  "+yy_.yytext);  return "tkComa"; 
break;
case 67:console.log("Token <tk_2puntos>:  "+yy_.yytext);  return "tk2Puntos"; 
break;
case 68:console.log("Token <tk_ternario>:  "+yy_.yytext);  return "tkTernario"; 
break;
case 69:console.log("Token <tk_abrC>: "+yy_.yytext);  return "tkAbrC"; 
break;
case 70:console.log("Token <tk_cerrC>: "+yy_.yytext);  return "tkCerrC"; 
break;
case 71:console.log("Fin de documento"); return 5;
break;
case 72: console.error('Error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:(\/\/)[^\n]*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:[\'][^'][\'])/i,/^(?:[\"][^"]*[\"])/i,/^(?:\+[^+])/i,/^(?:-[^-])/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:>[^=])/i,/^(?:<[^=])/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:=[^=])/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:[(])/i,/^(?:[)])/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:new\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:return\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:void\b)/i,/^(?:run\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:\.push\b)/i,/^(?:\.pop\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:,)/i,/^(?::)/i,/^(?:\?)/i,/^(?:[[])/i,/^(?:\])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}