
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import proyecto_olc1.Nodo;
import proyecto_olc1.arbolSintactico;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class A_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public A_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public A_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public A_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\240\000\002\002\004\000\002\045\002\000\002\003" +
    "\006\000\002\003\004\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\004\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\004\000\002\031\007\000\002\046\002\000" +
    "\002\031\011\000\002\047\002\000\002\026\007\000\002" +
    "\050\002\000\002\026\013\000\002\051\002\000\002\030" +
    "\010\000\002\052\002\000\002\030\014\000\002\053\002" +
    "\000\002\025\006\000\002\054\002\000\002\025\006\000" +
    "\002\055\002\000\002\056\002\000\002\005\013\000\002" +
    "\057\002\000\002\004\007\000\002\027\004\000\002\027" +
    "\006\000\002\010\003\000\002\010\005\000\002\034\003" +
    "\000\002\060\002\000\002\034\006\000\002\061\002\000" +
    "\002\011\004\000\002\011\003\000\002\062\002\000\002" +
    "\011\004\000\002\063\002\000\002\011\004\000\002\064" +
    "\002\000\002\011\004\000\002\065\002\000\002\066\002" +
    "\000\002\012\007\000\002\067\002\000\002\070\002\000" +
    "\002\035\007\000\002\042\003\000\002\071\002\000\002" +
    "\042\006\000\002\072\002\000\002\042\005\000\002\073" +
    "\002\000\002\074\002\000\002\015\010\000\002\075\002" +
    "\000\002\076\002\000\002\015\011\000\002\077\002\000" +
    "\002\015\006\000\002\100\002\000\002\101\002\000\002" +
    "\102\002\000\002\020\014\000\002\103\002\000\002\021" +
    "\006\000\002\021\004\000\002\104\002\000\002\021\007" +
    "\000\002\105\002\000\002\043\005\000\002\043\003\000" +
    "\002\106\002\000\002\107\002\000\002\022\010\000\002" +
    "\110\002\000\002\044\005\000\002\111\002\000\002\044" +
    "\004\000\002\112\002\000\002\113\002\000\002\023\010" +
    "\000\002\114\002\000\002\023\006\000\002\115\002\000" +
    "\002\024\006\000\002\116\002\000\002\016\010\000\002" +
    "\117\002\000\002\017\010\000\002\120\002\000\002\017" +
    "\007\000\002\121\002\000\002\017\011\000\002\041\003" +
    "\000\002\006\005\000\002\006\005\000\002\006\003\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\003\000\002\037\007\000\002\037\003\000\002\122" +
    "\002\000\002\040\006\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\013\003\000\002\123\002\000\002\013\006\000\002\124" +
    "\002\000\002\125\002\000\002\013\011\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\006\003\004\046\006\001\002\000\004\047" +
    "\u0110\001\002\000\004\002\u010f\001\002\000\034\050\000" +
    "\051\000\055\000\061\000\065\000\071\000\073\000\075" +
    "\000\076\000\101\000\103\000\104\000\105\000\001\002" +
    "\000\034\050\025\051\uffdb\055\uffd2\061\026\065\uffcf\071" +
    "\uffcd\073\uffcb\075\031\076\011\101\035\103\033\104\023" +
    "\105\015\001\002\000\062\031\uffd0\047\uffd0\050\uffd0\051" +
    "\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\064\uffd0" +
    "\065\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075" +
    "\uffd0\076\uffd0\077\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0" +
    "\105\uffd0\001\002\000\004\051\u0104\001\002\000\036\047" +
    "\ufff7\050\ufff7\051\ufff7\055\ufff7\061\ufff7\065\ufff7\071\ufff7" +
    "\073\ufff7\075\ufff7\076\ufff7\101\ufff7\103\ufff7\104\ufff7\105" +
    "\ufff7\001\002\000\004\073\372\001\002\000\004\071\uffaa" +
    "\001\002\000\024\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\027\uffe0\051\uffe0\001\002\000\036" +
    "\047\350\050\025\051\uffdb\055\uffd2\061\026\065\uffcf\071" +
    "\uffcd\073\uffcb\075\031\076\011\101\035\103\033\104\023" +
    "\105\015\001\002\000\004\065\311\001\002\000\004\055" +
    "\247\001\002\000\004\051\227\001\002\000\036\047\ufffd" +
    "\050\ufffd\051\ufffd\055\ufffd\061\ufffd\065\ufffd\071\ufffd\073" +
    "\ufffd\075\ufffd\076\ufffd\101\ufffd\103\ufffd\104\ufffd\105\ufffd" +
    "\001\002\000\024\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\012\uffe2\027\uffe2\051\uffe2\001\002\000\036" +
    "\047\ufffa\050\ufffa\051\ufffa\055\ufffa\061\ufffa\065\ufffa\071" +
    "\ufffa\073\ufffa\075\ufffa\076\ufffa\101\ufffa\103\ufffa\104\ufffa" +
    "\105\ufffa\001\002\000\004\051\uffde\001\002\000\024\004" +
    "\114\005\123\006\121\007\120\010\113\011\112\012\107" +
    "\027\115\051\105\001\002\000\036\047\ufff9\050\ufff9\051" +
    "\ufff9\055\ufff9\061\ufff9\065\ufff9\071\ufff9\073\ufff9\075\ufff9" +
    "\076\ufff9\101\ufff9\103\ufff9\104\ufff9\105\ufff9\001\002\000" +
    "\036\047\ufffc\050\ufffc\051\ufffc\055\ufffc\061\ufffc\065\ufffc" +
    "\071\ufffc\073\ufffc\075\ufffc\076\ufffc\101\ufffc\103\ufffc\104" +
    "\ufffc\105\ufffc\001\002\000\024\004\uff9e\005\uff9e\006\uff9e" +
    "\007\uff9e\010\uff9e\011\uff9e\012\uff9e\027\uff9e\051\uff9e\001" +
    "\002\000\036\047\ufffb\050\ufffb\051\ufffb\055\ufffb\061\ufffb" +
    "\065\ufffb\071\ufffb\073\ufffb\075\ufffb\076\ufffb\101\ufffb\103" +
    "\ufffb\104\ufffb\105\ufffb\001\002\000\004\051\100\001\002" +
    "\000\036\047\ufff6\050\ufff6\051\ufff6\055\ufff6\061\ufff6\065" +
    "\ufff6\071\ufff6\073\ufff6\075\ufff6\076\ufff6\101\ufff6\103\ufff6" +
    "\104\ufff6\105\ufff6\001\002\000\004\051\037\001\002\000" +
    "\036\047\ufff8\050\ufff8\051\ufff8\055\ufff8\061\ufff8\065\ufff8" +
    "\071\ufff8\073\ufff8\075\ufff8\076\ufff8\101\ufff8\103\ufff8\104" +
    "\ufff8\105\ufff8\001\002\000\012\015\040\016\041\017\042" +
    "\020\044\001\002\000\040\030\uff65\034\uff65\050\uff65\051" +
    "\uff65\053\uff65\055\uff65\061\uff65\065\uff65\071\uff65\073\uff65" +
    "\075\uff65\100\uff65\103\uff65\104\uff65\105\uff65\001\002\000" +
    "\040\030\uff64\034\uff64\050\uff64\051\uff64\053\uff64\055\uff64" +
    "\061\uff64\065\uff64\071\uff64\073\uff64\075\uff64\100\uff64\103" +
    "\uff64\104\uff64\105\uff64\001\002\000\040\030\uff63\034\uff63" +
    "\050\uff63\051\uff63\053\uff63\055\uff63\061\uff63\065\uff63\071" +
    "\uff63\073\uff63\075\uff63\100\uff63\103\uff63\104\uff63\105\uff63" +
    "\001\002\000\032\050\uffe6\051\uffe6\055\uffe6\061\uffe6\065" +
    "\uffe6\071\uffe6\073\uffe6\075\uffe6\100\045\103\uffe6\104\uffe6" +
    "\105\uffe6\001\002\000\040\030\uff62\034\uff62\050\uff62\051" +
    "\uff62\053\uff62\055\uff62\061\uff62\065\uff62\071\uff62\073\uff62" +
    "\075\uff62\100\uff62\103\uff62\104\uff62\105\uff62\001\002\000" +
    "\004\027\065\001\002\000\030\050\025\051\uffdb\055\uffd2" +
    "\061\026\065\uffcf\071\uffcd\073\uffcb\075\031\103\033\104" +
    "\023\105\015\001\002\000\054\031\uff6e\050\uff6e\051\uff6e" +
    "\055\uff6e\056\uff6e\057\uff6e\060\uff6e\061\uff6e\064\uff6e\065" +
    "\uff6e\070\uff6e\071\uff6e\072\uff6e\073\uff6e\074\uff6e\075\uff6e" +
    "\077\uff6e\102\uff6e\103\uff6e\104\uff6e\105\uff6e\001\002\000" +
    "\054\031\uff71\050\uff71\051\uff71\055\uff71\056\uff71\057\uff71" +
    "\060\uff71\061\uff71\064\uff71\065\uff71\070\uff71\071\uff71\072" +
    "\uff71\073\uff71\074\uff71\075\uff71\077\uff71\102\uff71\103\uff71" +
    "\104\uff71\105\uff71\001\002\000\032\050\025\051\uffdb\055" +
    "\uffd2\061\026\065\uffcf\071\uffcd\073\uffcb\075\031\102\064" +
    "\103\033\104\023\105\015\001\002\000\054\031\uff6c\050" +
    "\uff6c\051\uff6c\055\uff6c\056\uff6c\057\uff6c\060\uff6c\061\uff6c" +
    "\064\uff6c\065\uff6c\070\uff6c\071\uff6c\072\uff6c\073\uff6c\074" +
    "\uff6c\075\uff6c\077\uff6c\102\uff6c\103\uff6c\104\uff6c\105\uff6c" +
    "\001\002\000\054\031\uff70\050\uff70\051\uff70\055\uff70\056" +
    "\uff70\057\uff70\060\uff70\061\uff70\064\uff70\065\uff70\070\uff70" +
    "\071\uff70\072\uff70\073\uff70\074\uff70\075\uff70\077\uff70\102" +
    "\uff70\103\uff70\104\uff70\105\uff70\001\002\000\054\031\uff6f" +
    "\050\uff6f\051\uff6f\055\uff6f\056\uff6f\057\uff6f\060\uff6f\061" +
    "\uff6f\064\uff6f\065\uff6f\070\uff6f\071\uff6f\072\uff6f\073\uff6f" +
    "\074\uff6f\075\uff6f\077\uff6f\102\uff6f\103\uff6f\104\uff6f\105" +
    "\uff6f\001\002\000\054\031\uff6d\050\uff6d\051\uff6d\055\uff6d" +
    "\056\uff6d\057\uff6d\060\uff6d\061\uff6d\064\uff6d\065\uff6d\070" +
    "\uff6d\071\uff6d\072\uff6d\073\uff6d\074\uff6d\075\uff6d\077\uff6d" +
    "\102\uff6d\103\uff6d\104\uff6d\105\uff6d\001\002\000\054\031" +
    "\uff67\050\uff67\051\uff67\055\uff67\056\uff67\057\uff67\060\uff67" +
    "\061\uff67\064\uff67\065\uff67\070\uff67\071\uff67\072\uff67\073" +
    "\uff67\074\uff67\075\uff67\077\uff67\102\uff67\103\uff67\104\uff67" +
    "\105\uff67\001\002\000\054\031\uff6a\050\uff6a\051\uff6a\055" +
    "\uff6a\056\uff6a\057\uff6a\060\uff6a\061\uff6a\064\uff6a\065\uff6a" +
    "\070\uff6a\071\uff6a\072\uff6a\073\uff6a\074\uff6a\075\uff6a\077" +
    "\uff6a\102\uff6a\103\uff6a\104\uff6a\105\uff6a\001\002\000\054" +
    "\031\uff6b\050\uff6b\051\uff6b\055\uff6b\056\uff6b\057\uff6b\060" +
    "\uff6b\061\uff6b\064\uff6b\065\uff6b\070\uff6b\071\uff6b\072\uff6b" +
    "\073\uff6b\074\uff6b\075\uff6b\077\uff6b\102\uff6b\103\uff6b\104" +
    "\uff6b\105\uff6b\001\002\000\054\031\uff69\050\uff69\051\uff69" +
    "\055\uff69\056\uff69\057\uff69\060\uff69\061\uff69\064\uff69\065" +
    "\uff69\070\uff69\071\uff69\072\uff69\073\uff69\074\uff69\075\uff69" +
    "\077\uff69\102\uff69\103\uff69\104\uff69\105\uff69\001\002\000" +
    "\054\031\uff68\050\uff68\051\uff68\055\uff68\056\uff68\057\uff68" +
    "\060\uff68\061\uff68\064\uff68\065\uff68\070\uff68\071\uff68\072" +
    "\uff68\073\uff68\074\uff68\075\uff68\077\uff68\102\uff68\103\uff68" +
    "\104\uff68\105\uff68\001\002\000\054\031\uff66\050\uff66\051" +
    "\uff66\055\uff66\056\uff66\057\uff66\060\uff66\061\uff66\064\uff66" +
    "\065\uff66\070\uff66\071\uff66\072\uff66\073\uff66\074\uff66\075" +
    "\uff66\077\uff66\102\uff66\103\uff66\104\uff66\105\uff66\001\002" +
    "\000\036\047\uffe5\050\uffe5\051\uffe5\055\uffe5\061\uffe5\065" +
    "\uffe5\071\uffe5\073\uffe5\075\uffe5\076\uffe5\101\uffe5\103\uffe5" +
    "\104\uffe5\105\uffe5\001\002\000\004\051\067\001\002\000" +
    "\006\030\072\034\071\001\002\000\012\015\040\016\041" +
    "\017\042\020\044\001\002\000\006\030\uffd9\034\uffd9\001" +
    "\002\000\004\051\076\001\002\000\030\050\uffe4\051\uffe4" +
    "\055\uffe4\061\uffe4\065\uffe4\071\uffe4\073\uffe4\075\uffe4\103" +
    "\uffe4\104\uffe4\105\uffe4\001\002\000\030\050\025\051\uffdb" +
    "\055\uffd2\061\026\065\uffcf\071\uffcd\073\uffcb\075\031\103" +
    "\033\104\023\105\015\001\002\000\032\050\025\051\uffdb" +
    "\055\uffd2\061\026\065\uffcf\071\uffcd\073\uffcb\075\031\102" +
    "\075\103\033\104\023\105\015\001\002\000\036\047\uffe3" +
    "\050\uffe3\051\uffe3\055\uffe3\061\uffe3\065\uffe3\071\uffe3\073" +
    "\uffe3\075\uffe3\076\uffe3\101\uffe3\103\uffe3\104\uffe3\105\uffe3" +
    "\001\002\000\012\015\040\016\041\017\042\020\044\001" +
    "\002\000\006\030\uffd8\034\uffd8\001\002\000\004\027\101" +
    "\001\002\000\026\004\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\012\uffec\027\uffec\030\103\051\uffec\001\002" +
    "\000\024\004\114\005\123\006\121\007\120\010\113\011" +
    "\112\012\107\027\115\051\105\001\002\000\004\033\104" +
    "\001\002\000\062\031\uffed\047\uffed\050\uffed\051\uffed\055" +
    "\uffed\056\uffed\057\uffed\060\uffed\061\uffed\064\uffed\065\uffed" +
    "\070\uffed\071\uffed\072\uffed\073\uffed\074\uffed\075\uffed\076" +
    "\uffed\077\uffed\101\uffed\102\uffed\103\uffed\104\uffed\105\uffed" +
    "\001\002\000\142\014\uff86\021\uff86\022\uff86\023\uff86\024" +
    "\uff86\025\uff86\026\uff86\030\uff86\031\uff86\032\uff86\033\uff86" +
    "\034\uff86\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042" +
    "\uff86\043\uff86\044\uff86\045\uff86\047\uff86\050\uff86\051\uff86" +
    "\055\uff86\056\uff86\057\uff86\060\uff86\061\uff86\062\uff86\063" +
    "\uff86\064\uff86\065\uff86\066\uff86\067\uff86\070\uff86\071\uff86" +
    "\072\uff86\073\uff86\074\uff86\075\uff86\076\uff86\077\uff86\101" +
    "\uff86\102\uff86\103\uff86\104\uff86\105\uff86\001\002\000\140" +
    "\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\030" +
    "\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b" +
    "\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045" +
    "\uff8b\047\uff8b\050\uff8b\051\uff8b\055\uff8b\056\uff8b\057\uff8b" +
    "\060\uff8b\061\uff8b\062\uff8b\063\uff8b\064\uff8b\065\uff8b\066" +
    "\uff8b\067\uff8b\070\uff8b\071\uff8b\072\uff8b\073\uff8b\074\uff8b" +
    "\075\uff8b\076\uff8b\077\uff8b\101\uff8b\102\uff8b\103\uff8b\104" +
    "\uff8b\105\uff8b\001\002\000\142\014\uff82\021\uff82\022\uff82" +
    "\023\uff82\024\uff82\025\uff82\026\uff82\030\uff82\031\uff82\032" +
    "\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040\uff82" +
    "\041\uff82\042\uff82\043\uff82\044\uff82\045\uff82\047\uff82\050" +
    "\uff82\051\uff82\055\uff82\056\uff82\057\uff82\060\uff82\061\uff82" +
    "\062\uff82\063\uff82\064\uff82\065\uff82\066\uff82\067\uff82\070" +
    "\uff82\071\uff82\072\uff82\073\uff82\074\uff82\075\uff82\076\uff82" +
    "\077\uff82\101\uff82\102\uff82\103\uff82\104\uff82\105\uff82\001" +
    "\002\000\140\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025\153" +
    "\026\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035" +
    "\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d" +
    "\044\uff8d\045\uff8d\047\uff8d\050\uff8d\051\uff8d\055\uff8d\056" +
    "\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d" +
    "\065\uff8d\066\uff8d\067\uff8d\070\uff8d\071\uff8d\072\uff8d\073" +
    "\uff8d\074\uff8d\075\uff8d\076\uff8d\077\uff8d\101\uff8d\102\uff8d" +
    "\103\uff8d\104\uff8d\105\uff8d\001\002\000\136\021\uff91\022" +
    "\uff91\023\150\024\151\026\147\030\uff91\031\uff91\032\uff91" +
    "\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041" +
    "\uff91\042\uff91\043\uff91\044\uff91\045\uff91\047\uff91\050\uff91" +
    "\051\uff91\055\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062" +
    "\uff91\063\uff91\064\uff91\065\uff91\066\uff91\067\uff91\070\uff91" +
    "\071\uff91\072\uff91\073\uff91\074\uff91\075\uff91\076\uff91\077" +
    "\uff91\101\uff91\102\uff91\103\uff91\104\uff91\105\uff91\001\002" +
    "\000\142\014\uff83\021\uff83\022\uff83\023\uff83\024\uff83\025" +
    "\uff83\026\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83" +
    "\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043" +
    "\uff83\044\uff83\045\uff83\047\uff83\050\uff83\051\uff83\055\uff83" +
    "\056\uff83\057\uff83\060\uff83\061\uff83\062\uff83\063\uff83\064" +
    "\uff83\065\uff83\066\uff83\067\uff83\070\uff83\071\uff83\072\uff83" +
    "\073\uff83\074\uff83\075\uff83\076\uff83\077\uff83\101\uff83\102" +
    "\uff83\103\uff83\104\uff83\105\uff83\001\002\000\142\014\uff81" +
    "\021\uff81\022\uff81\023\uff81\024\uff81\025\uff81\026\uff81\030" +
    "\uff81\031\uff81\032\uff81\033\uff81\034\uff81\035\uff81\036\uff81" +
    "\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81\044\uff81\045" +
    "\uff81\047\uff81\050\uff81\051\uff81\055\uff81\056\uff81\057\uff81" +
    "\060\uff81\061\uff81\062\uff81\063\uff81\064\uff81\065\uff81\066" +
    "\uff81\067\uff81\070\uff81\071\uff81\072\uff81\073\uff81\074\uff81" +
    "\075\uff81\076\uff81\077\uff81\101\uff81\102\uff81\103\uff81\104" +
    "\uff81\105\uff81\001\002\000\142\014\uff85\021\uff85\022\uff85" +
    "\023\uff85\024\uff85\025\uff85\026\uff85\030\uff85\031\uff85\032" +
    "\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037\uff85\040\uff85" +
    "\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\047\uff85\050" +
    "\uff85\051\uff85\055\uff85\056\uff85\057\uff85\060\uff85\061\uff85" +
    "\062\uff85\063\uff85\064\uff85\065\uff85\066\uff85\067\uff85\070" +
    "\uff85\071\uff85\072\uff85\073\uff85\074\uff85\075\uff85\076\uff85" +
    "\077\uff85\101\uff85\102\uff85\103\uff85\104\uff85\105\uff85\001" +
    "\002\000\024\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a" +
    "\011\uff8a\012\uff8a\027\uff8a\051\uff8a\001\002\000\124\030" +
    "\uff80\031\uff80\032\uff80\033\uff80\034\uff80\035\140\036\137" +
    "\037\135\040\134\041\136\042\141\043\uff80\044\uff80\045" +
    "\uff80\047\uff80\050\uff80\051\uff80\055\uff80\056\uff80\057\uff80" +
    "\060\uff80\061\uff80\062\uff80\063\uff80\064\uff80\065\uff80\066" +
    "\uff80\067\uff80\070\uff80\071\uff80\072\uff80\073\uff80\074\uff80" +
    "\075\uff80\076\uff80\077\uff80\101\uff80\102\uff80\103\uff80\104" +
    "\uff80\105\uff80\001\002\000\006\030\163\034\162\001\002" +
    "\000\142\014\uff84\021\uff84\022\uff84\023\uff84\024\uff84\025" +
    "\uff84\026\uff84\030\uff84\031\uff84\032\uff84\033\uff84\034\uff84" +
    "\035\uff84\036\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043" +
    "\uff84\044\uff84\045\uff84\047\uff84\050\uff84\051\uff84\055\uff84" +
    "\056\uff84\057\uff84\060\uff84\061\uff84\062\uff84\063\uff84\064" +
    "\uff84\065\uff84\066\uff84\067\uff84\070\uff84\071\uff84\072\uff84" +
    "\073\uff84\074\uff84\075\uff84\076\uff84\077\uff84\101\uff84\102" +
    "\uff84\103\uff84\104\uff84\105\uff84\001\002\000\142\014\uff87" +
    "\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87\026\uff87\030" +
    "\uff87\031\uff87\032\uff87\033\uff87\034\uff87\035\uff87\036\uff87" +
    "\037\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045" +
    "\uff87\047\uff87\050\uff87\051\uff87\055\uff87\056\uff87\057\uff87" +
    "\060\uff87\061\uff87\062\uff87\063\uff87\064\uff87\065\uff87\066" +
    "\uff87\067\uff87\070\uff87\071\uff87\072\uff87\073\uff87\074\uff87" +
    "\075\uff87\076\uff87\077\uff87\101\uff87\102\uff87\103\uff87\104" +
    "\uff87\105\uff87\001\002\000\130\021\145\022\144\030\uff94" +
    "\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037" +
    "\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94" +
    "\047\uff94\050\uff94\051\uff94\055\uff94\056\uff94\057\uff94\060" +
    "\uff94\061\uff94\062\uff94\063\uff94\064\uff94\065\uff94\066\uff94" +
    "\067\uff94\070\uff94\071\uff94\072\uff94\073\uff94\074\uff94\075" +
    "\uff94\076\uff94\077\uff94\101\uff94\102\uff94\103\uff94\104\uff94" +
    "\105\uff94\001\002\000\142\014\uff88\021\uff88\022\uff88\023" +
    "\uff88\024\uff88\025\uff88\026\uff88\030\uff88\031\uff88\032\uff88" +
    "\033\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040\uff88\041" +
    "\uff88\042\uff88\043\uff88\044\uff88\045\uff88\047\uff88\050\uff88" +
    "\051\uff88\055\uff88\056\uff88\057\uff88\060\uff88\061\uff88\062" +
    "\uff88\063\uff88\064\uff88\065\uff88\066\uff88\067\uff88\070\uff88" +
    "\071\uff88\072\uff88\073\uff88\074\uff88\075\uff88\076\uff88\077" +
    "\uff88\101\uff88\102\uff88\103\uff88\104\uff88\105\uff88\001\002" +
    "\000\014\030\uffd5\034\uffd5\043\127\044\126\045\125\001" +
    "\002\000\024\004\uff72\005\uff72\006\uff72\007\uff72\010\uff72" +
    "\011\uff72\012\uff72\027\uff72\051\uff72\001\002\000\024\004" +
    "\uff73\005\uff73\006\uff73\007\uff73\010\uff73\011\uff73\012\uff73" +
    "\027\uff73\051\uff73\001\002\000\024\004\uff74\005\uff74\006" +
    "\uff74\007\uff74\010\uff74\011\uff74\012\uff74\027\uff74\051\uff74" +
    "\001\002\000\024\004\uff7d\005\uff7d\006\uff7d\007\uff7d\010" +
    "\uff7d\011\uff7d\012\uff7d\027\uff7d\051\uff7d\001\002\000\024" +
    "\004\114\005\123\006\121\007\120\010\113\011\112\012" +
    "\107\027\115\051\105\001\002\000\016\035\140\036\137" +
    "\037\135\040\134\041\136\042\141\001\002\000\024\004" +
    "\uff7c\005\uff7c\006\uff7c\007\uff7c\010\uff7c\011\uff7c\012\uff7c" +
    "\027\uff7c\051\uff7c\001\002\000\024\004\uff77\005\uff77\006" +
    "\uff77\007\uff77\010\uff77\011\uff77\012\uff77\027\uff77\051\uff77" +
    "\001\002\000\024\004\uff78\005\uff78\006\uff78\007\uff78\010" +
    "\uff78\011\uff78\012\uff78\027\uff78\051\uff78\001\002\000\024" +
    "\004\uff76\005\uff76\006\uff76\007\uff76\010\uff76\011\uff76\012" +
    "\uff76\027\uff76\051\uff76\001\002\000\024\004\uff79\005\uff79" +
    "\006\uff79\007\uff79\010\uff79\011\uff79\012\uff79\027\uff79\051" +
    "\uff79\001\002\000\024\004\uff7a\005\uff7a\006\uff7a\007\uff7a" +
    "\010\uff7a\011\uff7a\012\uff7a\027\uff7a\051\uff7a\001\002\000" +
    "\024\004\uff75\005\uff75\006\uff75\007\uff75\010\uff75\011\uff75" +
    "\012\uff75\027\uff75\051\uff75\001\002\000\024\004\114\005" +
    "\123\006\121\007\120\010\113\011\112\012\107\027\115" +
    "\051\105\001\002\000\110\030\uff7b\031\uff7b\032\uff7b\033" +
    "\uff7b\034\uff7b\043\uff7b\044\uff7b\045\uff7b\047\uff7b\050\uff7b" +
    "\051\uff7b\055\uff7b\056\uff7b\057\uff7b\060\uff7b\061\uff7b\062" +
    "\uff7b\063\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b\070\uff7b" +
    "\071\uff7b\072\uff7b\073\uff7b\074\uff7b\075\uff7b\076\uff7b\077" +
    "\uff7b\101\uff7b\102\uff7b\103\uff7b\104\uff7b\105\uff7b\001\002" +
    "\000\024\004\114\005\123\006\121\007\120\010\113\011" +
    "\112\012\107\027\115\051\105\001\002\000\024\004\114" +
    "\005\123\006\121\007\120\010\113\011\112\012\107\027" +
    "\115\051\105\001\002\000\136\021\uff93\022\uff93\023\150" +
    "\024\151\026\147\030\uff93\031\uff93\032\uff93\033\uff93\034" +
    "\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93" +
    "\043\uff93\044\uff93\045\uff93\047\uff93\050\uff93\051\uff93\055" +
    "\uff93\056\uff93\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93" +
    "\064\uff93\065\uff93\066\uff93\067\uff93\070\uff93\071\uff93\072" +
    "\uff93\073\uff93\074\uff93\075\uff93\076\uff93\077\uff93\101\uff93" +
    "\102\uff93\103\uff93\104\uff93\105\uff93\001\002\000\024\004" +
    "\114\005\123\006\121\007\120\010\113\011\112\012\107" +
    "\027\115\051\105\001\002\000\024\004\114\005\123\006" +
    "\121\007\120\010\113\011\112\012\107\027\115\051\105" +
    "\001\002\000\024\004\114\005\123\006\121\007\120\010" +
    "\113\011\112\012\107\027\115\051\105\001\002\000\140" +
    "\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025\153\026\uff8f\030" +
    "\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f" +
    "\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045" +
    "\uff8f\047\uff8f\050\uff8f\051\uff8f\055\uff8f\056\uff8f\057\uff8f" +
    "\060\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065\uff8f\066" +
    "\uff8f\067\uff8f\070\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f" +
    "\075\uff8f\076\uff8f\077\uff8f\101\uff8f\102\uff8f\103\uff8f\104" +
    "\uff8f\105\uff8f\001\002\000\004\013\154\001\002\000\024" +
    "\004\114\005\123\006\121\007\120\010\113\011\112\012" +
    "\107\027\115\051\105\001\002\000\004\014\156\001\002" +
    "\000\140\021\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026" +
    "\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c" +
    "\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044" +
    "\uff8c\045\uff8c\047\uff8c\050\uff8c\051\uff8c\055\uff8c\056\uff8c" +
    "\057\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\065" +
    "\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c" +
    "\074\uff8c\075\uff8c\076\uff8c\077\uff8c\101\uff8c\102\uff8c\103" +
    "\uff8c\104\uff8c\105\uff8c\001\002\000\140\021\uff90\022\uff90" +
    "\023\uff90\024\uff90\025\153\026\uff90\030\uff90\031\uff90\032" +
    "\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90" +
    "\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\047\uff90\050" +
    "\uff90\051\uff90\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90" +
    "\062\uff90\063\uff90\064\uff90\065\uff90\066\uff90\067\uff90\070" +
    "\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075\uff90\076\uff90" +
    "\077\uff90\101\uff90\102\uff90\103\uff90\104\uff90\105\uff90\001" +
    "\002\000\140\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025\153" +
    "\026\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035" +
    "\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e" +
    "\044\uff8e\045\uff8e\047\uff8e\050\uff8e\051\uff8e\055\uff8e\056" +
    "\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e" +
    "\065\uff8e\066\uff8e\067\uff8e\070\uff8e\071\uff8e\072\uff8e\073" +
    "\uff8e\074\uff8e\075\uff8e\076\uff8e\077\uff8e\101\uff8e\102\uff8e" +
    "\103\uff8e\104\uff8e\105\uff8e\001\002\000\136\021\uff92\022" +
    "\uff92\023\150\024\151\026\147\030\uff92\031\uff92\032\uff92" +
    "\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041" +
    "\uff92\042\uff92\043\uff92\044\uff92\045\uff92\047\uff92\050\uff92" +
    "\051\uff92\055\uff92\056\uff92\057\uff92\060\uff92\061\uff92\062" +
    "\uff92\063\uff92\064\uff92\065\uff92\066\uff92\067\uff92\070\uff92" +
    "\071\uff92\072\uff92\073\uff92\074\uff92\075\uff92\076\uff92\077" +
    "\uff92\101\uff92\102\uff92\103\uff92\104\uff92\105\uff92\001\002" +
    "\000\024\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011" +
    "\uffd4\012\uffd4\027\uffd4\051\uffd4\001\002\000\004\033\164" +
    "\001\002\000\062\031\uffeb\047\uffeb\050\uffeb\051\uffeb\055" +
    "\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\064\uffeb\065\uffeb" +
    "\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\075\uffeb\076" +
    "\uffeb\077\uffeb\101\uffeb\102\uffeb\103\uffeb\104\uffeb\105\uffeb" +
    "\001\002\000\024\004\114\005\123\006\121\007\120\010" +
    "\113\011\112\012\107\027\115\051\105\001\002\000\014" +
    "\030\uffd3\034\uffd3\043\127\044\126\045\125\001\002\000" +
    "\024\004\uff7f\005\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f" +
    "\012\uff7f\027\uff7f\051\uff7f\001\002\000\024\004\114\005" +
    "\123\006\121\007\120\010\113\011\112\012\107\027\115" +
    "\051\105\001\002\000\110\030\uff7e\031\uff7e\032\uff7e\033" +
    "\uff7e\034\uff7e\043\uff7e\044\uff7e\045\uff7e\047\uff7e\050\uff7e" +
    "\051\uff7e\055\uff7e\056\uff7e\057\uff7e\060\uff7e\061\uff7e\062" +
    "\uff7e\063\uff7e\064\uff7e\065\uff7e\066\uff7e\067\uff7e\070\uff7e" +
    "\071\uff7e\072\uff7e\073\uff7e\074\uff7e\075\uff7e\076\uff7e\077" +
    "\uff7e\101\uff7e\102\uff7e\103\uff7e\104\uff7e\105\uff7e\001\002" +
    "\000\024\004\114\005\123\006\121\007\120\010\113\011" +
    "\112\012\107\027\115\051\105\001\002\000\004\030\174" +
    "\001\002\000\142\014\uff89\021\uff89\022\uff89\023\uff89\024" +
    "\uff89\025\uff89\026\uff89\030\uff89\031\uff89\032\uff89\033\uff89" +
    "\034\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042" +
    "\uff89\043\uff89\044\uff89\045\uff89\047\uff89\050\uff89\051\uff89" +
    "\055\uff89\056\uff89\057\uff89\060\uff89\061\uff89\062\uff89\063" +
    "\uff89\064\uff89\065\uff89\066\uff89\067\uff89\070\uff89\071\uff89" +
    "\072\uff89\073\uff89\074\uff89\075\uff89\076\uff89\077\uff89\101" +
    "\uff89\102\uff89\103\uff89\104\uff89\105\uff89\001\002\000\024" +
    "\004\114\005\123\006\121\007\120\010\113\011\112\012" +
    "\107\027\115\051\105\001\002\000\012\033\177\043\127" +
    "\044\126\045\125\001\002\000\062\031\uff9d\047\uff9d\050" +
    "\uff9d\051\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d" +
    "\064\uff9d\065\uff9d\070\uff9d\071\uff9d\072\uff9d\073\uff9d\074" +
    "\uff9d\075\uff9d\076\uff9d\077\uff9d\101\uff9d\102\uff9d\103\uff9d" +
    "\104\uff9d\105\uff9d\001\002\000\012\043\127\044\126\045" +
    "\125\062\201\001\002\000\004\031\uff9c\001\002\000\004" +
    "\031\203\001\002\000\024\004\114\005\123\006\121\007" +
    "\120\010\113\011\112\012\107\027\115\051\105\001\002" +
    "\000\010\031\205\056\207\064\206\001\002\000\024\004" +
    "\114\005\123\006\121\007\120\010\113\011\112\012\107" +
    "\027\115\051\105\001\002\000\062\031\uff9b\047\uff9b\050" +
    "\uff9b\051\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b" +
    "\064\uff9b\065\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b\074" +
    "\uff9b\075\uff9b\076\uff9b\077\uff9b\101\uff9b\102\uff9b\103\uff9b" +
    "\104\uff9b\105\uff9b\001\002\000\004\063\210\001\002\000" +
    "\030\050\uff98\051\uff98\055\uff98\061\uff98\065\uff98\071\uff98" +
    "\073\uff98\075\uff98\103\uff98\104\uff98\105\uff98\001\002\000" +
    "\030\050\025\051\uffdb\055\uffd2\061\026\065\uffcf\071\uffcd" +
    "\073\uffcb\075\031\103\033\104\023\105\015\001\002\000" +
    "\036\031\uff97\050\025\051\uffdb\055\uffd2\056\uff97\061\026" +
    "\064\uff97\065\uffcf\071\uffcd\073\uffcb\075\031\103\033\104" +
    "\023\105\015\001\002\000\012\032\214\043\127\044\126" +
    "\045\125\001\002\000\004\063\215\001\002\000\030\050" +
    "\uff96\051\uff96\055\uff96\061\uff96\065\uff96\071\uff96\073\uff96" +
    "\075\uff96\103\uff96\104\uff96\105\uff96\001\002\000\030\050" +
    "\025\051\uffdb\055\uffd2\061\026\065\uffcf\071\uffcd\073\uffcb" +
    "\075\031\103\033\104\023\105\015\001\002\000\036\031" +
    "\uff95\050\025\051\uffdb\055\uffd2\056\uff95\061\026\064\uff95" +
    "\065\uffcf\071\uffcd\073\uffcb\075\031\103\033\104\023\105" +
    "\015\001\002\000\012\032\221\043\127\044\126\045\125" +
    "\001\002\000\004\063\222\001\002\000\030\050\uff9a\051" +
    "\uff9a\055\uff9a\061\uff9a\065\uff9a\071\uff9a\073\uff9a\075\uff9a" +
    "\103\uff9a\104\uff9a\105\uff9a\001\002\000\030\050\025\051" +
    "\uffdb\055\uffd2\061\026\065\uffcf\071\uffcd\073\uffcb\075\031" +
    "\103\033\104\023\105\015\001\002\000\036\031\uff99\050" +
    "\025\051\uffdb\055\uffd2\056\uff99\061\026\064\uff99\065\uffcf" +
    "\071\uffcd\073\uffcb\075\031\103\033\104\023\105\015\001" +
    "\002\000\004\051\227\001\002\000\006\034\231\052\230" +
    "\001\002\000\010\034\uffd7\052\uffd7\054\uffd7\001\002\000" +
    "\012\015\040\016\041\017\042\020\044\001\002\000\004" +
    "\051\232\001\002\000\010\034\uffd6\052\uffd6\054\uffd6\001" +
    "\002\000\004\053\uffdd\001\002\000\004\053\235\001\002" +
    "\000\024\004\114\005\123\006\121\007\120\010\113\011" +
    "\112\012\107\027\115\051\105\001\002\000\012\033\237" +
    "\043\127\044\126\045\125\001\002\000\062\031\uffdc\047" +
    "\uffdc\050\uffdc\051\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc" +
    "\061\uffdc\064\uffdc\065\uffdc\070\uffdc\071\uffdc\072\uffdc\073" +
    "\uffdc\074\uffdc\075\uffdc\076\uffdc\077\uffdc\101\uffdc\102\uffdc" +
    "\103\uffdc\104\uffdc\105\uffdc\001\002\000\024\004\114\005" +
    "\123\006\121\007\120\010\113\011\112\012\107\027\115" +
    "\051\105\001\002\000\012\033\242\043\127\044\126\045" +
    "\125\001\002\000\062\031\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\064\uffe1\065" +
    "\uffe1\070\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1" +
    "\076\uffe1\077\uffe1\101\uffe1\102\uffe1\103\uffe1\104\uffe1\105" +
    "\uffe1\001\002\000\006\034\231\054\244\001\002\000\024" +
    "\004\114\005\123\006\121\007\120\010\113\011\112\012" +
    "\107\027\115\051\105\001\002\000\012\033\246\043\127" +
    "\044\126\045\125\001\002\000\062\031\uffda\047\uffda\050" +
    "\uffda\051\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda" +
    "\064\uffda\065\uffda\070\uffda\071\uffda\072\uffda\073\uffda\074" +
    "\uffda\075\uffda\076\uffda\077\uffda\101\uffda\102\uffda\103\uffda" +
    "\104\uffda\105\uffda\001\002\000\024\004\uffc9\005\uffc9\006" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\027\uffc9\051\uffc9" +
    "\001\002\000\062\031\uffd1\047\uffd1\050\uffd1\051\uffd1\055" +
    "\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\064\uffd1\065\uffd1" +
    "\070\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1\076" +
    "\uffd1\077\uffd1\101\uffd1\102\uffd1\103\uffd1\104\uffd1\105\uffd1" +
    "\001\002\000\024\004\114\005\123\006\121\007\120\010" +
    "\113\011\112\012\107\027\115\051\105\001\002\000\012" +
    "\043\127\044\126\045\125\063\uffc8\001\002\000\004\063" +
    "\uffc6\001\002\000\004\063\256\001\002\000\062\031\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\055\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\064\uffc7\065\uffc7\070\uffc7\071\uffc7\072\uffc7" +
    "\073\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7\101\uffc7\102" +
    "\uffc7\103\uffc7\104\uffc7\105\uffc7\001\002\000\030\050\025" +
    "\051\uffdb\055\uffd2\061\026\065\uffcf\071\uffcd\073\uffcb\075" +
    "\031\103\033\104\023\105\015\001\002\000\036\050\025" +
    "\051\uffdb\055\uffd2\056\uffc5\057\uffc5\060\uffc5\061\026\065" +
    "\uffcf\071\uffcd\073\uffcb\075\031\103\033\104\023\105\015" +
    "\001\002\000\010\056\262\057\263\060\uffc0\001\002\000" +
    "\004\060\271\001\002\000\030\050\uffc2\051\uffc2\055\uffc2" +
    "\061\uffc2\065\uffc2\071\uffc2\073\uffc2\075\uffc2\103\uffc2\104" +
    "\uffc2\105\uffc2\001\002\000\062\031\uffc3\047\uffc3\050\uffc3" +
    "\051\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\064" +
    "\uffc3\065\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3" +
    "\075\uffc3\076\uffc3\077\uffc3\101\uffc3\102\uffc3\103\uffc3\104" +
    "\uffc3\105\uffc3\001\002\000\062\031\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\064" +
    "\uffc4\065\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4" +
    "\075\uffc4\076\uffc4\077\uffc4\101\uffc4\102\uffc4\103\uffc4\104" +
    "\uffc4\105\uffc4\001\002\000\030\050\025\051\uffdb\055\uffd2" +
    "\061\026\065\uffcf\071\uffcd\073\uffcb\075\031\103\033\104" +
    "\023\105\015\001\002\000\032\050\025\051\uffdb\055\uffd2" +
    "\057\267\061\026\065\uffcf\071\uffcd\073\uffcb\075\031\103" +
    "\033\104\023\105\015\001\002\000\062\031\uffc1\047\uffc1" +
    "\050\uffc1\051\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061" +
    "\uffc1\064\uffc1\065\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1" +
    "\074\uffc1\075\uffc1\076\uffc1\077\uffc1\101\uffc1\102\uffc1\103" +
    "\uffc1\104\uffc1\105\uffc1\001\002\000\010\056\277\057\300" +
    "\060\301\001\002\000\024\004\uffbe\005\uffbe\006\uffbe\007" +
    "\uffbe\010\uffbe\011\uffbe\012\uffbe\027\uffbe\051\uffbe\001\002" +
    "\000\024\004\114\005\123\006\121\007\120\010\113\011" +
    "\112\012\107\027\115\051\105\001\002\000\012\043\127" +
    "\044\126\045\125\063\274\001\002\000\030\050\uffbd\051" +
    "\uffbd\055\uffbd\061\uffbd\065\uffbd\071\uffbd\073\uffbd\075\uffbd" +
    "\103\uffbd\104\uffbd\105\uffbd\001\002\000\030\050\025\051" +
    "\uffdb\055\uffd2\061\026\065\uffcf\071\uffcd\073\uffcb\075\031" +
    "\103\033\104\023\105\015\001\002\000\036\050\025\051" +
    "\uffdb\055\uffd2\056\uffbc\057\uffbc\060\uffbc\061\026\065\uffcf" +
    "\071\uffcd\073\uffcb\075\031\103\033\104\023\105\015\001" +
    "\002\000\030\050\uffb8\051\uffb8\055\uffb8\061\uffb8\065\uffb8" +
    "\071\uffb8\073\uffb8\075\uffb8\103\uffb8\104\uffb8\105\uffb8\001" +
    "\002\000\062\031\uffbf\047\uffbf\050\uffbf\051\uffbf\055\uffbf" +
    "\056\uffbf\057\uffbf\060\uffbf\061\uffbf\064\uffbf\065\uffbf\070" +
    "\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf" +
    "\077\uffbf\101\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf\001" +
    "\002\000\024\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb" +
    "\011\uffbb\012\uffbb\027\uffbb\051\uffbb\001\002\000\024\004" +
    "\114\005\123\006\121\007\120\010\113\011\112\012\107" +
    "\027\115\051\105\001\002\000\012\043\127\044\126\045" +
    "\125\063\304\001\002\000\030\050\uffba\051\uffba\055\uffba" +
    "\061\uffba\065\uffba\071\uffba\073\uffba\075\uffba\103\uffba\104" +
    "\uffba\105\uffba\001\002\000\030\050\025\051\uffdb\055\uffd2" +
    "\061\026\065\uffcf\071\uffcd\073\uffcb\075\031\103\033\104" +
    "\023\105\015\001\002\000\036\050\025\051\uffdb\055\uffd2" +
    "\056\uffb9\057\uffb9\060\uffb9\061\026\065\uffcf\071\uffcd\073" +
    "\uffcb\075\031\103\033\104\023\105\015\001\002\000\030" +
    "\050\025\051\uffdb\055\uffd2\061\026\065\uffcf\071\uffcd\073" +
    "\uffcb\075\031\103\033\104\023\105\015\001\002\000\036" +
    "\050\025\051\uffdb\055\uffd2\056\uffb7\057\uffb7\060\uffb7\061" +
    "\026\065\uffcf\071\uffcd\073\uffcb\075\031\103\033\104\023" +
    "\105\015\001\002\000\004\051\313\001\002\000\062\031" +
    "\uffce\047\uffce\050\uffce\051\uffce\055\uffce\056\uffce\057\uffce" +
    "\060\uffce\061\uffce\064\uffce\065\uffce\070\uffce\071\uffce\072" +
    "\uffce\073\uffce\074\uffce\075\uffce\076\uffce\077\uffce\101\uffce" +
    "\102\uffce\103\uffce\104\uffce\105\uffce\001\002\000\004\054" +
    "\314\001\002\000\024\004\uffb6\005\uffb6\006\uffb6\007\uffb6" +
    "\010\uffb6\011\uffb6\012\uffb6\027\uffb6\051\uffb6\001\002\000" +
    "\024\004\114\005\123\006\121\007\120\010\113\011\112" +
    "\012\107\027\115\051\105\001\002\000\012\043\127\044" +
    "\126\045\125\066\uffb5\001\002\000\004\066\320\001\002" +
    "\000\024\004\114\005\123\006\121\007\120\010\113\011" +
    "\112\012\107\027\115\051\105\001\002\000\014\043\127" +
    "\044\126\045\125\062\uffb4\067\uffb4\001\002\000\006\062" +
    "\323\067\324\001\002\000\032\050\uffb2\051\uffb2\055\uffb2" +
    "\061\uffb2\065\uffb2\070\337\071\uffb2\073\uffb2\075\uffb2\103" +
    "\uffb2\104\uffb2\105\uffb2\001\002\000\024\004\uffaf\005\uffaf" +
    "\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\027\uffaf\051" +
    "\uffaf\001\002\000\062\031\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\064\uffb3\065" +
    "\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3" +
    "\076\uffb3\077\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\105" +
    "\uffb3\001\002\000\024\004\114\005\123\006\121\007\120" +
    "\010\113\011\112\012\107\027\115\051\105\001\002\000" +
    "\012\043\127\044\126\045\125\062\330\001\002\000\032" +
    "\050\uffad\051\uffad\055\uffad\061\uffad\065\uffad\070\333\071" +
    "\uffad\073\uffad\075\uffad\103\uffad\104\uffad\105\uffad\001\002" +
    "\000\030\050\025\051\uffdb\055\uffd2\061\026\065\uffcf\071" +
    "\uffcd\073\uffcb\075\031\103\033\104\023\105\015\001\002" +
    "\000\062\031\uffae\047\uffae\050\uffae\051\uffae\055\uffae\056" +
    "\uffae\057\uffae\060\uffae\061\uffae\064\uffae\065\uffae\070\uffae" +
    "\071\uffae\072\uffae\073\uffae\074\uffae\075\uffae\076\uffae\077" +
    "\uffae\101\uffae\102\uffae\103\uffae\104\uffae\105\uffae\001\002" +
    "\000\062\031\uffab\047\uffab\050\uffab\051\uffab\055\uffab\056" +
    "\uffab\057\uffab\060\uffab\061\uffab\064\uffab\065\uffab\070\uffab" +
    "\071\uffab\072\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077" +
    "\uffab\101\uffab\102\uffab\103\uffab\104\uffab\105\uffab\001\002" +
    "\000\032\050\025\051\uffdb\055\uffd2\061\026\065\uffcf\070" +
    "\335\071\uffcd\073\uffcb\075\031\103\033\104\023\105\015" +
    "\001\002\000\062\031\uffac\047\uffac\050\uffac\051\uffac\055" +
    "\uffac\056\uffac\057\uffac\060\uffac\061\uffac\064\uffac\065\uffac" +
    "\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075\uffac\076" +
    "\uffac\077\uffac\101\uffac\102\uffac\103\uffac\104\uffac\105\uffac" +
    "\001\002\000\030\050\025\051\uffdb\055\uffd2\061\026\065" +
    "\uffcf\071\uffcd\073\uffcb\075\031\103\033\104\023\105\015" +
    "\001\002\000\062\031\uffb0\047\uffb0\050\uffb0\051\uffb0\055" +
    "\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\064\uffb0\065\uffb0" +
    "\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076" +
    "\uffb0\077\uffb0\101\uffb0\102\uffb0\103\uffb0\104\uffb0\105\uffb0" +
    "\001\002\000\032\050\025\051\uffdb\055\uffd2\061\026\065" +
    "\uffcf\070\341\071\uffcd\073\uffcb\075\031\103\033\104\023" +
    "\105\015\001\002\000\062\031\uffb1\047\uffb1\050\uffb1\051" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\064\uffb1" +
    "\065\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075" +
    "\uffb1\076\uffb1\077\uffb1\101\uffb1\102\uffb1\103\uffb1\104\uffb1" +
    "\105\uffb1\001\002\000\036\047\uffef\050\uffef\051\uffef\055" +
    "\uffef\061\uffef\065\uffef\071\uffef\073\uffef\075\uffef\076\uffef" +
    "\101\uffef\103\uffef\104\uffef\105\uffef\001\002\000\036\047" +
    "\ufff4\050\ufff4\051\ufff4\055\ufff4\061\ufff4\065\ufff4\071\ufff4" +
    "\073\ufff4\075\ufff4\076\ufff4\101\ufff4\103\ufff4\104\ufff4\105" +
    "\ufff4\001\002\000\036\047\ufff2\050\ufff2\051\ufff2\055\ufff2" +
    "\061\ufff2\065\ufff2\071\ufff2\073\ufff2\075\ufff2\076\ufff2\101" +
    "\ufff2\103\ufff2\104\ufff2\105\ufff2\001\002\000\036\047\ufff1" +
    "\050\ufff1\051\ufff1\055\ufff1\061\ufff1\065\ufff1\071\ufff1\073" +
    "\ufff1\075\ufff1\076\ufff1\101\ufff1\103\ufff1\104\ufff1\105\ufff1" +
    "\001\002\000\036\047\ufff3\050\ufff3\051\ufff3\055\ufff3\061" +
    "\ufff3\065\ufff3\071\ufff3\073\ufff3\075\ufff3\076\ufff3\101\ufff3" +
    "\103\ufff3\104\ufff3\105\ufff3\001\002\000\036\047\ufff5\050" +
    "\ufff5\051\ufff5\055\ufff5\061\ufff5\065\ufff5\071\ufff5\073\ufff5" +
    "\075\ufff5\076\ufff5\101\ufff5\103\ufff5\104\ufff5\105\ufff5\001" +
    "\002\000\004\002\uffff\001\002\000\036\047\uffee\050\uffee" +
    "\051\uffee\055\uffee\061\uffee\065\uffee\071\uffee\073\uffee\075" +
    "\uffee\076\uffee\101\uffee\103\uffee\104\uffee\105\uffee\001\002" +
    "\000\036\047\ufff0\050\ufff0\051\ufff0\055\ufff0\061\ufff0\065" +
    "\ufff0\071\ufff0\073\ufff0\075\ufff0\076\ufff0\101\ufff0\103\ufff0" +
    "\104\ufff0\105\ufff0\001\002\000\024\004\114\005\123\006" +
    "\121\007\120\010\113\011\112\012\107\027\115\051\105" +
    "\001\002\000\012\033\355\043\127\044\126\045\125\001" +
    "\002\000\062\031\uffdf\047\uffdf\050\uffdf\051\uffdf\055\uffdf" +
    "\056\uffdf\057\uffdf\060\uffdf\061\uffdf\064\uffdf\065\uffdf\070" +
    "\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf" +
    "\077\uffdf\101\uffdf\102\uffdf\103\uffdf\104\uffdf\105\uffdf\001" +
    "\002\000\004\071\360\001\002\000\062\031\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061" +
    "\uffcc\064\uffcc\065\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc" +
    "\074\uffcc\075\uffcc\076\uffcc\077\uffcc\101\uffcc\102\uffcc\103" +
    "\uffcc\104\uffcc\105\uffcc\001\002\000\024\004\114\005\123" +
    "\006\121\007\120\010\113\011\112\012\107\027\115\051" +
    "\105\001\002\000\012\043\127\044\126\045\125\062\362" +
    "\001\002\000\032\050\uffa9\051\uffa9\055\uffa9\061\uffa9\065" +
    "\uffa9\071\uffa9\072\uffa9\073\uffa9\075\uffa9\103\uffa9\104\uffa9" +
    "\105\uffa9\001\002\000\032\050\uffa7\051\uffa7\055\uffa7\061" +
    "\uffa7\065\uffa7\071\uffa7\072\uffa5\073\uffa7\075\uffa7\103\uffa7" +
    "\104\uffa7\105\uffa7\001\002\000\062\031\uffa8\047\uffa8\050" +
    "\uffa8\051\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8" +
    "\064\uffa8\065\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\074" +
    "\uffa8\075\uffa8\076\uffa8\077\uffa8\101\uffa8\102\uffa8\103\uffa8" +
    "\104\uffa8\105\uffa8\001\002\000\004\072\371\001\002\000" +
    "\030\050\025\051\uffdb\055\uffd2\061\026\065\uffcf\071\uffcd" +
    "\073\uffcb\075\031\103\033\104\023\105\015\001\002\000" +
    "\032\050\025\051\uffdb\055\uffd2\061\026\065\uffcf\071\uffcd" +
    "\072\370\073\uffcb\075\031\103\033\104\023\105\015\001" +
    "\002\000\062\031\uffa6\047\uffa6\050\uffa6\051\uffa6\055\uffa6" +
    "\056\uffa6\057\uffa6\060\uffa6\061\uffa6\064\uffa6\065\uffa6\070" +
    "\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6" +
    "\077\uffa6\101\uffa6\102\uffa6\103\uffa6\104\uffa6\105\uffa6\001" +
    "\002\000\062\031\uffa4\047\uffa4\050\uffa4\051\uffa4\055\uffa4" +
    "\056\uffa4\057\uffa4\060\uffa4\061\uffa4\064\uffa4\065\uffa4\070" +
    "\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076\uffa4" +
    "\077\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4\001" +
    "\002\000\032\050\uffa3\051\uffa3\055\uffa3\061\uffa3\065\uffa3" +
    "\071\uffa3\073\uffa3\074\374\075\uffa3\103\uffa3\104\uffa3\105" +
    "\uffa3\001\002\000\062\031\uffca\047\uffca\050\uffca\051\uffca" +
    "\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\064\uffca\065" +
    "\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075\uffca" +
    "\076\uffca\077\uffca\101\uffca\102\uffca\103\uffca\104\uffca\105" +
    "\uffca\001\002\000\024\004\uffa0\005\uffa0\006\uffa0\007\uffa0" +
    "\010\uffa0\011\uffa0\012\uffa0\027\uffa0\051\uffa0\001\002\000" +
    "\030\050\025\051\uffdb\055\uffd2\061\026\065\uffcf\071\uffcd" +
    "\073\uffcb\075\031\103\033\104\023\105\015\001\002\000" +
    "\032\050\025\051\uffdb\055\uffd2\061\026\065\uffcf\071\uffcd" +
    "\073\uffcb\074\377\075\031\103\033\104\023\105\015\001" +
    "\002\000\024\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2" +
    "\011\uffa2\012\uffa2\027\uffa2\051\uffa2\001\002\000\024\004" +
    "\114\005\123\006\121\007\120\010\113\011\112\012\107" +
    "\027\115\051\105\001\002\000\070\031\uffa1\043\127\044" +
    "\126\045\125\047\uffa1\050\uffa1\051\uffa1\055\uffa1\056\uffa1" +
    "\057\uffa1\060\uffa1\061\uffa1\064\uffa1\065\uffa1\070\uffa1\071" +
    "\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1" +
    "\101\uffa1\102\uffa1\103\uffa1\104\uffa1\105\uffa1\001\002\000" +
    "\024\004\114\005\123\006\121\007\120\010\113\011\112" +
    "\012\107\027\115\051\105\001\002\000\070\031\uff9f\043" +
    "\127\044\126\045\125\047\uff9f\050\uff9f\051\uff9f\055\uff9f" +
    "\056\uff9f\057\uff9f\060\uff9f\061\uff9f\064\uff9f\065\uff9f\070" +
    "\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f" +
    "\077\uff9f\101\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f\001" +
    "\002\000\032\050\uffea\051\uffea\055\uffea\061\uffea\065\uffea" +
    "\071\uffea\073\uffea\075\uffea\100\u0106\103\uffea\104\uffea\105" +
    "\uffea\001\002\000\030\050\025\051\uffdb\055\uffd2\061\026" +
    "\065\uffcf\071\uffcd\073\uffcb\075\031\103\033\104\023\105" +
    "\015\001\002\000\004\027\u0107\001\002\000\004\051\067" +
    "\001\002\000\006\030\u0109\034\071\001\002\000\030\050" +
    "\uffe8\051\uffe8\055\uffe8\061\uffe8\065\uffe8\071\uffe8\073\uffe8" +
    "\075\uffe8\103\uffe8\104\uffe8\105\uffe8\001\002\000\030\050" +
    "\025\051\uffdb\055\uffd2\061\026\065\uffcf\071\uffcd\073\uffcb" +
    "\075\031\103\033\104\023\105\015\001\002\000\032\050" +
    "\025\051\uffdb\055\uffd2\061\026\065\uffcf\071\uffcd\073\uffcb" +
    "\075\031\077\u010c\103\033\104\023\105\015\001\002\000" +
    "\036\047\uffe7\050\uffe7\051\uffe7\055\uffe7\061\uffe7\065\uffe7" +
    "\071\uffe7\073\uffe7\075\uffe7\076\uffe7\101\uffe7\103\uffe7\104" +
    "\uffe7\105\uffe7\001\002\000\032\050\025\051\uffdb\055\uffd2" +
    "\061\026\065\uffcf\071\uffcd\073\uffcb\075\031\077\u010e\103" +
    "\033\104\023\105\015\001\002\000\036\047\uffe9\050\uffe9" +
    "\051\uffe9\055\uffe9\061\uffe9\065\uffe9\071\uffe9\073\uffe9\075" +
    "\uffe9\076\uffe9\101\uffe9\103\uffe9\104\uffe9\105\uffe9\001\002" +
    "\000\004\002\001\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\006\001\001\000\040\002\015" +
    "\004\027\005\021\011\031\016\007\024\023\025\033\026" +
    "\026\030\035\031\011\057\020\061\017\062\016\063\013" +
    "\064\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\372\001\001\000\006\022\356" +
    "\106\355\001\001\000\004\054\352\001\001\000\036\004" +
    "\345\005\342\011\346\016\007\024\343\025\350\026\344" +
    "\030\351\031\341\057\020\061\017\062\016\063\013\064" +
    "\012\001\001\000\004\020\311\001\001\000\004\012\247" +
    "\001\001\000\004\010\242\001\001\000\002\001\001\000" +
    "\004\053\237\001\001\000\002\001\001\000\004\055\224" +
    "\001\001\000\016\006\121\013\177\036\110\037\107\040" +
    "\105\041\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\115\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\052\005\047\011" +
    "\053\014\050\016\007\024\051\025\054\031\046\057\020" +
    "\061\017\062\016\063\013\064\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\004\060\005\056\011\061" +
    "\016\007\024\057\025\062\031\055\057\020\061\017\062" +
    "\016\063\013\064\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\065\001\001\000\002\001\001\000\004\007\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\072\001\001\000\034\004\052\005\047\011\053\014\073" +
    "\016\007\024\051\025\054\031\046\057\020\061\017\062" +
    "\016\063\013\064\012\001\001\000\032\004\060\005\056" +
    "\011\061\016\007\024\057\025\062\031\055\057\020\061" +
    "\017\062\016\063\013\064\012\001\001\000\002\001\001" +
    "\000\004\007\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\101\001\001\000\020\006\121\013\123" +
    "\034\116\036\110\037\107\040\105\041\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\122\171\001\001\000\004\032\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\124\130\001\001\000\014\006\121\036\110\037\107\040" +
    "\105\041\131\001\001\000\004\032\132\001\001\000\004" +
    "\125\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\006\121\036\110\037\107\040\105\041" +
    "\142\001\001\000\002\001\001\000\010\036\160\037\107" +
    "\040\105\001\001\000\010\036\145\037\107\040\105\001" +
    "\001\000\002\001\001\000\006\037\157\040\105\001\001" +
    "\000\006\037\156\040\105\001\001\000\006\037\151\040" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\121\013\165\036\110\037\107\040\105\041\115" +
    "\001\001\000\004\033\127\001\001\000\004\123\167\001" +
    "\001\000\014\006\121\036\110\037\107\040\105\041\170" +
    "\001\001\000\002\001\001\000\014\006\121\036\110\037" +
    "\107\040\105\041\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\121\013\175\036\110\037\107\040" +
    "\105\041\115\001\001\000\004\033\127\001\001\000\002" +
    "\001\001\000\004\033\127\001\001\000\004\116\201\001" +
    "\001\000\004\017\203\001\001\000\016\006\121\013\217" +
    "\036\110\037\107\040\105\041\115\001\001\000\002\001" +
    "\001\000\016\006\121\013\212\036\110\037\107\040\105" +
    "\041\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\120\210\001\001\000\034\004\052\005\047\011\053" +
    "\014\211\016\007\024\051\025\054\031\046\057\020\061" +
    "\017\062\016\063\013\064\012\001\001\000\032\004\060" +
    "\005\056\011\061\016\007\024\057\025\062\031\055\057" +
    "\020\061\017\062\016\063\013\064\012\001\001\000\004" +
    "\033\127\001\001\000\002\001\001\000\004\121\215\001" +
    "\001\000\034\004\052\005\047\011\053\014\216\016\007" +
    "\024\051\025\054\031\046\057\020\061\017\062\016\063" +
    "\013\064\012\001\001\000\032\004\060\005\056\011\061" +
    "\016\007\024\057\025\062\031\055\057\020\061\017\062" +
    "\016\063\013\064\012\001\001\000\004\033\127\001\001" +
    "\000\002\001\001\000\004\117\222\001\001\000\034\004" +
    "\052\005\047\011\053\014\223\016\007\024\051\025\054" +
    "\031\046\057\020\061\017\062\016\063\013\064\012\001" +
    "\001\000\032\004\060\005\056\011\061\016\007\024\057" +
    "\025\062\031\055\057\020\061\017\062\016\063\013\064" +
    "\012\001\001\000\004\010\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\233\001\001\000\002" +
    "\001\001\000\016\006\121\013\235\036\110\037\107\040" +
    "\105\041\115\001\001\000\004\033\127\001\001\000\002" +
    "\001\001\000\016\006\121\013\240\036\110\037\107\040" +
    "\105\041\115\001\001\000\004\033\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\121\013\244\036" +
    "\110\037\107\040\105\041\115\001\001\000\004\033\127" +
    "\001\001\000\002\001\001\000\004\065\250\001\001\000" +
    "\002\001\001\000\016\006\121\013\251\036\110\037\107" +
    "\040\105\041\115\001\001\000\006\033\127\066\252\001" +
    "\001\000\006\035\254\067\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\004\052\005\047\011\053\014" +
    "\256\016\007\024\051\025\054\031\046\057\020\061\017" +
    "\062\016\063\013\064\012\001\001\000\034\004\060\005" +
    "\056\011\061\016\007\024\057\025\062\031\055\057\020" +
    "\061\017\062\016\063\013\064\012\070\257\001\001\000" +
    "\006\042\263\072\260\001\001\000\004\015\267\001\001" +
    "\000\004\071\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\004\052\005\047\011\053\014\265\016\007" +
    "\024\051\025\054\031\046\057\020\061\017\062\016\063" +
    "\013\064\012\001\001\000\032\004\060\005\056\011\061" +
    "\016\007\024\057\025\062\031\055\057\020\061\017\062" +
    "\016\063\013\064\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\073\271\001\001\000\016\006\121\013" +
    "\272\036\110\037\107\040\105\041\115\001\001\000\004" +
    "\033\127\001\001\000\004\074\274\001\001\000\034\004" +
    "\052\005\047\011\053\014\275\016\007\024\051\025\054" +
    "\031\046\057\020\061\017\062\016\063\013\064\012\001" +
    "\001\000\032\004\060\005\056\011\061\016\007\024\057" +
    "\025\062\031\055\057\020\061\017\062\016\063\013\064" +
    "\012\001\001\000\004\077\306\001\001\000\002\001\001" +
    "\000\004\075\301\001\001\000\016\006\121\013\302\036" +
    "\110\037\107\040\105\041\115\001\001\000\004\033\127" +
    "\001\001\000\004\076\304\001\001\000\034\004\052\005" +
    "\047\011\053\014\305\016\007\024\051\025\054\031\046" +
    "\057\020\061\017\062\016\063\013\064\012\001\001\000" +
    "\032\004\060\005\056\011\061\016\007\024\057\025\062" +
    "\031\055\057\020\061\017\062\016\063\013\064\012\001" +
    "\001\000\034\004\052\005\047\011\053\014\307\016\007" +
    "\024\051\025\054\031\046\057\020\061\017\062\016\063" +
    "\013\064\012\001\001\000\032\004\060\005\056\011\061" +
    "\016\007\024\057\025\062\031\055\057\020\061\017\062" +
    "\016\063\013\064\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\100\314\001\001\000" +
    "\016\006\121\013\315\036\110\037\107\040\105\041\115" +
    "\001\001\000\006\033\127\101\316\001\001\000\002\001" +
    "\001\000\016\006\121\013\320\036\110\037\107\040\105" +
    "\041\115\001\001\000\006\033\127\102\321\001\001\000" +
    "\004\021\324\001\001\000\004\103\335\001\001\000\004" +
    "\104\325\001\001\000\002\001\001\000\016\006\121\013" +
    "\326\036\110\037\107\040\105\041\115\001\001\000\004" +
    "\033\127\001\001\000\006\043\331\105\330\001\001\000" +
    "\034\004\052\005\047\011\053\014\333\016\007\024\051" +
    "\025\054\031\046\057\020\061\017\062\016\063\013\064" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\004\060\005\056\011\061\016\007\024\057\025\062\031" +
    "\055\057\020\061\017\062\016\063\013\064\012\001\001" +
    "\000\002\001\001\000\034\004\052\005\047\011\053\014" +
    "\337\016\007\024\051\025\054\031\046\057\020\061\017" +
    "\062\016\063\013\064\012\001\001\000\002\001\001\000" +
    "\032\004\060\005\056\011\061\016\007\024\057\025\062" +
    "\031\055\057\020\061\017\062\016\063\013\064\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\121\013\353\036\110\037\107\040" +
    "\105\041\115\001\001\000\004\033\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\121\013\360\036\110\037\107\040\105\041\115\001\001" +
    "\000\004\033\127\001\001\000\004\107\362\001\001\000" +
    "\010\044\363\110\365\111\364\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\004\052\005\047\011\053\014" +
    "\366\016\007\024\051\025\054\031\046\057\020\061\017" +
    "\062\016\063\013\064\012\001\001\000\032\004\060\005" +
    "\056\011\061\016\007\024\057\025\062\031\055\057\020" +
    "\061\017\062\016\063\013\064\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\112\374\001\001\000\002" +
    "\001\001\000\004\114\u0101\001\001\000\034\004\052\005" +
    "\047\011\053\014\375\016\007\024\051\025\054\031\046" +
    "\057\020\061\017\062\016\063\013\064\012\001\001\000" +
    "\032\004\060\005\056\011\061\016\007\024\057\025\062" +
    "\031\055\057\020\061\017\062\016\063\013\064\012\001" +
    "\001\000\004\113\377\001\001\000\016\006\121\013\u0100" +
    "\036\110\037\107\040\105\041\115\001\001\000\004\033" +
    "\127\001\001\000\016\006\121\013\u0102\036\110\037\107" +
    "\040\105\041\115\001\001\000\004\033\127\001\001\000" +
    "\004\047\u0104\001\001\000\034\004\052\005\047\011\053" +
    "\014\u010c\016\007\024\051\025\054\031\046\057\020\061" +
    "\017\062\016\063\013\064\012\001\001\000\002\001\001" +
    "\000\004\027\u0107\001\001\000\002\001\001\000\004\050" +
    "\u0109\001\001\000\034\004\052\005\047\011\053\014\u010a" +
    "\016\007\024\051\025\054\031\046\057\020\061\017\062" +
    "\016\063\013\064\012\001\001\000\032\004\060\005\056" +
    "\011\061\016\007\024\057\025\062\031\055\057\020\061" +
    "\017\062\016\063\013\064\012\001\001\000\002\001\001" +
    "\000\032\004\060\005\056\011\061\016\007\024\057\025" +
    "\062\031\055\057\020\061\017\062\016\063\013\064\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Variables para el Arbol sintactico
    proyecto_olc1.arbolSintactico arbolAux = proyecto_olc1.interfaz.arbol;
    proyecto_olc1.Nodo nodoAux = proyecto_olc1.interfaz.nodo;

    int v1,v2 = 0;
    int contLL,contCL = 0;
    String crp = "cuerpo"; 
    String ins = "INSTRUCCIONES";

    public static String txtPython = ""; //Variable que guarda el código python
    String auxP = ""; //Guarda condicion/expresion
    String aux2=""; //Guarda informacion de lista parametros, nombres y expresiones/condiciones
    String tmpPS = ""; //Guarda condicion del switch case
    String tmp = "";   // Guarda lista de resultados asignacion/declaracion
    String tmpPARA =""; //Guarda condicion hasta(condicion) del ciclo para
    int cont1 = 0; //contador de nombres asignacion/declaracion

    int contTPY = 0; //contador de tabulacion
    
    public static String txtGo = ""; //Variable que guarda el código Golang
    String auxTP = ""; //guarda el tipo de dato
    String auxC = "";
    String aux2G = "";
    String tmpG="";
    String auxID="";
    String tmpPARAG="";
    String imps = ""; //guarda bloque de importaciones
    int flag = 0; //verificador para cierre de llave main
    int flag2 = 0;

    //caracter ascii
    String cA = ""; //guarda el valor del token caracter Ascci
    int c = 0; //guarda el valor del caracter asccii

    //Metodo para calcular la identación correcta python
    public String tab(){
        String tab = "";
        for(int i = 0; i < (contTPY*4); i++) {
            tab+=" ";

        }
       
        return tab;
    }

    //Método al que se llama automáticamente ante algún error sintactico. 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
            claseErrores datos = new claseErrores(String.valueOf(s.value), "Error sintáctico", "No se esperaba este componente:",s.left,s.right);
            Analizador_Lexico.TError.add(datos);
    } 
    
    //Método al que se llama en el momento en que ya no es posible una recuperación de errores. 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
            claseErrores datos = new claseErrores("Null", "Error sintáctico", "Error irrecuperable", s.left,s.right);
            Analizador_Lexico.TError.add(datos);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$A_sintactico$actions {


    String sumaO(Object v1, Object v2){
        auxP+= " "+v1.toString() + " + " + v2.toString();
        auxC+= " "+v1.toString() + " + " + v2.toString();
        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        return "";
    }
    
    String restaO(Object v1, Object v2){
        auxP+= " "+v1.toString() + " - " + v2.toString();
        auxC+= " "+v1.toString() + " - " + v2.toString();
        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        flag2=0;
        return "";
    }

    String multi(Object v1, Object v2){
        auxP+= " "+v1.toString() + " * " + v2.toString();
        auxC+= " "+v1.toString() + " * " + v2.toString();
        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        return "";
    }

    String divs(Object v1, Object v2){

        auxP+= " "+v1.toString() + " / " + v2.toString();
        auxC+= " "+v1.toString() + " / " + v2.toString();
        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        return "";
    }
    
    String modulo(Object v1, Object v2){

        auxP+= " "+v1.toString() + " % " + v2.toString();
        auxC+= " "+v1.toString() + " % " + v2.toString();
        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        return "";
    }
    
    String potencia(Object v1, Object v2){

        auxP+= " "+v1.toString() + " ** " + v2.toString();
        auxC+= " math.Pow(float64("+v1.toString() + "),float64(" + v2.toString()+"))";
        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        return "";
    }

  private final A_sintactico parser;

  /** Constructor */
  CUP$A_sintactico$actions(A_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$A_sintactico$do_action_part00000000(
    int                        CUP$A_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_sintactico$parser,
    java.util.Stack            CUP$A_sintactico$stack,
    int                        CUP$A_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$A_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$A_sintactico$parser.done_parsing();
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        //arbol
        arbolAux.InsertarRecursivo(nodoAux,"Rinicio","Global");
        arbolAux.InsertarRecursivo(nodoAux,"inicio","Rinicio");
        arbolAux.InsertarRecursivo(nodoAux,"cuerpo","Global");
        arbolAux.InsertarRecursivo(nodoAux,"Rfin","Global");

        txtPython+=tab()+"def main():\n";
        imps+= "import (\n\"fmt\"\n\"math\"\n)\n";
        txtGo+=tab()+"package main\n"+tab()+imps+"func main(){\n";
        contTPY+=1;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",35, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= inicio NT$0 cuerpo fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		
        arbolAux.InsertarRecursivo(nodoAux,"fin","Rfin");

        txtPython+="if __name__ == '__main__':\n    main()";
        
        if(flag==0){
            txtGo+="}";
        }

        contTPY-=1;
        imps = "";
        System.out.println(txtPython);
        System.out.println(txtGo);
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error fin 
            {
              Object RESULT =null;
		System.out.println("Falta inicio");
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpo ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo ::= CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo ::= RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo ::= METODO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo ::= FUNCION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo ::= LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo ::= cuerpo CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo ::= cuerpo DECLARACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo ::= cuerpo ASIGNACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cuerpo ::= cuerpo RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpo ::= cuerpo METODO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cuerpo ::= cuerpo FUNCION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cuerpo ::= cuerpo LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cuerpo ::= cuerpo IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LLAMADA ::= ejecutar id abrir_par cerrar_par puntoComa 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		  
                if(crp.equals("cuerpo")){
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-LLAMADA",crp);

                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rejecutar",String.valueOf(contLL)+"-LLAMADA");
                    arbolAux.InsertarRecursivo(nodoAux,"ejecutar",String.valueOf(contLL)+"-Rejecutar");

                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-idd",String.valueOf(contLL)+"-LLAMADA");
                    arbolAux.InsertarRecursivo(nodoAux,idd.toString(),String.valueOf(contLL)+"-idd");

                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-abrir_par",String.valueOf(contLL)+"-LLAMADA");
                    arbolAux.InsertarRecursivo(nodoAux,"(",String.valueOf(contLL)+"-abrir_par");

                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-cerrar_par",String.valueOf(contLL)+"-LLAMADA");
                    arbolAux.InsertarRecursivo(nodoAux,")",String.valueOf(contLL)+"-cerrar_par");

                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-puntoComa",String.valueOf(contLL)+"-LLAMADA");
                    arbolAux.InsertarRecursivo(nodoAux,";",String.valueOf(contLL)+"-puntoComa");
                }         
                
    
                txtPython+=tab()+String.valueOf(idd)+"()\n";
                txtGo+= tab()+String.valueOf(idd)+"()\n";
                contLL++;
            
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$1 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        if(crp.equals("cuerpo")){
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-LLAMADA",crp);

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rejecutar",String.valueOf(contLL)+"-LLAMADA");
            arbolAux.InsertarRecursivo(nodoAux,"ejecutar",String.valueOf(contLL)+"-Rejecutar");

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-idd",String.valueOf(contLL)+"-LLAMADA");
            arbolAux.InsertarRecursivo(nodoAux,idd.toString(),String.valueOf(contLL)+"-idd");

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-abrir_par",String.valueOf(contLL)+"-LLAMADA");
            arbolAux.InsertarRecursivo(nodoAux,"(",String.valueOf(contLL)+"-abrir_par");

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-LEJC",String.valueOf(contLL)+"-LLAMADA");
        }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",36, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LLAMADA ::= ejecutar id abrir_par NT$1 LEJC cerrar_par puntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).value;
		
        
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-cerrar_par",String.valueOf(contLL)+"-LLAMADA");
        arbolAux.InsertarRecursivo(nodoAux,")",String.valueOf(contLL)+"-cerrar_par");

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-puntoComa",String.valueOf(contLL)+"-LLAMADA");
        arbolAux.InsertarRecursivo(nodoAux,";",String.valueOf(contLL)+"-puntoComa");
        
       

        txtPython+= tab()+ String.valueOf(idd)+"("+aux2+")\n";
        txtGo+=tab()+String.valueOf(idd)+"("+aux2G+")\n";
        contLL++;
        auxP="";
        auxC="";
        aux2="";
        aux2G="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$2 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        txtPython+=tab()+"def "+String.valueOf(idd)+"():\n";
        flag=1;
        txtGo+="}\n";
        txtGo+="func "+String.valueOf(idd)+"(){\n";
        contTPY+=1; 
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",37, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // METODO ::= metodo id NT$2 INSTRUCCIONES Finmetodo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$3 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;

        txtPython+=tab()+"def "+String.valueOf(idd)+"("+aux2+"):\n";
        flag=1;
        txtGo+="}\n";
        txtGo+="func "+String.valueOf(idd)+"("+aux2G+"){\n";
        contTPY+=1; 
        aux2="";
        aux2G="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",38, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // METODO ::= metodo id con_parametros abrir_par LISTAP cerrar_par NT$3 INSTRUCCIONES Finmetodo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$4 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        txtPython+=tab()+"def "+String.valueOf(idd)+":\n";
        flag=1;
        txtGo+="}\n";
        txtGo+="func "+String.valueOf(idd)+"()"+String.valueOf(tdd)+"{\n";
        contTPY+=1; 
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",39, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCION ::= funcion id TIPODATO NT$4 INSTRUCCIONES Finfuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$5 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;

        txtPython+=tab()+"def "+String.valueOf(idd)+"("+aux2+"):\n";
        flag=1;
        txtGo+="}\n";
        txtGo+="func "+String.valueOf(idd)+"("+aux2G+")"+String.valueOf(tdd)+"{\n";
        contTPY+=1; 
        aux2="";
        aux2G="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",40, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCION ::= funcion id TIPODATO con_parametros abrir_par LISTAP cerrar_par NT$5 INSTRUCCIONES Finfuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$6 ::= 
            {
              Object RESULT =null;

    if(crp.equals("cuerpo")){
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-IMPRESION",crp);
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rimprimir",String.valueOf(contLL)+"-IMPRESION");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-imprimir",String.valueOf(contLL)+"-Rimprimir");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-IMPRESION");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-puntoComa",String.valueOf(contLL)+"-IMPRESION");
        arbolAux.InsertarRecursivo(nodoAux,";",String.valueOf(contLL)+"-puntoComa");
    }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",41, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IMPRESION ::= imprimir NT$6 CONDICION puntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		       

        txtPython+=tab()+"print("+auxP+")\n";
        txtGo+=tab()+"fmt.Print("+auxC+")\n";
        contLL++;
        contCL++;
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",19, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$7 ::= 
            {
              Object RESULT =null;

        if(crp.equals("cuerpo")){
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-IMPRESION",crp);
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rimprimir_nl",String.valueOf(contLL)+"-IMPRESION");
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-imprimir_nl",String.valueOf(contLL)+"-Rimprimir_nl");
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-IMPRESION");
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-puntoComa",String.valueOf(contLL)+"-IMPRESION");
            arbolAux.InsertarRecursivo(nodoAux,";",String.valueOf(contLL)+"-puntoComa");
        }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",42, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IMPRESION ::= imprimir_nl NT$7 CONDICION puntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		
        txtPython+=tab()+"print("+auxP+",\"\\n\")\n";
        txtGo+=tab()+"fmt.Println("+auxC+")\n";
        contLL++;
        contCL++;
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",19, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$8 ::= 
            {
              Object RESULT =null;

                if(crp.equals("cuerpo")){
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-DECLARACION",crp);
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Ringresar",String.valueOf(contLL)+"-DECLARACION");
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-ingresar",String.valueOf(contLL)+"-Ringresar");
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-LISTA",String.valueOf(contLL)+"-DECLARACION");
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rcomo",String.valueOf(contLL)+"-DECLARACION");
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-como",String.valueOf(contLL)+"-Rcomo");
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-TIPODATO",String.valueOf(contLL)+"-DECLARACION");
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-RCon_valor",String.valueOf(contLL)+"-DECLARACION");
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-con_valor",String.valueOf(contLL)+"-RCon_valor");
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-DECLARACION");
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-puntoComa",String.valueOf(contLL)+"-DECLARACION");
                    arbolAux.InsertarRecursivo(nodoAux,";",String.valueOf(contLL)+"-puntoComa");
                }
                txtPython+=tab();
                txtGo+=tab()+"var ";
            
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",43, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int ttdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int ttdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object ttd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
auxTP+=ttd;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",44, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Ringresar NT$8 LISTA Rcomo TIPODATO NT$9 RCon_valor CONDICION puntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int ttdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int ttdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object ttd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		
                contLL++;
                contCL++;

                txtPython+=aux2;
                txtGo+=aux2;

                aux2="";
                txtPython+=" = ";
                txtGo+=" "+auxTP+" = ";
                auxTP="";
           
                for(int i = 0 ; i <= cont1; i = i + 1)
                {
                    if(i==0){
                        tmp+=auxP;
                        tmpG+=auxC;
                    }
                    else{
                        tmp+= "," + auxP;
                        tmpG+= ","+ auxC;
                    }

                };
                txtPython+= tmp+"\n";
                txtGo+= tmpG+"\n"; 
                auxP="";
                auxC="";
                tmp="";
                tmpG="";
                cont1=0;
            
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$10 ::= 
            {
              Object RESULT =null;

        //arbol
        if(crp.equals("cuerpo")){
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-ASIGNACION",crp);
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-LISTA",String.valueOf(contLL)+"-ASIGNACION");
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rasignacion",String.valueOf(contLL)+"-ASIGNACION");
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- ->",String.valueOf(contLL)+"-Rasignacion");
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-ASIGNACION");
        }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",45, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACION ::= NT$10 LISTA asignacion CONDICION puntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		
                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-puntoComa",String.valueOf(contLL)+"-ASIGNACION");
                arbolAux.InsertarRecursivo(nodoAux,";",String.valueOf(contLL)+"-puntoComa");

                txtPython+= tab()+aux2;
                txtGo+= tab()+aux2;
                aux2="";
                txtPython+=" = ";
                txtGo+=" = ";

                for(int i = 0 ; i <= cont1; i = i + 1)
                {
                    if(i==0){
                        tmp+=auxP;
                        tmpG+=auxC;
                    }
                    else{
                        tmp+= "," + auxP;
                        tmpG+= ","+ auxC;
                    }

                };
                txtPython+= tmp+"\n";
                txtGo+=tmpG+"\n";
                auxP="";
                auxC="";
                tmp="";
                tmpG="";
                cont1=0;
                contLL++;
                contCL++;
            
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTAP ::= id TIPODATO 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        aux2+=String.valueOf(idd);
        aux2G+= String.valueOf(idd)+" "+String.valueOf(tdd);
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAP",21, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTAP ::= LISTAP Coma id TIPODATO 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        aux2+=","+String.valueOf(idd);
        aux2G+=","+String.valueOf(idd)+" "+String.valueOf(tdd);
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAP",21, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTA ::= id 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		                                  
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-idd",String.valueOf(contLL)+"-LISTA");
        arbolAux.InsertarRecursivo(nodoAux,idd.toString(),String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-idd");
        contCL++;
        aux2+=idd.toString();
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTA ::= LISTA Coma id 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Coma",String.valueOf(contLL)+"-LISTA");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"- , ",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Coma");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-idd",String.valueOf(contLL)+"-LISTA");
        arbolAux.InsertarRecursivo(nodoAux,idd.toString(),String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-idd");
        
        contCL++;
        aux2+=","+idd.toString();
        cont1=cont1+1;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LEJC ::= CONDICION 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-LEJC");

        contCL++;
        aux2+=auxP;
        aux2G+=auxC;
        auxC="";
        auxP="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LEJC",26, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$11 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Coma",String.valueOf(contLL)+"-LEJC");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"- , ",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Coma");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-LEJC");
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",46, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LEJC ::= LEJC Coma NT$11 CONDICION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        aux2+=","+auxP;
        aux2G+=","+auxC;
        contCL++;
        auxC="";
        auxP="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LEJC",26, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$12 ::= 
            {
              Object RESULT =null;

        if(crp.equals("cuerpo")){
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-CONDICIONALES",crp);
        }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",47, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDICIONALES ::= NT$12 IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONDICIONALES ::= SEGUN 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$13 ::= 
            {
              Object RESULT =null;

        if(crp.equals("cuerpo")){
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-CONDICIONALES",crp);
        }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",48, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICIONALES ::= NT$13 PARA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$14 ::= 
            {
              Object RESULT =null;

        if(crp.equals("cuerpo")){
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-CONDICIONALES",crp);
        }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",49, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONDICIONALES ::= NT$14 MIENTRAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$15 ::= 
            {
              Object RESULT =null;

        if(crp.equals("cuerpo")){
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-CONDICIONALES",crp);
        }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",50, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONDICIONALES ::= NT$15 REPETIR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$16 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-IF",String.valueOf(contLL)+"-CONDICIONALES");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-condSi",String.valueOf(contLL)+"-IF");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- Si",String.valueOf(contLL)+"-condSi");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-IF");   
        contCL++;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",51, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        txtPython+=tab()+"if "+auxP+":\n";
        txtGo+=tab()+"if "+auxC+" {\n";
        contTPY+=1; auxP="";auxC="";
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-auxFS",String.valueOf(contLL)+"-IF");
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",52, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IF ::= condSi NT$16 CONDICION NT$17 auxFS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IF",8, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$18 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rentonces",String.valueOf(contLL)+"-auxFS");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- entonces",String.valueOf(contLL)+"-Rentonces");        
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-auxFS");
        crp="INSTRUCCIONES";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",53, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

        crp="cuerpo";
        contLL--;
        contCL--;
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-AuxIFF",String.valueOf(contLL)+"-auxFS");
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$19",54, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // auxFS ::= NT$18 entonces INSTRUCCIONES NT$19 AuxIFF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("auxFS",27, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AuxIFF ::= finSi 
            {
              Object RESULT =null;
		
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-finSi",String.valueOf(contLL)+"-AuxIFF");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-fin_Si",String.valueOf(contLL)+"-finSi");
        
        contLL++;
        contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("AuxIFF",32, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$20 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-contrario",String.valueOf(contLL)+"-AuxIFF");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-de_lo_contrario",String.valueOf(contLL)+"-contrario");
        
        contTPY-=1;
        txtPython+=tab()+"else:\n";
        txtGo+=tab()+"} else {\n";
        contTPY+=1;
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-AuxIFF");
        crp="INSTRUCCIONES";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$20",55, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // AuxIFF ::= contrario NT$20 INSTRUCCIONES finSi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		
        crp="cuerpo";
        contLL--;
        contCL--;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-finSi",String.valueOf(contLL)+"-AuxIFF");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-fin_Si",String.valueOf(contLL)+"-finSi");
        
        contLL++;
        contCL++;

        contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("AuxIFF",32, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$21 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-BLOQUE",String.valueOf(contLL)+"-AuxIFF");

    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$21",56, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // AuxIFF ::= NT$21 BLOQUE finSi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		
       
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-finSi",String.valueOf(contLL)+"-AuxIFF");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-fin_Si",String.valueOf(contLL)+"-finSi");
        contLL++;
        contCL++;

        contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("AuxIFF",32, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$22 ::= 
            {
              Object RESULT =null;


        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-OSi",String.valueOf(contLL)+"-BLOQUE");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-O_si",String.valueOf(contLL)+"-OSi");  
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-BLOQUE"); 
        contCL++;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$22",57, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$23 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Rentonces",String.valueOf(contLL)+"-BLOQUE");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- entonces",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Rentonces"); 
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-BLOQUE");
        
        contTPY-=1; 
        txtPython+=tab()+"elif "+auxP+":\n";
        txtGo+= tab()+"}else if "+auxC+" {\n";
        contTPY+=1;
        auxP="";
        auxC="";

        crp="INSTRUCCIONES";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$23",58, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BLOQUE ::= OSi NT$22 CONDICION entonces NT$23 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		
        crp="cuerpo";  
        contLL--;
        contCL--;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$24 ::= 
            {
              Object RESULT =null;

        
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-OSi",String.valueOf(contLL)+"-BLOQUE");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-O_si",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-OSi");  
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-BLOQUE");
        contCL++;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$24",59, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$25 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Rentonces",String.valueOf(contLL)+"-BLOQUE");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- entonces",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Rentonces"); 
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-BLOQUE");

        contTPY-=1; 
        txtPython+=tab()+"elif "+auxP+":\n";
        txtGo+=tab()+"}else if "+auxC+" {\n";
        contTPY+=1;
        auxP=""; auxC="";
        crp="INSTRUCCIONES";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$25",60, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BLOQUE ::= BLOQUE OSi NT$24 CONDICION entonces NT$25 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		
        crp="cuerpo";
        contLL--;
        contCL--;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$26 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-contrario",String.valueOf(contLL)+"-BLOQUE");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-de_lo_contrario",String.valueOf(contLL)+"-contrario");

        contTPY-=1;
        txtPython+=tab()+"else:\n";
        txtGo+=tab()+" }else {\n";
        contTPY+=1;
        auxP="";
        auxC="";
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-BLOQUE");
        crp="INSTRUCCIONES";

    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$26",61, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BLOQUE ::= BLOQUE contrario NT$26 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		 
        crp="cuerpo";
        contLL--;
        contCL--;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$27 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-PARA",String.valueOf(contLL)+"-CONDICIONALES");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rpara",String.valueOf(contLL)+"-PARA");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- para",String.valueOf(contLL)+"-Rpara");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rasignacion",String.valueOf(contLL)+"-PARA");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- ->",String.valueOf(contLL)+"-Rasignacion");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-PARA");   
        contCL++;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$27",62, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$28 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-RHasta",String.valueOf(contLL)+"-PARA");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- hasta",String.valueOf(contLL)+"-RHasta");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-PARA");
        contCL++;

        auxID=String.valueOf(idd);
        txtPython+=tab()+"for "+auxID+" in range("+auxP; 
        txtGo+=tab()+"for "+auxID+" := "+auxC+";";
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$28",63, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$29 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-BLOQUEPARA",String.valueOf(contLL)+"-PARA");
        tmpPARA=auxP;
        tmpPARAG=auxC;
        contTPY+=1; 
        auxP="";
        auxC="";
        
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$29",64, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PARA ::= para id asignacion NT$27 CONDICION NT$28 hasta CONDICION NT$29 BLOQUEPARA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",14, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$30 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rhacer",String.valueOf(contLL)+"-BLOQUEPARA");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- hacer",String.valueOf(contLL)+"-Rhacer");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-BLOQUEPARA");
        crp="INSTRUCCIONES";

        txtPython+=","+tmpPARA+"):\n";
        txtGo+= " "+tmpPARAG+";"+auxID+"++ {\n";
        tmpPARA ="";tmpPARAG="";auxID="";

    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$30",65, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // BLOQUEPARA ::= hacer NT$30 INSTRUCCIONES finPara 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		
        crp="cuerpo";
        contLL--;
        contCL--;
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-finPara",String.valueOf(contLL)+"-BLOQUEPARA");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-fin_para",String.valueOf(contLL)+"-finPara");
        contLL++;
        contCL++;

        contTPY-=1; txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUEPARA",15, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // BLOQUEPARA ::= hacer finPara 
            {
              Object RESULT =null;
		
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rhacer",String.valueOf(contLL)+"-BLOQUEPARA");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- hacer",String.valueOf(contLL)+"-Rhacer");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-finPara",String.valueOf(contLL)+"-BLOQUEPARA");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-fin_para",String.valueOf(contLL)+"-finPara");

        contLL++;
        contCL++;

        txtPython+=","+tmpPARA+"):\n";
        txtGo+= " "+tmpPARAG+";"+auxID+"++ {\n";
        tmpPARA ="";tmpPARAG="";auxID="";
        contTPY-=1; txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUEPARA",15, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$31 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-incremento",String.valueOf(contLL)+"-BLOQUEPARA");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-con_incremental",String.valueOf(contLL)+"-incremento");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-BLOQUEPARA");   
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-AUXPR",String.valueOf(contLL)+"-BLOQUEPARA");
        contCL++;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$31",66, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // BLOQUEPARA ::= incremento NT$31 CONDICION hacer AUXPR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUEPARA",15, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$32 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rhacer",String.valueOf(contLL)+"-AUXPR");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- hacer",String.valueOf(contLL)+"-Rhacer");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-AUXPR");
        crp="INSTRUCCIONES";

        txtPython+=","+tmpPARA+","+auxP+"):\n";
        txtGo+= " "+tmpPARAG+";"+auxID+"+= "+auxC+"{\n";
        tmpPARA ="";tmpPARAG="";auxID="";auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$32",67, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // AUXPR ::= NT$32 INSTRUCCIONES finPara 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		
        crp="cuerpo";
        contLL--;
        contCL--;
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-finPara",String.valueOf(contLL)+"-AUXPR");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-fin_para",String.valueOf(contLL)+"-finPara");
        contLL++;
        contCL++;
        contTPY-=1; txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("AUXPR",33, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // AUXPR ::= finPara 
            {
              Object RESULT =null;
		
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-finPara",String.valueOf(contLL)+"-AUXPR");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-fin_para",String.valueOf(contLL)+"-finPara");
        contLL++;
        contCL++;

        txtPython+=","+tmpPARA+","+auxP+"):\n";
        txtGo+= " "+tmpPARAG+";"+auxID+"+= "+auxC+"{\n";
        tmpPARA ="";tmpPARAG="";auxID="";auxP="";auxC="";
        contTPY-=1; txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("AUXPR",33, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$33 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-MIENTRAS",String.valueOf(contLL)+"-CONDICIONALES");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rmientras",String.valueOf(contLL)+"-MIENTRAS");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- mientras",String.valueOf(contLL)+"-Rmientras");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-MIENTRAS");   
        contCL++;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$33",68, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$34 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-AUXMTR",String.valueOf(contLL)+"-MIENTRAS");
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$34",69, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // MIENTRAS ::= NT$33 mientras CONDICION hacer NT$34 AUXMTR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",16, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$35 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-AUXMTR");
        crp="INSTRUCCIONES";

        txtPython+=tab()+"while "+auxP+":\n";
        txtGo+=tab()+"for true {\n"; contTPY+=1; 
        txtGo+=tab()+"if !("+auxC+"){\n";  contTPY+=1;
        txtGo+=tab()+"break\n";  contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$35",70, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // AUXMTR ::= NT$35 INSTRUCCIONES finMientras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		
        crp="cuerpo";
        contLL--;
        contCL--;
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-finMientras",String.valueOf(contLL)+"-AUXMTR");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-fin_mientras",String.valueOf(contLL)+"-finMientras");
        contLL++;
        contCL++;

        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("AUXMTR",34, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$36 ::= 
            {
              Object RESULT =null;

        txtPython+=tab()+"while "+auxP+":\n";
        txtGo+=tab()+"for true {\n"; contTPY+=1; 
        txtGo+=tab()+"if !("+auxC+"){\n";  contTPY+=1;
        txtGo+=tab()+"break\n";  contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$36",71, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // AUXMTR ::= NT$36 finMientras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		  
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-finMientras",String.valueOf(contLL)+"-AUXMTR");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-fin_mientras",String.valueOf(contLL)+"-finMientras");
        contLL++;
        contCL++;

        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("AUXMTR",34, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$37 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-REPETIR",String.valueOf(contLL)+"-CONDICIONALES");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rrepetir",String.valueOf(contLL)+"-REPETIR");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- repetir",String.valueOf(contLL)+"-Rrepetir");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-REPETIR");
        crp="INSTRUCCIONES";

        txtPython+=tab()+"while "+auxP+"\n";
        txtGo+= tab()+"for true {\n";
        contTPY+=1;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$37",72, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$38 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

        crp="cuerpo";
        contLL--;
        contCL--;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-hastaQue",String.valueOf(contLL)+"-REPETIR");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-hasta_que",String.valueOf(contLL)+"-hastaQue");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-REPETIR");   
        contCL++;

    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$38",73, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // REPETIR ::= repetir NT$37 INSTRUCCIONES hastaQue NT$38 CONDICION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        contLL++;
        contCL++;

        txtPython+=tab()+"if "+auxP+" == False:\n";
        txtGo+=tab()+"if ("+auxC+"){\n"; contTPY+=1;
        txtPython+=tab()+"break\n";
        txtGo+=tab()+"break}\n";
        contTPY-=2; 
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",17, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$39 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-REPETIR",String.valueOf(contLL)+"-CONDICIONALES");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rrepetir",String.valueOf(contLL)+"-REPETIR");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- repetir",String.valueOf(contLL)+"-Rrepetir");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-hastaQue",String.valueOf(contLL)+"-REPETIR");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-hasta_que",String.valueOf(contLL)+"-hastaQue");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-REPETIR");   
        contCL++;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$39",74, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // REPETIR ::= repetir hastaQue NT$39 CONDICION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        contLL++;
        contCL++;

        txtPython+=tab()+"while "+auxP+"\n";
        txtGo+= tab()+"for true {\n"; contTPY+=1;
        txtPython+=tab()+"if "+auxP+" == False:\n";
        txtGo+=tab()+"if ("+auxC+"){\n"; contTPY+=1;
        txtPython+=tab()+"break\n"; 
        txtGo+=tab()+"break}\n";
        contTPY-=2; 
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",17, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$40 ::= 
            {
              Object RESULT =null;

        if(crp.equals("cuerpo")){
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-RETORNO",crp);

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rretornar",String.valueOf(contLL)+"-RETORNO");
            arbolAux.InsertarRecursivo(nodoAux,"retornar",String.valueOf(contLL)+"-Rretornar");

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-RETORNO");   
            contCL++;
        } 
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$40",75, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // RETORNO ::= retornar NT$40 CONDICION puntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-puntoComa",String.valueOf(contLL)+"-RETORNO");
        arbolAux.InsertarRecursivo(nodoAux,";",String.valueOf(contLL)+"-puntoComa"); 
        contLL++;
        contCL++;

        txtPython+=tab()+"return "+auxP+"\n";
        txtGo+=tab()+"return "+auxC+"\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",18, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$41 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        tmpPS+=auxP;
        txtGo+=tab()+"switch "+auxC+" {\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$41",76, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SEGUN ::= segun CONDICION hacer NT$41 CASE finSegun 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
        tmpPS="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",12, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$42 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

        txtPython+=tab()+"if "+tmpPS+"=="+auxP+":\n";
        txtGo+= tab()+"case "+auxC+":\n";
        contTPY+=1;
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$42",77, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CASE ::= aitr CONDICION citr entonces NT$42 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$43 ::= 
            {
              Object RESULT =null;

        contTPY-=1;
        txtPython+=tab()+"else:\n";
        txtGo+= tab()+"default:\n";
        contTPY+=1;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$43",78, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CASE ::= CASE contrario entonces NT$43 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$44 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

        contTPY-=1; 
        txtPython+=tab()+"elif "+tmpPS+"=="+auxP+":\n";
        txtGo+= tab()+"case "+auxC+":\n";
        contTPY+=1;
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$44",79, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CASE ::= CASE aitr CONDICION citr entonces NT$44 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPERACIONES ::= EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        RESULT=a; 
        System.out.println("datoTot:"+a.toString());
        //si empieza con $ es caracter
        if(a.toString().length()>1){ 
            if((a.toString().charAt(1)=='$')){
                //obtener numero
                cA+= a.toString().replace("'","").replace("$","").replace("{","").replace("}","");
                c = Integer.parseInt(cA); 
                //verificar numero sino espacion en blanco
                if((c>=65 && c<=90)||(c>=97 && c<=122)){
                    char convertedChar = (char)c; 
                    auxP+= "'"+String.valueOf(convertedChar)+"'";
                    auxC+= "'"+String.valueOf(convertedChar)+"'";
                    cA="";
                }
                else{
                    auxP+= "\" \"";
                    auxC+= "\" \"";
                    cA="";
                }
            }
            else if(a.toString().toLowerCase().equals("verdadero")){
                auxP+= "True";
                auxC+= "true";
            }
            else if(a.toString().toLowerCase().equals("falso")){
                auxP+= "False";
                auxC+= "false";
            }
            else{
                auxP+= a.toString();
                auxC+= a.toString();
            }
        }
        else{
            auxP+= a.toString();
            auxC+= a.toString();
        }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES",31, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= EXPRESION mas OP1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = sumaO(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION ::= EXPRESION resta OP1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = restaO(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION ::= OP1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT =a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OP1 ::= OP1 mult OP2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = multi(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP1",28, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OP1 ::= OP1 div OP2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = divs(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP1",28, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OP1 ::= OP1 Rmod OP2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = modulo(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP1",28, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OP1 ::= OP2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT =a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP1",28, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OP2 ::= OP2 Rpotencia abrir_cor OP3 cerrar_cor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		RESULT = potencia(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP2",29, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OP2 ::= OP3 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP2",29, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$45 ::= 
            {
              Object RESULT =null;
auxP+="("; auxC+="(";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$45",80, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OP3 ::= abrir_par NT$45 OPERACIONES cerrar_par 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		RESULT = a; auxP+=")"; auxC+=")";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OP3 ::= digitoEntero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OP3 ::= digitoDecimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OP3 ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OP3 ::= Cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OP3 ::= caracter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OP3 ::= Rtrue 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OP3 ::= Rfalse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OP3 ::= caracterAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
            RESULT = a;
            
        
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONDICION ::= OPERACIONES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$46 ::= 
            {
              Object RESULT =null;
		int oprleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
auxP+=opr; auxC+=opr;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$46",81, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CONDICION ::= OPERACIONES OP NT$46 OPERACIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$47 ::= 
            {
              Object RESULT =null;
		int ooplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int ooplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oopl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        if(oopl.toString().equals("or")){
            auxP+=" or ";
            auxC+=" || ";
        }

        if(oopl.toString().equals("and")){
            auxP+=" and ";
            auxC+=" && ";
        }

        if(oopl.toString().equals("not")){
            auxP+=" not ";
            auxC+=" ! ";
        }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$47",82, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$48 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int ooplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int ooplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object oopl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
auxP+=opr; auxC+=opr;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$48",83, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CONDICION ::= CONDICION OPL NT$47 OPERACIONES OP NT$48 OPERACIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int ooplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).left;
		int ooplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).right;
		Object oopl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OP ::= mayor 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=">";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OP ::= menor 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="<";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OP ::= mayorIgual 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=">=";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OP ::= menorIgual 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="<=";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OP ::= igual 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="==";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OP ::= diferente 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="!=";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OPL ::= or 
            {
              Object RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=opl;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OPL",25, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OPL ::= and 
            {
              Object RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=opl;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OPL",25, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OPL ::= not 
            {
              Object RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=opl;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OPL",25, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // INSTRUCCIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // INSTRUCCIONES ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // INSTRUCCIONES ::= CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // INSTRUCCIONES ::= LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // INSTRUCCIONES ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // INSTRUCCIONES ::= RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // INSTRUCCIONES ::= INSTRUCCIONES RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // INSTRUCCIONES ::= INSTRUCCIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // INSTRUCCIONES ::= INSTRUCCIONES ASIGNACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // INSTRUCCIONES ::= INSTRUCCIONES CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // INSTRUCCIONES ::= INSTRUCCIONES LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // INSTRUCCIONES ::= INSTRUCCIONES IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TIPODATO ::= Rnumero 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="float64";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TIPODATO ::= Rcadena 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="string";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // TIPODATO ::= Rboolean 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="bool";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // TIPODATO ::= Rcaracter 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="byte";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$A_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$A_sintactico$do_action(
    int                        CUP$A_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_sintactico$parser,
    java.util.Stack            CUP$A_sintactico$stack,
    int                        CUP$A_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$A_sintactico$do_action_part00000000(
                               CUP$A_sintactico$act_num,
                               CUP$A_sintactico$parser,
                               CUP$A_sintactico$stack,
                               CUP$A_sintactico$top);
    }
}

}
