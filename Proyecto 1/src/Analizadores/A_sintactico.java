
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class A_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public A_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public A_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public A_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\003\005\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\004\000\002\002\004\000\002" +
    "\002\004\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\004\000\002\002\004\000\002\030\007\000" +
    "\002\030\010\000\002\034\002\000\002\025\007\000\002" +
    "\035\002\000\002\025\013\000\002\036\002\000\002\027" +
    "\010\000\002\037\002\000\002\027\014\000\002\024\005" +
    "\000\002\024\005\000\002\005\011\000\002\004\006\000" +
    "\002\026\004\000\002\026\006\000\002\010\003\000\002" +
    "\010\005\000\002\033\003\000\002\033\005\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\007\000\002\012\010\000" +
    "\002\012\007\000\002\020\013\000\002\020\012\000\002" +
    "\020\015\000\002\020\014\000\002\021\007\000\002\021" +
    "\006\000\002\022\006\000\002\022\005\000\002\023\005" +
    "\000\002\016\007\000\002\017\007\000\002\017\006\000" +
    "\002\017\010\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\015\006" +
    "\000\002\015\007\000\002\015\005\000\002\013\003\000" +
    "\002\013\005\000\002\013\005\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\004\046\005\001\002\000\004\002\312\001" +
    "\002\000\036\003\035\050\024\051\031\055\020\061\025" +
    "\065\011\071\017\073\013\075\030\076\006\101\041\103" +
    "\033\104\015\105\012\001\002\000\004\051\277\001\002" +
    "\000\062\031\uffd7\047\uffd7\050\uffd7\051\uffd7\055\uffd7\056" +
    "\uffd7\057\uffd7\060\uffd7\061\uffd7\064\uffd7\065\uffd7\070\uffd7" +
    "\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\077" +
    "\uffd7\101\uffd7\102\uffd7\103\uffd7\104\uffd7\105\uffd7\001\002" +
    "\000\036\047\ufff9\050\ufff9\051\ufff9\055\ufff9\061\ufff9\065" +
    "\ufff9\071\ufff9\073\ufff9\075\ufff9\076\ufff9\101\ufff9\103\ufff9" +
    "\104\ufff9\105\ufff9\001\002\000\004\051\260\001\002\000" +
    "\022\004\112\005\116\006\114\007\113\010\111\011\110" +
    "\012\107\051\106\001\002\000\032\050\024\051\031\055" +
    "\020\061\025\065\011\071\017\073\013\074\252\075\030" +
    "\103\033\104\015\105\012\001\002\000\036\047\246\050" +
    "\024\051\031\055\020\061\025\065\011\071\017\073\013" +
    "\075\030\076\006\101\041\103\033\104\015\105\012\001" +
    "\002\000\022\004\112\005\116\006\114\007\113\010\111" +
    "\011\110\012\107\051\106\001\002\000\036\047\uffff\050" +
    "\uffff\051\uffff\055\uffff\061\uffff\065\uffff\071\uffff\073\uffff" +
    "\075\uffff\076\uffff\101\uffff\103\uffff\104\uffff\105\uffff\001" +
    "\002\000\022\004\112\005\116\006\114\007\113\010\111" +
    "\011\110\012\107\051\106\001\002\000\022\004\112\005" +
    "\116\006\114\007\113\010\111\011\110\012\107\051\106" +
    "\001\002\000\036\047\ufffc\050\ufffc\051\ufffc\055\ufffc\061" +
    "\ufffc\065\ufffc\071\ufffc\073\ufffc\075\ufffc\076\ufffc\101\ufffc" +
    "\103\ufffc\104\ufffc\105\ufffc\001\002\000\062\031\uffd8\047" +
    "\uffd8\050\uffd8\051\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8" +
    "\061\uffd8\064\uffd8\065\uffd8\070\uffd8\071\uffd8\072\uffd8\073" +
    "\uffd8\074\uffd8\075\uffd8\076\uffd8\077\uffd8\101\uffd8\102\uffd8" +
    "\103\uffd8\104\uffd8\105\uffd8\001\002\000\062\031\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6" +
    "\061\uffd6\064\uffd6\065\uffd6\070\uffd6\071\uffd6\072\uffd6\073" +
    "\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6\101\uffd6\102\uffd6" +
    "\103\uffd6\104\uffd6\105\uffd6\001\002\000\004\051\031\001" +
    "\002\000\022\004\112\005\116\006\114\007\113\010\111" +
    "\011\110\012\107\051\106\001\002\000\036\047\ufffe\050" +
    "\ufffe\051\ufffe\055\ufffe\061\ufffe\065\ufffe\071\ufffe\073\ufffe" +
    "\075\ufffe\076\ufffe\101\ufffe\103\ufffe\104\ufffe\105\ufffe\001" +
    "\002\000\036\047\ufffb\050\ufffb\051\ufffb\055\ufffb\061\ufffb" +
    "\065\ufffb\071\ufffb\073\ufffb\075\ufffb\076\ufffb\101\ufffb\103" +
    "\ufffb\104\ufffb\105\ufffb\001\002\000\022\004\112\005\116" +
    "\006\114\007\113\010\111\011\110\012\107\051\106\001" +
    "\002\000\010\034\uffdc\052\uffdc\054\uffdc\001\002\000\036" +
    "\047\ufffd\050\ufffd\051\ufffd\055\ufffd\061\ufffd\065\ufffd\071" +
    "\ufffd\073\ufffd\075\ufffd\076\ufffd\101\ufffd\103\ufffd\104\ufffd" +
    "\105\ufffd\001\002\000\004\051\142\001\002\000\062\031" +
    "\uffd4\047\uffd4\050\uffd4\051\uffd4\055\uffd4\056\uffd4\057\uffd4" +
    "\060\uffd4\061\uffd4\064\uffd4\065\uffd4\070\uffd4\071\uffd4\072" +
    "\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\101\uffd4" +
    "\102\uffd4\103\uffd4\104\uffd4\105\uffd4\001\002\000\010\033" +
    "\140\034\137\054\141\001\002\000\036\047\ufff8\050\ufff8" +
    "\051\ufff8\055\ufff8\061\ufff8\065\ufff8\071\ufff8\073\ufff8\075" +
    "\ufff8\076\ufff8\101\ufff8\103\ufff8\104\ufff8\105\ufff8\001\002" +
    "\000\062\031\uffd5\047\uffd5\050\uffd5\051\uffd5\055\uffd5\056" +
    "\uffd5\057\uffd5\060\uffd5\061\uffd5\064\uffd5\065\uffd5\070\uffd5" +
    "\071\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5\077" +
    "\uffd5\101\uffd5\102\uffd5\103\uffd5\104\uffd5\105\uffd5\001\002" +
    "\000\006\034\104\054\105\001\002\000\004\051\043\001" +
    "\002\000\036\047\ufffa\050\ufffa\051\ufffa\055\ufffa\061\ufffa" +
    "\065\ufffa\071\ufffa\073\ufffa\075\ufffa\076\ufffa\101\ufffa\103" +
    "\ufffa\104\ufffa\105\ufffa\001\002\000\012\015\044\016\045" +
    "\017\046\020\050\001\002\000\040\030\uffa0\034\uffa0\050" +
    "\uffa0\051\uffa0\053\uffa0\055\uffa0\061\uffa0\065\uffa0\071\uffa0" +
    "\073\uffa0\075\uffa0\100\uffa0\103\uffa0\104\uffa0\105\uffa0\001" +
    "\002\000\040\030\uff9f\034\uff9f\050\uff9f\051\uff9f\053\uff9f" +
    "\055\uff9f\061\uff9f\065\uff9f\071\uff9f\073\uff9f\075\uff9f\100" +
    "\uff9f\103\uff9f\104\uff9f\105\uff9f\001\002\000\040\030\uff9e" +
    "\034\uff9e\050\uff9e\051\uff9e\053\uff9e\055\uff9e\061\uff9e\065" +
    "\uff9e\071\uff9e\073\uff9e\075\uff9e\100\uff9e\103\uff9e\104\uff9e" +
    "\105\uff9e\001\002\000\032\050\uffe6\051\uffe6\055\uffe6\061" +
    "\uffe6\065\uffe6\071\uffe6\073\uffe6\075\uffe6\100\052\103\uffe6" +
    "\104\uffe6\105\uffe6\001\002\000\040\030\uff9d\034\uff9d\050" +
    "\uff9d\051\uff9d\053\uff9d\055\uff9d\061\uff9d\065\uff9d\071\uff9d" +
    "\073\uff9d\075\uff9d\100\uff9d\103\uff9d\104\uff9d\105\uff9d\001" +
    "\002\000\030\050\024\051\031\055\020\061\025\065\011" +
    "\071\017\073\013\075\030\103\033\104\015\105\012\001" +
    "\002\000\004\027\053\001\002\000\004\051\055\001\002" +
    "\000\006\030\060\034\057\001\002\000\012\015\044\016" +
    "\045\017\046\020\050\001\002\000\006\030\uffde\034\uffde" +
    "\001\002\000\004\051\100\001\002\000\030\050\uffe4\051" +
    "\uffe4\055\uffe4\061\uffe4\065\uffe4\071\uffe4\073\uffe4\075\uffe4" +
    "\103\uffe4\104\uffe4\105\uffe4\001\002\000\030\050\024\051" +
    "\031\055\020\061\025\065\011\071\017\073\013\075\030" +
    "\103\033\104\015\105\012\001\002\000\054\031\uffa9\050" +
    "\uffa9\051\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9" +
    "\064\uffa9\065\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9\074" +
    "\uffa9\075\uffa9\077\uffa9\102\uffa9\103\uffa9\104\uffa9\105\uffa9" +
    "\001\002\000\054\031\uffac\050\uffac\051\uffac\055\uffac\056" +
    "\uffac\057\uffac\060\uffac\061\uffac\064\uffac\065\uffac\070\uffac" +
    "\071\uffac\072\uffac\073\uffac\074\uffac\075\uffac\077\uffac\102" +
    "\uffac\103\uffac\104\uffac\105\uffac\001\002\000\032\050\024" +
    "\051\031\055\020\061\025\065\011\071\017\073\013\075" +
    "\030\102\077\103\033\104\015\105\012\001\002\000\054" +
    "\031\uffa7\050\uffa7\051\uffa7\055\uffa7\056\uffa7\057\uffa7\060" +
    "\uffa7\061\uffa7\064\uffa7\065\uffa7\070\uffa7\071\uffa7\072\uffa7" +
    "\073\uffa7\074\uffa7\075\uffa7\077\uffa7\102\uffa7\103\uffa7\104" +
    "\uffa7\105\uffa7\001\002\000\054\031\uffab\050\uffab\051\uffab" +
    "\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\064\uffab\065" +
    "\uffab\070\uffab\071\uffab\072\uffab\073\uffab\074\uffab\075\uffab" +
    "\077\uffab\102\uffab\103\uffab\104\uffab\105\uffab\001\002\000" +
    "\054\031\uffaa\050\uffaa\051\uffaa\055\uffaa\056\uffaa\057\uffaa" +
    "\060\uffaa\061\uffaa\064\uffaa\065\uffaa\070\uffaa\071\uffaa\072" +
    "\uffaa\073\uffaa\074\uffaa\075\uffaa\077\uffaa\102\uffaa\103\uffaa" +
    "\104\uffaa\105\uffaa\001\002\000\054\031\uffa8\050\uffa8\051" +
    "\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\064\uffa8" +
    "\065\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8\075" +
    "\uffa8\077\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8\001\002" +
    "\000\054\031\uffa2\050\uffa2\051\uffa2\055\uffa2\056\uffa2\057" +
    "\uffa2\060\uffa2\061\uffa2\064\uffa2\065\uffa2\070\uffa2\071\uffa2" +
    "\072\uffa2\073\uffa2\074\uffa2\075\uffa2\077\uffa2\102\uffa2\103" +
    "\uffa2\104\uffa2\105\uffa2\001\002\000\054\031\uffa5\050\uffa5" +
    "\051\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\064" +
    "\uffa5\065\uffa5\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5" +
    "\075\uffa5\077\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5\001" +
    "\002\000\054\031\uffa6\050\uffa6\051\uffa6\055\uffa6\056\uffa6" +
    "\057\uffa6\060\uffa6\061\uffa6\064\uffa6\065\uffa6\070\uffa6\071" +
    "\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6\077\uffa6\102\uffa6" +
    "\103\uffa6\104\uffa6\105\uffa6\001\002\000\054\031\uffa4\050" +
    "\uffa4\051\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4" +
    "\064\uffa4\065\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074" +
    "\uffa4\075\uffa4\077\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4" +
    "\001\002\000\054\031\uffa3\050\uffa3\051\uffa3\055\uffa3\056" +
    "\uffa3\057\uffa3\060\uffa3\061\uffa3\064\uffa3\065\uffa3\070\uffa3" +
    "\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\077\uffa3\102" +
    "\uffa3\103\uffa3\104\uffa3\105\uffa3\001\002\000\054\031\uffa1" +
    "\050\uffa1\051\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061" +
    "\uffa1\064\uffa1\065\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1" +
    "\074\uffa1\075\uffa1\077\uffa1\102\uffa1\103\uffa1\104\uffa1\105" +
    "\uffa1\001\002\000\036\047\uffe3\050\uffe3\051\uffe3\055\uffe3" +
    "\061\uffe3\065\uffe3\071\uffe3\073\uffe3\075\uffe3\076\uffe3\101" +
    "\uffe3\103\uffe3\104\uffe3\105\uffe3\001\002\000\012\015\044" +
    "\016\045\017\046\020\050\001\002\000\006\030\uffdd\034" +
    "\uffdd\001\002\000\032\050\024\051\031\055\020\061\025" +
    "\065\011\071\017\073\013\075\030\102\103\103\033\104" +
    "\015\105\012\001\002\000\036\047\uffe5\050\uffe5\051\uffe5" +
    "\055\uffe5\061\uffe5\065\uffe5\071\uffe5\073\uffe5\075\uffe5\076" +
    "\uffe5\101\uffe5\103\uffe5\104\uffe5\105\uffe5\001\002\000\004" +
    "\051\136\001\002\000\022\004\112\005\116\006\114\007" +
    "\113\010\111\011\110\012\107\051\106\001\002\000\124" +
    "\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036" +
    "\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1" +
    "\045\uffc1\047\uffc1\050\uffc1\051\uffc1\055\uffc1\056\uffc1\057" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1" +
    "\066\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1\074" +
    "\uffc1\075\uffc1\076\uffc1\077\uffc1\101\uffc1\102\uffc1\103\uffc1" +
    "\104\uffc1\105\uffc1\001\002\000\124\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\047\uffbd\050" +
    "\uffbd\051\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd" +
    "\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070" +
    "\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd" +
    "\077\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd\105\uffbd\001" +
    "\002\000\124\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\044\uffbe\045\uffbe\047\uffbe\050\uffbe\051\uffbe\055\uffbe" +
    "\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064" +
    "\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe\072\uffbe" +
    "\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\101\uffbe\102" +
    "\uffbe\103\uffbe\104\uffbe\105\uffbe\001\002\000\124\030\uffbc" +
    "\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037" +
    "\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\055\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc" +
    "\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc\075" +
    "\uffbc\076\uffbc\077\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc" +
    "\105\uffbc\001\002\000\124\030\uffc0\031\uffc0\032\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\045\uffc0\047\uffc0\050\uffc0\051" +
    "\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0" +
    "\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0\071" +
    "\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0" +
    "\101\uffc0\102\uffc0\103\uffc0\104\uffc0\105\uffc0\001\002\000" +
    "\124\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\045\uffbf\047\uffbf\050\uffbf\051\uffbf\055\uffbf\056\uffbf" +
    "\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065" +
    "\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf" +
    "\074\uffbf\075\uffbf\076\uffbf\077\uffbf\101\uffbf\102\uffbf\103" +
    "\uffbf\104\uffbf\105\uffbf\001\002\000\124\030\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\047\uffc2" +
    "\050\uffc2\051\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061" +
    "\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2" +
    "\070\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076" +
    "\uffc2\077\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2" +
    "\001\002\000\124\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\035\133\036\132\037\127\040\130\041\131\042\134" +
    "\043\uffb8\044\uffb8\045\uffb8\047\uffb8\050\uffb8\051\uffb8\055" +
    "\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8" +
    "\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072" +
    "\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\101\uffb8" +
    "\102\uffb8\103\uffb8\104\uffb8\105\uffb8\001\002\000\124\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\047\uffc3\050\uffc3\051\uffc3\055\uffc3\056\uffc3\057\uffc3" +
    "\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066" +
    "\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3" +
    "\075\uffc3\076\uffc3\077\uffc3\101\uffc3\102\uffc3\103\uffc3\104" +
    "\uffc3\105\uffc3\001\002\000\012\033\122\043\123\044\120" +
    "\045\121\001\002\000\022\004\uffae\005\uffae\006\uffae\007" +
    "\uffae\010\uffae\011\uffae\012\uffae\051\uffae\001\002\000\022" +
    "\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012" +
    "\uffad\051\uffad\001\002\000\062\031\uffdf\047\uffdf\050\uffdf" +
    "\051\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\064" +
    "\uffdf\065\uffdf\070\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf" +
    "\075\uffdf\076\uffdf\077\uffdf\101\uffdf\102\uffdf\103\uffdf\104" +
    "\uffdf\105\uffdf\001\002\000\022\004\uffaf\005\uffaf\006\uffaf" +
    "\007\uffaf\010\uffaf\011\uffaf\012\uffaf\051\uffaf\001\002\000" +
    "\022\004\112\005\116\006\114\007\113\010\111\011\110" +
    "\012\107\051\106\001\002\000\110\030\uffb6\031\uffb6\032" +
    "\uffb6\033\uffb6\034\uffb6\043\uffb6\044\uffb6\045\uffb6\047\uffb6" +
    "\050\uffb6\051\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061" +
    "\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6" +
    "\070\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076" +
    "\uffb6\077\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6\105\uffb6" +
    "\001\002\000\022\004\112\005\116\006\114\007\113\010" +
    "\111\011\110\012\107\051\106\001\002\000\022\004\uffb3" +
    "\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\051" +
    "\uffb3\001\002\000\022\004\uffb2\005\uffb2\006\uffb2\007\uffb2" +
    "\010\uffb2\011\uffb2\012\uffb2\051\uffb2\001\002\000\022\004" +
    "\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1" +
    "\051\uffb1\001\002\000\022\004\uffb4\005\uffb4\006\uffb4\007" +
    "\uffb4\010\uffb4\011\uffb4\012\uffb4\051\uffb4\001\002\000\022" +
    "\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012" +
    "\uffb5\051\uffb5\001\002\000\022\004\uffb0\005\uffb0\006\uffb0" +
    "\007\uffb0\010\uffb0\011\uffb0\012\uffb0\051\uffb0\001\002\000" +
    "\110\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\043\uffb7" +
    "\044\uffb7\045\uffb7\047\uffb7\050\uffb7\051\uffb7\055\uffb7\056" +
    "\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7" +
    "\065\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7\073" +
    "\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\101\uffb7\102\uffb7" +
    "\103\uffb7\104\uffb7\105\uffb7\001\002\000\010\034\uffdb\052" +
    "\uffdb\054\uffdb\001\002\000\036\047\uffed\050\uffed\051\uffed" +
    "\055\uffed\061\uffed\065\uffed\071\uffed\073\uffed\075\uffed\076" +
    "\uffed\101\uffed\103\uffed\104\uffed\105\uffed\001\002\000\036" +
    "\047\uffef\050\uffef\051\uffef\055\uffef\061\uffef\065\uffef\071" +
    "\uffef\073\uffef\075\uffef\076\uffef\101\uffef\103\uffef\104\uffef" +
    "\105\uffef\001\002\000\036\047\uffee\050\uffee\051\uffee\055" +
    "\uffee\061\uffee\065\uffee\071\uffee\073\uffee\075\uffee\076\uffee" +
    "\101\uffee\103\uffee\104\uffee\105\uffee\001\002\000\004\027" +
    "\143\001\002\000\024\004\112\005\116\006\114\007\113" +
    "\010\111\011\110\012\107\030\144\051\106\001\002\000" +
    "\004\033\153\001\002\000\006\030\150\034\147\001\002" +
    "\000\014\030\uffda\034\uffda\043\123\044\120\045\121\001" +
    "\002\000\022\004\112\005\116\006\114\007\113\010\111" +
    "\011\110\012\107\051\106\001\002\000\004\033\151\001" +
    "\002\000\062\031\uffeb\047\uffeb\050\uffeb\051\uffeb\055\uffeb" +
    "\056\uffeb\057\uffeb\060\uffeb\061\uffeb\064\uffeb\065\uffeb\070" +
    "\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\075\uffeb\076\uffeb" +
    "\077\uffeb\101\uffeb\102\uffeb\103\uffeb\104\uffeb\105\uffeb\001" +
    "\002\000\014\030\uffd9\034\uffd9\043\123\044\120\045\121" +
    "\001\002\000\062\031\uffec\047\uffec\050\uffec\051\uffec\055" +
    "\uffec\056\uffec\057\uffec\060\uffec\061\uffec\064\uffec\065\uffec" +
    "\070\uffec\071\uffec\072\uffec\073\uffec\074\uffec\075\uffec\076" +
    "\uffec\077\uffec\101\uffec\102\uffec\103\uffec\104\uffec\105\uffec" +
    "\001\002\000\012\033\155\043\123\044\120\045\121\001" +
    "\002\000\062\031\uffc8\047\uffc8\050\uffc8\051\uffc8\055\uffc8" +
    "\056\uffc8\057\uffc8\060\uffc8\061\uffc8\064\uffc8\065\uffc8\070" +
    "\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8" +
    "\077\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8\001" +
    "\002\000\012\043\123\044\120\045\121\062\157\001\002" +
    "\000\004\031\160\001\002\000\022\004\112\005\116\006" +
    "\114\007\113\010\111\011\110\012\107\051\106\001\002" +
    "\000\010\031\162\056\164\064\163\001\002\000\022\004" +
    "\112\005\116\006\114\007\113\010\111\011\110\012\107" +
    "\051\106\001\002\000\062\031\uffc7\047\uffc7\050\uffc7\051" +
    "\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\064\uffc7" +
    "\065\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075" +
    "\uffc7\076\uffc7\077\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7" +
    "\105\uffc7\001\002\000\004\063\165\001\002\000\030\050" +
    "\024\051\031\055\020\061\025\065\011\071\017\073\013" +
    "\075\030\103\033\104\015\105\012\001\002\000\036\031" +
    "\uffc5\050\024\051\031\055\020\056\uffc5\061\025\064\uffc5" +
    "\065\011\071\017\073\013\075\030\103\033\104\015\105" +
    "\012\001\002\000\012\032\170\043\123\044\120\045\121" +
    "\001\002\000\004\063\171\001\002\000\030\050\024\051" +
    "\031\055\020\061\025\065\011\071\017\073\013\075\030" +
    "\103\033\104\015\105\012\001\002\000\036\031\uffc4\050" +
    "\024\051\031\055\020\056\uffc4\061\025\064\uffc4\065\011" +
    "\071\017\073\013\075\030\103\033\104\015\105\012\001" +
    "\002\000\012\032\174\043\123\044\120\045\121\001\002" +
    "\000\004\063\175\001\002\000\030\050\024\051\031\055" +
    "\020\061\025\065\011\071\017\073\013\075\030\103\033" +
    "\104\015\105\012\001\002\000\036\031\uffc6\050\024\051" +
    "\031\055\020\056\uffc6\061\025\064\uffc6\065\011\071\017" +
    "\073\013\075\030\103\033\104\015\105\012\001\002\000" +
    "\006\034\104\052\200\001\002\000\012\015\044\016\045" +
    "\017\046\020\050\001\002\000\004\053\202\001\002\000" +
    "\022\004\112\005\116\006\114\007\113\010\111\011\110" +
    "\012\107\051\106\001\002\000\012\033\204\043\123\044" +
    "\120\045\121\001\002\000\062\031\uffe0\047\uffe0\050\uffe0" +
    "\051\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\064" +
    "\uffe0\065\uffe0\070\uffe0\071\uffe0\072\uffe0\073\uffe0\074\uffe0" +
    "\075\uffe0\076\uffe0\077\uffe0\101\uffe0\102\uffe0\103\uffe0\104" +
    "\uffe0\105\uffe0\001\002\000\040\043\123\044\120\045\121" +
    "\050\024\051\031\055\020\061\025\063\207\065\011\071" +
    "\017\073\013\075\030\103\033\104\015\105\012\001\002" +
    "\000\034\050\024\051\031\055\020\056\213\060\214\061" +
    "\025\065\011\071\017\073\013\075\030\103\033\104\015" +
    "\105\012\001\002\000\030\050\024\051\031\055\020\061" +
    "\025\065\011\071\017\073\013\075\030\103\033\104\015" +
    "\105\012\001\002\000\032\050\024\051\031\055\020\057" +
    "\211\061\025\065\011\071\017\073\013\075\030\103\033" +
    "\104\015\105\012\001\002\000\062\031\uffd3\047\uffd3\050" +
    "\uffd3\051\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3" +
    "\064\uffd3\065\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074" +
    "\uffd3\075\uffd3\076\uffd3\077\uffd3\101\uffd3\102\uffd3\103\uffd3" +
    "\104\uffd3\105\uffd3\001\002\000\010\056\222\057\223\060" +
    "\224\001\002\000\030\050\024\051\031\055\020\061\025" +
    "\065\011\071\017\073\013\075\030\103\033\104\015\105" +
    "\012\001\002\000\022\004\112\005\116\006\114\007\113" +
    "\010\111\011\110\012\107\051\106\001\002\000\012\043" +
    "\123\044\120\045\121\063\216\001\002\000\030\050\024" +
    "\051\031\055\020\061\025\065\011\071\017\073\013\075" +
    "\030\103\033\104\015\105\012\001\002\000\036\050\024" +
    "\051\031\055\020\056\uffbb\057\uffbb\060\uffbb\061\025\065" +
    "\011\071\017\073\013\075\030\103\033\104\015\105\012" +
    "\001\002\000\032\050\024\051\031\055\020\057\221\061" +
    "\025\065\011\071\017\073\013\075\030\103\033\104\015" +
    "\105\012\001\002\000\062\031\uffd2\047\uffd2\050\uffd2\051" +
    "\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\064\uffd2" +
    "\065\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075" +
    "\uffd2\076\uffd2\077\uffd2\101\uffd2\102\uffd2\103\uffd2\104\uffd2" +
    "\105\uffd2\001\002\000\030\050\024\051\031\055\020\061" +
    "\025\065\011\071\017\073\013\075\030\103\033\104\015" +
    "\105\012\001\002\000\062\031\uffd1\047\uffd1\050\uffd1\051" +
    "\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\064\uffd1" +
    "\065\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\075" +
    "\uffd1\076\uffd1\077\uffd1\101\uffd1\102\uffd1\103\uffd1\104\uffd1" +
    "\105\uffd1\001\002\000\022\004\112\005\116\006\114\007" +
    "\113\010\111\011\110\012\107\051\106\001\002\000\012" +
    "\043\123\044\120\045\121\063\226\001\002\000\030\050" +
    "\024\051\031\055\020\061\025\065\011\071\017\073\013" +
    "\075\030\103\033\104\015\105\012\001\002\000\036\050" +
    "\024\051\031\055\020\056\uffba\057\uffba\060\uffba\061\025" +
    "\065\011\071\017\073\013\075\030\103\033\104\015\105" +
    "\012\001\002\000\036\050\024\051\031\055\020\056\uffb9" +
    "\057\uffb9\060\uffb9\061\025\065\011\071\017\073\013\075" +
    "\030\103\033\104\015\105\012\001\002\000\012\043\123" +
    "\044\120\045\121\062\232\001\002\000\032\050\024\051" +
    "\031\055\020\061\025\065\011\071\017\072\234\073\013" +
    "\075\030\103\033\104\015\105\012\001\002\000\032\050" +
    "\024\051\031\055\020\061\025\065\011\071\017\072\235" +
    "\073\013\075\030\103\033\104\015\105\012\001\002\000" +
    "\062\031\uffcb\047\uffcb\050\uffcb\051\uffcb\055\uffcb\056\uffcb" +
    "\057\uffcb\060\uffcb\061\uffcb\064\uffcb\065\uffcb\070\uffcb\071" +
    "\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb" +
    "\101\uffcb\102\uffcb\103\uffcb\104\uffcb\105\uffcb\001\002\000" +
    "\062\031\uffcc\047\uffcc\050\uffcc\051\uffcc\055\uffcc\056\uffcc" +
    "\057\uffcc\060\uffcc\061\uffcc\064\uffcc\065\uffcc\070\uffcc\071" +
    "\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc" +
    "\101\uffcc\102\uffcc\103\uffcc\104\uffcc\105\uffcc\001\002\000" +
    "\012\033\237\043\123\044\120\045\121\001\002\000\062" +
    "\031\uffe2\047\uffe2\050\uffe2\051\uffe2\055\uffe2\056\uffe2\057" +
    "\uffe2\060\uffe2\061\uffe2\064\uffe2\065\uffe2\070\uffe2\071\uffe2" +
    "\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2\101" +
    "\uffe2\102\uffe2\103\uffe2\104\uffe2\105\uffe2\001\002\000\036" +
    "\047\ufff1\050\ufff1\051\ufff1\055\ufff1\061\ufff1\065\ufff1\071" +
    "\ufff1\073\ufff1\075\ufff1\076\ufff1\101\ufff1\103\ufff1\104\ufff1" +
    "\105\ufff1\001\002\000\036\047\ufff6\050\ufff6\051\ufff6\055" +
    "\ufff6\061\ufff6\065\ufff6\071\ufff6\073\ufff6\075\ufff6\076\ufff6" +
    "\101\ufff6\103\ufff6\104\ufff6\105\ufff6\001\002\000\036\047" +
    "\ufff4\050\ufff4\051\ufff4\055\ufff4\061\ufff4\065\ufff4\071\ufff4" +
    "\073\ufff4\075\ufff4\076\ufff4\101\ufff4\103\ufff4\104\ufff4\105" +
    "\ufff4\001\002\000\036\047\ufff5\050\ufff5\051\ufff5\055\ufff5" +
    "\061\ufff5\065\ufff5\071\ufff5\073\ufff5\075\ufff5\076\ufff5\101" +
    "\ufff5\103\ufff5\104\ufff5\105\ufff5\001\002\000\036\047\ufff3" +
    "\050\ufff3\051\ufff3\055\ufff3\061\ufff3\065\ufff3\071\ufff3\073" +
    "\ufff3\075\ufff3\076\ufff3\101\ufff3\103\ufff3\104\ufff3\105\ufff3" +
    "\001\002\000\036\047\ufff7\050\ufff7\051\ufff7\055\ufff7\061" +
    "\ufff7\065\ufff7\071\ufff7\073\ufff7\075\ufff7\076\ufff7\101\ufff7" +
    "\103\ufff7\104\ufff7\105\ufff7\001\002\000\004\002\000\001" +
    "\002\000\036\047\ufff0\050\ufff0\051\ufff0\055\ufff0\061\ufff0" +
    "\065\ufff0\071\ufff0\073\ufff0\075\ufff0\076\ufff0\101\ufff0\103" +
    "\ufff0\104\ufff0\105\ufff0\001\002\000\036\047\ufff2\050\ufff2" +
    "\051\ufff2\055\ufff2\061\ufff2\065\ufff2\071\ufff2\073\ufff2\075" +
    "\ufff2\076\ufff2\101\ufff2\103\ufff2\104\ufff2\105\ufff2\001\002" +
    "\000\032\050\024\051\031\055\020\061\025\065\011\071" +
    "\017\073\013\074\254\075\030\103\033\104\015\105\012" +
    "\001\002\000\022\004\112\005\116\006\114\007\113\010" +
    "\111\011\110\012\107\051\106\001\002\000\070\031\uffc9" +
    "\043\123\044\120\045\121\047\uffc9\050\uffc9\051\uffc9\055" +
    "\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\064\uffc9\065\uffc9" +
    "\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076" +
    "\uffc9\077\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\105\uffc9" +
    "\001\002\000\022\004\112\005\116\006\114\007\113\010" +
    "\111\011\110\012\107\051\106\001\002\000\070\031\uffca" +
    "\043\123\044\120\045\121\047\uffca\050\uffca\051\uffca\055" +
    "\uffca\056\uffca\057\uffca\060\uffca\061\uffca\064\uffca\065\uffca" +
    "\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075\uffca\076" +
    "\uffca\077\uffca\101\uffca\102\uffca\103\uffca\104\uffca\105\uffca" +
    "\001\002\000\012\033\257\043\123\044\120\045\121\001" +
    "\002\000\062\031\uffe1\047\uffe1\050\uffe1\051\uffe1\055\uffe1" +
    "\056\uffe1\057\uffe1\060\uffe1\061\uffe1\064\uffe1\065\uffe1\070" +
    "\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1" +
    "\077\uffe1\101\uffe1\102\uffe1\103\uffe1\104\uffe1\105\uffe1\001" +
    "\002\000\004\054\261\001\002\000\022\004\112\005\116" +
    "\006\114\007\113\010\111\011\110\012\107\051\106\001" +
    "\002\000\012\043\123\044\120\045\121\066\263\001\002" +
    "\000\022\004\112\005\116\006\114\007\113\010\111\011" +
    "\110\012\107\051\106\001\002\000\014\043\123\044\120" +
    "\045\121\062\265\067\266\001\002\000\032\050\024\051" +
    "\031\055\020\061\025\065\011\070\275\071\017\073\013" +
    "\075\030\103\033\104\015\105\012\001\002\000\004\005" +
    "\267\001\002\000\004\062\270\001\002\000\032\050\024" +
    "\051\031\055\020\061\025\065\011\070\272\071\017\073" +
    "\013\075\030\103\033\104\015\105\012\001\002\000\032" +
    "\050\024\051\031\055\020\061\025\065\011\070\273\071" +
    "\017\073\013\075\030\103\033\104\015\105\012\001\002" +
    "\000\062\031\uffcd\047\uffcd\050\uffcd\051\uffcd\055\uffcd\056" +
    "\uffcd\057\uffcd\060\uffcd\061\uffcd\064\uffcd\065\uffcd\070\uffcd" +
    "\071\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd\077" +
    "\uffcd\101\uffcd\102\uffcd\103\uffcd\104\uffcd\105\uffcd\001\002" +
    "\000\062\031\uffce\047\uffce\050\uffce\051\uffce\055\uffce\056" +
    "\uffce\057\uffce\060\uffce\061\uffce\064\uffce\065\uffce\070\uffce" +
    "\071\uffce\072\uffce\073\uffce\074\uffce\075\uffce\076\uffce\077" +
    "\uffce\101\uffce\102\uffce\103\uffce\104\uffce\105\uffce\001\002" +
    "\000\032\050\024\051\031\055\020\061\025\065\011\070" +
    "\276\071\017\073\013\075\030\103\033\104\015\105\012" +
    "\001\002\000\062\031\uffcf\047\uffcf\050\uffcf\051\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\064\uffcf\065\uffcf" +
    "\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076" +
    "\uffcf\077\uffcf\101\uffcf\102\uffcf\103\uffcf\104\uffcf\105\uffcf" +
    "\001\002\000\062\031\uffd0\047\uffd0\050\uffd0\051\uffd0\055" +
    "\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\064\uffd0\065\uffd0" +
    "\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076" +
    "\uffd0\077\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\105\uffd0" +
    "\001\002\000\032\050\uffea\051\uffea\055\uffea\061\uffea\065" +
    "\uffea\071\uffea\073\uffea\075\uffea\100\301\103\uffea\104\uffea" +
    "\105\uffea\001\002\000\030\050\024\051\031\055\020\061" +
    "\025\065\011\071\017\073\013\075\030\103\033\104\015" +
    "\105\012\001\002\000\004\027\302\001\002\000\004\051" +
    "\055\001\002\000\006\030\304\034\057\001\002\000\030" +
    "\050\uffe8\051\uffe8\055\uffe8\061\uffe8\065\uffe8\071\uffe8\073" +
    "\uffe8\075\uffe8\103\uffe8\104\uffe8\105\uffe8\001\002\000\030" +
    "\050\024\051\031\055\020\061\025\065\011\071\017\073" +
    "\013\075\030\103\033\104\015\105\012\001\002\000\032" +
    "\050\024\051\031\055\020\061\025\065\011\071\017\073" +
    "\013\075\030\077\307\103\033\104\015\105\012\001\002" +
    "\000\036\047\uffe7\050\uffe7\051\uffe7\055\uffe7\061\uffe7\065" +
    "\uffe7\071\uffe7\073\uffe7\075\uffe7\076\uffe7\101\uffe7\103\uffe7" +
    "\104\uffe7\105\uffe7\001\002\000\032\050\024\051\031\055" +
    "\020\061\025\065\011\071\017\073\013\075\030\077\311" +
    "\103\033\104\015\105\012\001\002\000\036\047\uffe9\050" +
    "\uffe9\051\uffe9\055\uffe9\061\uffe9\065\uffe9\071\uffe9\073\uffe9" +
    "\075\uffe9\076\uffe9\101\uffe9\103\uffe9\104\uffe9\105\uffe9\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\004\003\003\001\001\000\002\001\001\000" +
    "\040\002\013\004\025\005\015\010\037\011\031\012\021" +
    "\016\006\020\022\021\036\022\033\023\020\024\035\025" +
    "\026\027\041\030\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\114\013\255\001\001\000\034\004\065\005\062\010\037" +
    "\011\066\012\021\014\250\016\006\020\022\021\036\022" +
    "\033\023\064\024\067\030\061\001\001\000\036\004\242" +
    "\005\240\010\037\011\244\012\021\016\006\020\022\021" +
    "\036\022\033\023\241\024\246\025\243\027\247\030\237" +
    "\001\001\000\006\006\114\013\235\001\001\000\002\001" +
    "\001\000\006\006\114\013\230\001\001\000\006\006\114" +
    "\013\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\176\001\001\000\006\006\114" +
    "\013\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\114\013\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\050\001\001\000\002\001\001\000\034\004" +
    "\065\005\062\010\037\011\066\012\021\014\101\016\006" +
    "\020\022\021\036\022\033\023\064\024\067\030\061\001" +
    "\001\000\002\001\001\000\004\026\053\001\001\000\002" +
    "\001\001\000\004\007\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\060\001\001\000\034\004\065" +
    "\005\062\010\037\011\066\012\021\014\063\016\006\020" +
    "\022\021\036\022\033\023\064\024\067\030\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\073\005" +
    "\071\010\037\011\074\012\021\016\006\020\022\021\036" +
    "\022\033\023\072\024\075\030\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\100\001\001\000\002\001\001\000" +
    "\032\004\073\005\071\010\037\011\074\012\021\016\006" +
    "\020\022\021\036\022\033\023\072\024\075\030\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\114" +
    "\013\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\125\001\001\000" +
    "\002\001\001\000\004\032\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\124\001\001\000\002\001\001\000\004\006\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\114\013\145\033\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\123\001\001\000\006\006\114" +
    "\013\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\123\001\001\000\002\001\001\000\004\032\123" +
    "\001\001\000\002\001\001\000\004\032\123\001\001\000" +
    "\004\017\160\001\001\000\006\006\114\013\172\001\001" +
    "\000\002\001\001\000\006\006\114\013\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\065\005\062" +
    "\010\037\011\066\012\021\014\165\016\006\020\022\021" +
    "\036\022\033\023\064\024\067\030\061\001\001\000\032" +
    "\004\073\005\071\010\037\011\074\012\021\016\006\020" +
    "\022\021\036\022\033\023\072\024\075\030\070\001\001" +
    "\000\004\032\123\001\001\000\002\001\001\000\034\004" +
    "\065\005\062\010\037\011\066\012\021\014\171\016\006" +
    "\020\022\021\036\022\033\023\064\024\067\030\061\001" +
    "\001\000\032\004\073\005\071\010\037\011\074\012\021" +
    "\016\006\020\022\021\036\022\033\023\072\024\075\030" +
    "\070\001\001\000\004\032\123\001\001\000\002\001\001" +
    "\000\034\004\065\005\062\010\037\011\066\012\021\014" +
    "\175\016\006\020\022\021\036\022\033\023\064\024\067" +
    "\030\061\001\001\000\032\004\073\005\071\010\037\011" +
    "\074\012\021\016\006\020\022\021\036\022\033\023\072" +
    "\024\075\030\070\001\001\000\002\001\001\000\004\007" +
    "\200\001\001\000\002\001\001\000\006\006\114\013\202" +
    "\001\001\000\004\032\123\001\001\000\002\001\001\000" +
    "\036\004\065\005\062\010\037\011\066\012\021\014\205" +
    "\016\006\020\022\021\036\022\033\023\064\024\067\030" +
    "\061\032\123\001\001\000\034\004\073\005\071\010\037" +
    "\011\074\012\021\015\211\016\006\020\022\021\036\022" +
    "\033\023\072\024\075\030\070\001\001\000\034\004\065" +
    "\005\062\010\037\011\066\012\021\014\207\016\006\020" +
    "\022\021\036\022\033\023\064\024\067\030\061\001\001" +
    "\000\032\004\073\005\071\010\037\011\074\012\021\016" +
    "\006\020\022\021\036\022\033\023\072\024\075\030\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\065\005\062\010\037\011\066\012\021\014\217\016\006" +
    "\020\022\021\036\022\033\023\064\024\067\030\061\001" +
    "\001\000\006\006\114\013\214\001\001\000\004\032\123" +
    "\001\001\000\034\004\065\005\062\010\037\011\066\012" +
    "\021\014\216\016\006\020\022\021\036\022\033\023\064" +
    "\024\067\030\061\001\001\000\032\004\073\005\071\010" +
    "\037\011\074\012\021\016\006\020\022\021\036\022\033" +
    "\023\072\024\075\030\070\001\001\000\032\004\073\005" +
    "\071\010\037\011\074\012\021\016\006\020\022\021\036" +
    "\022\033\023\072\024\075\030\070\001\001\000\002\001" +
    "\001\000\034\004\065\005\062\010\037\011\066\012\021" +
    "\014\227\016\006\020\022\021\036\022\033\023\064\024" +
    "\067\030\061\001\001\000\002\001\001\000\006\006\114" +
    "\013\224\001\001\000\004\032\123\001\001\000\034\004" +
    "\065\005\062\010\037\011\066\012\021\014\226\016\006" +
    "\020\022\021\036\022\033\023\064\024\067\030\061\001" +
    "\001\000\032\004\073\005\071\010\037\011\074\012\021" +
    "\016\006\020\022\021\036\022\033\023\072\024\075\030" +
    "\070\001\001\000\032\004\073\005\071\010\037\011\074" +
    "\012\021\016\006\020\022\021\036\022\033\023\072\024" +
    "\075\030\070\001\001\000\004\032\123\001\001\000\034" +
    "\004\065\005\062\010\037\011\066\012\021\014\232\016" +
    "\006\020\022\021\036\022\033\023\064\024\067\030\061" +
    "\001\001\000\032\004\073\005\071\010\037\011\074\012" +
    "\021\016\006\020\022\021\036\022\033\023\072\024\075" +
    "\030\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\073\005\071\010" +
    "\037\011\074\012\021\016\006\020\022\021\036\022\033" +
    "\023\072\024\075\030\070\001\001\000\006\006\114\013" +
    "\252\001\001\000\004\032\123\001\001\000\006\006\114" +
    "\013\254\001\001\000\004\032\123\001\001\000\004\032" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\114\013\261\001\001\000\004\032\123\001\001\000" +
    "\006\006\114\013\263\001\001\000\004\032\123\001\001" +
    "\000\034\004\065\005\062\010\037\011\066\012\021\014" +
    "\273\016\006\020\022\021\036\022\033\023\064\024\067" +
    "\030\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\004\065\005\062\010\037\011\066\012\021\014\270" +
    "\016\006\020\022\021\036\022\033\023\064\024\067\030" +
    "\061\001\001\000\032\004\073\005\071\010\037\011\074" +
    "\012\021\016\006\020\022\021\036\022\033\023\072\024" +
    "\075\030\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\004\073\005\071\010\037\011\074\012\021\016" +
    "\006\020\022\021\036\022\033\023\072\024\075\030\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\277\001\001\000\034\004\065\005\062\010\037\011\066" +
    "\012\021\014\307\016\006\020\022\021\036\022\033\023" +
    "\064\024\067\030\061\001\001\000\002\001\001\000\004" +
    "\026\302\001\001\000\002\001\001\000\004\035\304\001" +
    "\001\000\034\004\065\005\062\010\037\011\066\012\021" +
    "\014\305\016\006\020\022\021\036\022\033\023\064\024" +
    "\067\030\061\001\001\000\032\004\073\005\071\010\037" +
    "\011\074\012\021\016\006\020\022\021\036\022\033\023" +
    "\072\024\075\030\070\001\001\000\002\001\001\000\032" +
    "\004\073\005\071\010\037\011\074\012\021\016\006\020" +
    "\022\021\036\022\033\023\072\024\075\030\070\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Variable que guarda el código python
    public String txtPython = "";
    String auxP = "";

    //Método al que se llama automáticamente ante algún error sintactico. 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
            claseErrores datos = new claseErrores(String.valueOf(s.value), "Error sintáctico", "eliminar entrada incorrecta",s.left,s.right);
            Analizador_Lexico.TError.add(datos);
    } 
    
    //Método al que se llama en el momento en que ya no es posible una recuperación de errores. 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
            claseErrores datos = new claseErrores("Null", "Error sintáctico", "eliminar entrada incorrecta",s.left,s.right);
            Analizador_Lexico.TError.add(datos);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$A_sintactico$actions {
  private final A_sintactico parser;

  /** Constructor */
  CUP$A_sintactico$actions(A_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$A_sintactico$do_action_part00000000(
    int                        CUP$A_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_sintactico$parser,
    java.util.Stack            CUP$A_sintactico$stack,
    int                        CUP$A_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$A_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$A_sintactico$parser.done_parsing();
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= inicio cuerpo fin 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpo ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpo ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpo ::= CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo ::= RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo ::= METODO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo ::= FUNCION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo ::= LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo ::= cuerpo CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo ::= cuerpo DECLARACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo ::= cuerpo ASIGNACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo ::= cuerpo RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo ::= cuerpo METODO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cuerpo ::= cuerpo FUNCION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpo ::= cuerpo LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cuerpo ::= cuerpo IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cuerpo ::= error puntoComa 
            {
              Object RESULT =null;
		System.out.println("Se espera punto y coma");
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cuerpo ::= error asignacion 
            {
              Object RESULT =null;
		System.out.println("Se espera ->");
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cuerpo ::= error Coma 
            {
              Object RESULT =null;
		System.out.println("Se espera coma");
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LLAMADA ::= ejecutar id abrir_par cerrar_par puntoComa 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		txtPython+= String.valueOf(idd)+"()\n"; System.out.println(txtPython);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",22, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LLAMADA ::= ejecutar id abrir_par LEJC cerrar_par puntoComa 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		txtPython+= String.valueOf(idd)+"("+auxP+")\n"; System.out.println(txtPython); auxP="";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",22, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$0 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
txtPython+="def "+String.valueOf(idd)+"\n\t"; System.out.println(txtPython); auxP="";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",26, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // METODO ::= metodo id NT$0 INSTRUCCIONES Finmetodo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$1 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
txtPython+="def "+String.valueOf(idd)+"("+auxP+")\n\t"; System.out.println(txtPython); auxP="";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",27, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // METODO ::= metodo id con_parametros abrir_par LISTAP cerrar_par NT$1 INSTRUCCIONES Finmetodo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$2 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
txtPython+="def "+String.valueOf(idd)+"\n\t"; System.out.println(txtPython); auxP="";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",28, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCION ::= funcion id TIPODATO NT$2 INSTRUCCIONES Finfuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$3 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).value;
txtPython+="def "+String.valueOf(idd)+"("+auxP+")\n\t"; System.out.println(txtPython); auxP="";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",29, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCION ::= funcion id TIPODATO con_parametros abrir_par LISTAP cerrar_par NT$3 INSTRUCCIONES Finfuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IMPRESION ::= imprimir CONDICION puntoComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		txtPython+="print("+String.valueOf(b)+")\n"; System.out.println(txtPython);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",18, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IMPRESION ::= imprimir_nl CONDICION puntoComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		txtPython+="print("+String.valueOf(b)+"\\n)\n"; System.out.println(txtPython);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",18, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Ringresar LISTA Rcomo TIPODATO RCon_valor CONDICION puntoComa 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGNACION ::= LISTA asignacion CONDICION puntoComa 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTAP ::= id TIPODATO 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		auxP+=String.valueOf(idd);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAP",20, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTAP ::= LISTAP Coma id TIPODATO 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		auxP+=","+String.valueOf(idd);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAP",20, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTA ::= id 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LISTA ::= LISTA Coma id 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LEJC ::= CONDICION 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		auxP+=b.toString();
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LEJC",25, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LEJC ::= LEJC Coma CONDICION 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		auxP+=","+b.toString();
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LEJC",25, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONDICIONALES ::= IF 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONDICIONALES ::= SEGUN 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONDICIONALES ::= PARA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONDICIONALES ::= MIENTRAS 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONDICIONALES ::= REPETIR 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF ::= condSi CONDICION entonces INSTRUCCIONES finSi 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IF",8, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF ::= condSi CONDICION INSTRUCCIONES contrario INSTRUCCIONES finSi 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IF",8, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF ::= condSi CONDICION INSTRUCCIONES BLOQUE finSi 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IF",8, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PARA ::= para id asignacion CONDICION hasta CONDICION hacer INSTRUCCIONES finPara 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",14, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PARA ::= para id asignacion CONDICION hasta CONDICION hacer finPara 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",14, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PARA ::= para id asignacion CONDICION hasta CONDICION incremento digitoEntero hacer INSTRUCCIONES finPara 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",14, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PARA ::= para id asignacion CONDICION hasta CONDICION incremento digitoEntero hacer finPara 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",14, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MIENTRAS ::= mientras CONDICION hacer INSTRUCCIONES finMientras 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",15, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MIENTRAS ::= mientras CONDICION hacer finMientras 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",15, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // REPETIR ::= repetir INSTRUCCIONES hastaQue CONDICION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",16, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // REPETIR ::= repetir hastaQue CONDICION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",16, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RETORNO ::= retornar CONDICION puntoComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		txtPython+="return "+String.valueOf(b)+"\n"; System.out.println(txtPython);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",17, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SEGUN ::= segun CONDICION hacer CASE finSegun 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",12, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CASE ::= aitr CONDICION citr entonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASE ::= CASE contrario entonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CASE ::= CASE aitr CONDICION citr entonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= digitoEntero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= digitoDecimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= Cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= caracter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= Rtrue 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= Rfalse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= caracterAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BLOQUE ::= OSi CONDICION entonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BLOQUE ::= BLOQUE OSi CONDICION entonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BLOQUE ::= BLOQUE contrario INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONDICION ::= EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONDICION ::= EXPRESION OP EXPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONDICION ::= CONDICION OPL EXPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP ::= mayor 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP ::= menor 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP ::= mayorIgual 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP ::= menorIgual 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP ::= igual 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP ::= diferente 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPL ::= or 
            {
              Object RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=opl;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OPL",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPL ::= and 
            {
              Object RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=opl;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OPL",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPL ::= not 
            {
              Object RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=opl;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OPL",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INSTRUCCIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INSTRUCCIONES ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INSTRUCCIONES ::= CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INSTRUCCIONES ::= LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INSTRUCCIONES ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INSTRUCCIONES ::= RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INSTRUCCIONES ::= INSTRUCCIONES RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INSTRUCCIONES ::= INSTRUCCIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INSTRUCCIONES ::= INSTRUCCIONES ASIGNACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INSTRUCCIONES ::= INSTRUCCIONES CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INSTRUCCIONES ::= INSTRUCCIONES LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INSTRUCCIONES ::= INSTRUCCIONES IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TIPODATO ::= Rnumero 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=td;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TIPODATO ::= Rcadena 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=td;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TIPODATO ::= Rboolean 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=td;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TIPODATO ::= Rcaracter 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=td;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$A_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$A_sintactico$do_action(
    int                        CUP$A_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_sintactico$parser,
    java.util.Stack            CUP$A_sintactico$stack,
    int                        CUP$A_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$A_sintactico$do_action_part00000000(
                               CUP$A_sintactico$act_num,
                               CUP$A_sintactico$parser,
                               CUP$A_sintactico$stack,
                               CUP$A_sintactico$top);
    }
}

}
