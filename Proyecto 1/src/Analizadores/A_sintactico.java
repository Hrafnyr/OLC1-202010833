
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class A_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public A_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public A_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public A_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\003\005\000\002\002" +
    "\004\000\002\002\004\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\004\000\002" +
    "\002\004\000\002\002\005\000\002\002\005\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\004\000\002\032\007\000\002\032\010\000" +
    "\002\027\006\000\002\027\012\000\002\031\007\000\002" +
    "\031\010\000\002\031\013\000\002\031\014\000\002\026" +
    "\005\000\002\026\005\000\002\005\010\000\002\004\005" +
    "\000\002\030\004\000\002\030\006\000\002\010\003\000" +
    "\002\010\005\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\012" +
    "\007\000\002\012\010\000\002\012\011\000\002\021\013" +
    "\000\002\021\012\000\002\021\015\000\002\021\014\000" +
    "\002\023\007\000\002\023\006\000\002\024\006\000\002" +
    "\024\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\016\007\000\002\020\007\000" +
    "\002\020\006\000\002\020\010\000\002\017\003\000\002" +
    "\017\003\000\002\006\005\000\002\015\006\000\002\015" +
    "\007\000\002\015\006\000\002\013\005\000\002\014\004" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\004\041\005\001\002\000\004\002\272\001" +
    "\002\000\036\005\006\045\025\046\032\052\021\056\026" +
    "\062\012\066\020\070\014\072\031\073\007\076\042\100" +
    "\034\101\017\102\013\001\002\000\004\014\115\001\002" +
    "\000\004\046\261\001\002\000\040\005\uffdc\042\uffdc\045" +
    "\uffdc\046\uffdc\052\uffdc\056\uffdc\062\uffdc\066\uffdc\070\uffdc" +
    "\072\uffdc\073\uffdc\076\uffdc\100\uffdc\101\uffdc\102\uffdc\001" +
    "\002\000\040\005\ufff8\042\ufff8\045\ufff8\046\ufff8\052\ufff8" +
    "\056\ufff8\062\ufff8\066\ufff8\070\ufff8\072\ufff8\073\ufff8\076" +
    "\ufff8\100\ufff8\101\ufff8\102\ufff8\001\002\000\004\046\237" +
    "\001\002\000\004\005\006\001\002\000\006\004\054\071" +
    "\231\001\002\000\040\005\006\042\222\045\025\046\032" +
    "\052\021\056\026\062\012\066\020\070\014\072\031\073" +
    "\007\076\042\100\034\101\017\102\013\001\002\000\004" +
    "\026\213\001\002\000\004\005\006\001\002\000\004\046" +
    "\113\001\002\000\004\046\113\001\002\000\040\005\ufffb" +
    "\042\ufffb\045\ufffb\046\ufffb\052\ufffb\056\ufffb\062\ufffb\066" +
    "\ufffb\070\ufffb\072\ufffb\073\ufffb\076\ufffb\100\ufffb\101\ufffb" +
    "\102\ufffb\001\002\000\040\005\uffdd\042\uffdd\045\uffdd\046" +
    "\uffdd\052\uffdd\056\uffdd\062\uffdd\066\uffdd\070\uffdd\072\uffdd" +
    "\073\uffdd\076\uffdd\100\uffdd\101\uffdd\102\uffdd\001\002\000" +
    "\040\005\uffdb\042\uffdb\045\uffdb\046\uffdb\052\uffdb\056\uffdb" +
    "\062\uffdb\066\uffdb\070\uffdb\072\uffdb\073\uffdb\076\uffdb\100" +
    "\uffdb\101\uffdb\102\uffdb\001\002\000\004\046\032\001\002" +
    "\000\006\005\006\046\130\001\002\000\004\026\125\001" +
    "\002\000\040\005\ufffa\042\ufffa\045\ufffa\046\ufffa\052\ufffa" +
    "\056\ufffa\062\ufffa\066\ufffa\070\ufffa\072\ufffa\073\ufffa\076" +
    "\ufffa\100\ufffa\101\ufffa\102\ufffa\001\002\000\010\005\114" +
    "\006\111\046\113\001\002\000\010\027\uffdf\047\uffdf\051" +
    "\uffdf\001\002\000\040\005\ufffd\042\ufffd\045\ufffd\046\ufffd" +
    "\052\ufffd\056\ufffd\062\ufffd\066\ufffd\070\ufffd\072\ufffd\073" +
    "\ufffd\076\ufffd\100\ufffd\101\ufffd\102\ufffd\001\002\000\004" +
    "\046\101\001\002\000\040\005\uffd9\042\uffd9\045\uffd9\046" +
    "\uffd9\052\uffd9\056\uffd9\062\uffd9\066\uffd9\070\uffd9\072\uffd9" +
    "\073\uffd9\076\uffd9\100\uffd9\101\uffd9\102\uffd9\001\002\000" +
    "\040\005\ufff7\042\ufff7\045\ufff7\046\ufff7\052\ufff7\056\ufff7" +
    "\062\ufff7\066\ufff7\070\ufff7\072\ufff7\073\ufff7\076\ufff7\100" +
    "\ufff7\101\ufff7\102\ufff7\001\002\000\006\027\075\051\076" +
    "\001\002\000\040\005\uffda\042\uffda\045\uffda\046\uffda\052" +
    "\uffda\056\uffda\062\uffda\066\uffda\070\uffda\072\uffda\073\uffda" +
    "\076\uffda\100\uffda\101\uffda\102\uffda\001\002\000\040\005" +
    "\ufffc\042\ufffc\045\ufffc\046\ufffc\052\ufffc\056\ufffc\062\ufffc" +
    "\066\ufffc\070\ufffc\072\ufffc\073\ufffc\076\ufffc\100\ufffc\101" +
    "\ufffc\102\ufffc\001\002\000\004\046\044\001\002\000\040" +
    "\005\ufff9\042\ufff9\045\ufff9\046\ufff9\052\ufff9\056\ufff9\062" +
    "\ufff9\066\ufff9\070\ufff9\072\ufff9\073\ufff9\076\ufff9\100\ufff9" +
    "\101\ufff9\102\ufff9\001\002\000\012\010\045\011\046\012" +
    "\047\013\051\001\002\000\014\004\uffba\023\uffba\027\uffba" +
    "\050\uffba\075\uffba\001\002\000\014\004\uffb9\023\uffb9\027" +
    "\uffb9\050\uffb9\075\uffb9\001\002\000\014\004\uffb8\023\uffb8" +
    "\027\uffb8\050\uffb8\075\uffb8\001\002\000\006\004\054\075" +
    "\053\001\002\000\014\004\uffb7\023\uffb7\027\uffb7\050\uffb7" +
    "\075\uffb7\001\002\000\006\072\031\077\073\001\002\000" +
    "\004\022\056\001\002\000\004\026\055\001\002\000\030" +
    "\024\uffbb\053\uffbb\054\uffbb\055\uffbb\061\uffbb\065\uffbb\067" +
    "\uffbb\071\uffbb\072\uffbb\074\uffbb\077\uffbb\001\002\000\004" +
    "\046\060\001\002\000\006\023\063\027\062\001\002\000" +
    "\012\010\045\011\046\012\047\013\051\001\002\000\006" +
    "\023\uffe1\027\uffe1\001\002\000\004\046\070\001\002\000" +
    "\004\004\054\001\002\000\006\072\031\077\066\001\002" +
    "\000\004\077\067\001\002\000\040\005\uffe7\042\uffe7\045" +
    "\uffe7\046\uffe7\052\uffe7\056\uffe7\062\uffe7\066\uffe7\070\uffe7" +
    "\072\uffe7\073\uffe7\076\uffe7\100\uffe7\101\uffe7\102\uffe7\001" +
    "\002\000\040\005\uffe6\042\uffe6\045\uffe6\046\uffe6\052\uffe6" +
    "\056\uffe6\062\uffe6\066\uffe6\070\uffe6\072\uffe6\073\uffe6\076" +
    "\uffe6\100\uffe6\101\uffe6\102\uffe6\001\002\000\012\010\045" +
    "\011\046\012\047\013\051\001\002\000\006\023\uffe0\027" +
    "\uffe0\001\002\000\004\077\074\001\002\000\040\005\uffe9" +
    "\042\uffe9\045\uffe9\046\uffe9\052\uffe9\056\uffe9\062\uffe9\066" +
    "\uffe9\070\uffe9\072\uffe9\073\uffe9\076\uffe9\100\uffe9\101\uffe9" +
    "\102\uffe9\001\002\000\040\005\uffe8\042\uffe8\045\uffe8\046" +
    "\uffe8\052\uffe8\056\uffe8\062\uffe8\066\uffe8\070\uffe8\072\uffe8" +
    "\073\uffe8\076\uffe8\100\uffe8\101\uffe8\102\uffe8\001\002\000" +
    "\004\046\100\001\002\000\004\005\006\001\002\000\004" +
    "\026\uffe2\001\002\000\010\027\uffde\047\uffde\051\uffde\001" +
    "\002\000\004\022\102\001\002\000\006\023\104\046\060" +
    "\001\002\000\006\023\106\027\062\001\002\000\004\026" +
    "\105\001\002\000\040\005\uffed\042\uffed\045\uffed\046\uffed" +
    "\052\uffed\056\uffed\062\uffed\066\uffed\070\uffed\072\uffed\073" +
    "\uffed\076\uffed\100\uffed\101\uffed\102\uffed\001\002\000\004" +
    "\026\107\001\002\000\040\005\uffec\042\uffec\045\uffec\046" +
    "\uffec\052\uffec\056\uffec\062\uffec\066\uffec\070\uffec\072\uffec" +
    "\073\uffec\076\uffec\100\uffec\101\uffec\102\uffec\001\002\000" +
    "\004\026\124\001\002\000\004\026\123\001\002\000\004" +
    "\026\122\001\002\000\004\034\120\001\002\000\006\014" +
    "\115\026\116\001\002\000\004\005\117\001\002\000\042" +
    "\005\uffcb\042\uffcb\045\uffcb\046\uffcb\052\uffcb\056\uffcb\062" +
    "\uffcb\066\uffcb\070\uffcb\072\uffcb\073\uffcb\076\uffcb\077\uffcb" +
    "\100\uffcb\101\uffcb\102\uffcb\001\002\000\052\005\uffc0\025" +
    "\uffc0\026\uffc0\042\uffc0\045\uffc0\046\uffc0\052\uffc0\056\uffc0" +
    "\057\uffc0\062\uffc0\063\uffc0\064\uffc0\066\uffc0\070\uffc0\072" +
    "\uffc0\073\uffc0\076\uffc0\100\uffc0\101\uffc0\102\uffc0\001\002" +
    "\000\004\046\121\001\002\000\050\004\uffbc\005\uffbc\026" +
    "\uffbc\042\uffbc\045\uffbc\046\uffbc\052\uffbc\056\uffbc\057\uffbc" +
    "\060\uffbc\062\uffbc\066\uffbc\070\uffbc\072\uffbc\073\uffbc\076" +
    "\uffbc\100\uffbc\101\uffbc\102\uffbc\001\002\000\042\005\uffcd" +
    "\042\uffcd\045\uffcd\046\uffcd\052\uffcd\056\uffcd\062\uffcd\066" +
    "\uffcd\070\uffcd\072\uffcd\073\uffcd\076\uffcd\077\uffcd\100\uffcd" +
    "\101\uffcd\102\uffcd\001\002\000\042\005\uffca\042\uffca\045" +
    "\uffca\046\uffca\052\uffca\056\uffca\062\uffca\066\uffca\070\uffca" +
    "\072\uffca\073\uffca\076\uffca\077\uffca\100\uffca\101\uffca\102" +
    "\uffca\001\002\000\042\005\uffcc\042\uffcc\045\uffcc\046\uffcc" +
    "\052\uffcc\056\uffcc\062\uffcc\066\uffcc\070\uffcc\072\uffcc\073" +
    "\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc\102\uffcc\001\002" +
    "\000\040\005\ufffe\042\ufffe\045\ufffe\046\ufffe\052\ufffe\056" +
    "\ufffe\062\ufffe\066\ufffe\070\ufffe\072\ufffe\073\ufffe\076\ufffe" +
    "\100\ufffe\101\ufffe\102\ufffe\001\002\000\004\057\131\001" +
    "\002\000\006\025\uffc1\057\uffc1\001\002\000\006\025\uffc2" +
    "\057\uffc2\001\002\000\004\024\132\001\002\000\006\005" +
    "\006\046\130\001\002\000\010\024\134\053\135\061\136" +
    "\001\002\000\006\005\006\046\130\001\002\000\004\060" +
    "\137\001\002\000\040\005\uffc6\042\uffc6\045\uffc6\046\uffc6" +
    "\052\uffc6\056\uffc6\062\uffc6\066\uffc6\070\uffc6\072\uffc6\073" +
    "\uffc6\076\uffc6\100\uffc6\101\uffc6\102\uffc6\001\002\000\004" +
    "\004\054\001\002\000\010\024\uffc4\053\uffc4\061\uffc4\001" +
    "\002\000\004\025\142\001\002\000\004\060\143\001\002" +
    "\000\004\004\054\001\002\000\010\024\uffc3\053\uffc3\061" +
    "\uffc3\001\002\000\004\025\146\001\002\000\004\060\147" +
    "\001\002\000\004\004\054\001\002\000\010\024\uffc5\053" +
    "\uffc5\061\uffc5\001\002\000\006\027\075\047\152\001\002" +
    "\000\012\010\045\011\046\012\047\013\051\001\002\000" +
    "\004\050\154\001\002\000\004\005\006\001\002\000\004" +
    "\026\uffe3\001\002\000\006\004\054\060\160\001\002\000" +
    "\006\053\163\055\165\001\002\000\004\004\054\001\002" +
    "\000\004\054\162\001\002\000\040\005\uffd8\042\uffd8\045" +
    "\uffd8\046\uffd8\052\uffd8\056\uffd8\062\uffd8\066\uffd8\070\uffd8" +
    "\072\uffd8\073\uffd8\076\uffd8\100\uffd8\101\uffd8\102\uffd8\001" +
    "\002\000\004\004\054\001\002\000\006\053\171\055\172" +
    "\001\002\000\004\046\113\001\002\000\004\060\167\001" +
    "\002\000\004\004\054\001\002\000\006\053\uffbf\055\uffbf" +
    "\001\002\000\006\004\054\060\177\001\002\000\004\046" +
    "\113\001\002\000\004\060\174\001\002\000\004\004\054" +
    "\001\002\000\006\053\uffbe\055\uffbe\001\002\000\004\054" +
    "\201\001\002\000\004\004\054\001\002\000\006\053\uffbd" +
    "\055\uffbd\001\002\000\040\005\uffd6\042\uffd6\045\uffd6\046" +
    "\uffd6\052\uffd6\056\uffd6\062\uffd6\066\uffd6\070\uffd6\072\uffd6" +
    "\073\uffd6\076\uffd6\100\uffd6\101\uffd6\102\uffd6\001\002\000" +
    "\004\054\203\001\002\000\040\005\uffd7\042\uffd7\045\uffd7" +
    "\046\uffd7\052\uffd7\056\uffd7\062\uffd7\066\uffd7\070\uffd7\072" +
    "\uffd7\073\uffd7\076\uffd7\100\uffd7\101\uffd7\102\uffd7\001\002" +
    "\000\004\057\205\001\002\000\006\004\054\067\206\001" +
    "\002\000\040\005\uffd0\042\uffd0\045\uffd0\046\uffd0\052\uffd0" +
    "\056\uffd0\062\uffd0\066\uffd0\070\uffd0\072\uffd0\073\uffd0\076" +
    "\uffd0\100\uffd0\101\uffd0\102\uffd0\001\002\000\004\067\210" +
    "\001\002\000\040\005\uffd1\042\uffd1\045\uffd1\046\uffd1\052" +
    "\uffd1\056\uffd1\062\uffd1\066\uffd1\070\uffd1\072\uffd1\073\uffd1" +
    "\076\uffd1\100\uffd1\101\uffd1\102\uffd1\001\002\000\004\026" +
    "\212\001\002\000\040\005\uffe5\042\uffe5\045\uffe5\046\uffe5" +
    "\052\uffe5\056\uffe5\062\uffe5\066\uffe5\070\uffe5\072\uffe5\073" +
    "\uffe5\076\uffe5\100\uffe5\101\uffe5\102\uffe5\001\002\000\040" +
    "\005\uffff\042\uffff\045\uffff\046\uffff\052\uffff\056\uffff\062" +
    "\uffff\066\uffff\070\uffff\072\uffff\073\uffff\076\uffff\100\uffff" +
    "\101\uffff\102\uffff\001\002\000\040\005\uffef\042\uffef\045" +
    "\uffef\046\uffef\052\uffef\056\uffef\062\uffef\066\uffef\070\uffef" +
    "\072\uffef\073\uffef\076\uffef\100\uffef\101\uffef\102\uffef\001" +
    "\002\000\004\026\227\001\002\000\040\005\ufff2\042\ufff2" +
    "\045\ufff2\046\ufff2\052\ufff2\056\ufff2\062\ufff2\066\ufff2\070" +
    "\ufff2\072\ufff2\073\ufff2\076\ufff2\100\ufff2\101\ufff2\102\ufff2" +
    "\001\002\000\040\005\ufff1\042\ufff1\045\ufff1\046\ufff1\052" +
    "\ufff1\056\ufff1\062\ufff1\066\ufff1\070\ufff1\072\ufff1\073\ufff1" +
    "\076\ufff1\100\ufff1\101\ufff1\102\ufff1\001\002\000\004\026" +
    "\226\001\002\000\040\005\ufff5\042\ufff5\045\ufff5\046\ufff5" +
    "\052\ufff5\056\ufff5\062\ufff5\066\ufff5\070\ufff5\072\ufff5\073" +
    "\ufff5\076\ufff5\100\ufff5\101\ufff5\102\ufff5\001\002\000\004" +
    "\002\000\001\002\000\040\005\uffee\042\uffee\045\uffee\046" +
    "\uffee\052\uffee\056\uffee\062\uffee\066\uffee\070\uffee\072\uffee" +
    "\073\uffee\076\uffee\100\uffee\101\uffee\102\uffee\001\002\000" +
    "\040\005\ufff6\042\ufff6\045\ufff6\046\ufff6\052\ufff6\056\ufff6" +
    "\062\ufff6\066\ufff6\070\ufff6\072\ufff6\073\ufff6\076\ufff6\100" +
    "\ufff6\101\ufff6\102\ufff6\001\002\000\040\005\ufff0\042\ufff0" +
    "\045\ufff0\046\ufff0\052\ufff0\056\ufff0\062\ufff0\066\ufff0\070" +
    "\ufff0\072\ufff0\073\ufff0\076\ufff0\100\ufff0\101\ufff0\102\ufff0" +
    "\001\002\000\040\005\ufff3\042\ufff3\045\ufff3\046\ufff3\052" +
    "\ufff3\056\ufff3\062\ufff3\066\ufff3\070\ufff3\072\ufff3\073\ufff3" +
    "\076\ufff3\100\ufff3\101\ufff3\102\ufff3\001\002\000\040\005" +
    "\ufff4\042\ufff4\045\ufff4\046\ufff4\052\ufff4\056\ufff4\062\ufff4" +
    "\066\ufff4\070\ufff4\072\ufff4\073\ufff4\076\ufff4\100\ufff4\101" +
    "\ufff4\102\ufff4\001\002\000\004\071\233\001\002\000\004" +
    "\046\113\001\002\000\040\005\uffce\042\uffce\045\uffce\046" +
    "\uffce\052\uffce\056\uffce\062\uffce\066\uffce\070\uffce\072\uffce" +
    "\073\uffce\076\uffce\100\uffce\101\uffce\102\uffce\001\002\000" +
    "\004\046\113\001\002\000\040\005\uffcf\042\uffcf\045\uffcf" +
    "\046\uffcf\052\uffcf\056\uffcf\062\uffcf\066\uffcf\070\uffcf\072" +
    "\uffcf\073\uffcf\076\uffcf\100\uffcf\101\uffcf\102\uffcf\001\002" +
    "\000\004\026\236\001\002\000\040\005\uffe4\042\uffe4\045" +
    "\uffe4\046\uffe4\052\uffe4\056\uffe4\062\uffe4\066\uffe4\070\uffe4" +
    "\072\uffe4\073\uffe4\076\uffe4\100\uffe4\101\uffe4\102\uffe4\001" +
    "\002\000\004\051\240\001\002\000\006\005\244\046\242" +
    "\001\002\000\010\057\uffc7\063\uffc7\064\uffc7\001\002\000" +
    "\010\057\uffc9\063\uffc9\064\uffc9\001\002\000\004\063\245" +
    "\001\002\000\012\014\115\057\uffc8\063\uffc8\064\uffc8\001" +
    "\002\000\006\005\244\046\242\001\002\000\006\057\247" +
    "\064\250\001\002\000\006\004\054\065\257\001\002\000" +
    "\004\005\251\001\002\000\004\057\252\001\002\000\006" +
    "\004\054\065\254\001\002\000\004\065\255\001\002\000" +
    "\040\005\uffd2\042\uffd2\045\uffd2\046\uffd2\052\uffd2\056\uffd2" +
    "\062\uffd2\066\uffd2\070\uffd2\072\uffd2\073\uffd2\076\uffd2\100" +
    "\uffd2\101\uffd2\102\uffd2\001\002\000\040\005\uffd3\042\uffd3" +
    "\045\uffd3\046\uffd3\052\uffd3\056\uffd3\062\uffd3\066\uffd3\070" +
    "\uffd3\072\uffd3\073\uffd3\076\uffd3\100\uffd3\101\uffd3\102\uffd3" +
    "\001\002\000\004\065\260\001\002\000\040\005\uffd4\042" +
    "\uffd4\045\uffd4\046\uffd4\052\uffd4\056\uffd4\062\uffd4\066\uffd4" +
    "\070\uffd4\072\uffd4\073\uffd4\076\uffd4\100\uffd4\101\uffd4\102" +
    "\uffd4\001\002\000\040\005\uffd5\042\uffd5\045\uffd5\046\uffd5" +
    "\052\uffd5\056\uffd5\062\uffd5\066\uffd5\070\uffd5\072\uffd5\073" +
    "\uffd5\076\uffd5\100\uffd5\101\uffd5\102\uffd5\001\002\000\006" +
    "\004\054\075\263\001\002\000\004\074\271\001\002\000" +
    "\004\022\264\001\002\000\004\046\060\001\002\000\006" +
    "\023\266\027\062\001\002\000\004\004\054\001\002\000" +
    "\004\074\270\001\002\000\040\005\uffea\042\uffea\045\uffea" +
    "\046\uffea\052\uffea\056\uffea\062\uffea\066\uffea\070\uffea\072" +
    "\uffea\073\uffea\076\uffea\100\uffea\101\uffea\102\uffea\001\002" +
    "\000\040\005\uffeb\042\uffeb\045\uffeb\046\uffeb\052\uffeb\056" +
    "\uffeb\062\uffeb\066\uffeb\070\uffeb\072\uffeb\073\uffeb\076\uffeb" +
    "\100\uffeb\101\uffeb\102\uffeb\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\004\003\003\001\001\000\002\001\001\000" +
    "\042\002\014\004\026\005\015\006\040\010\036\011\032" +
    "\012\022\016\007\021\023\023\037\024\034\025\021\026" +
    "\035\027\027\031\042\032\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\234\001\001\000\004\014\227" +
    "\001\001\000\040\004\217\005\214\006\223\010\036\011" +
    "\220\012\022\016\007\021\023\023\037\024\034\025\215" +
    "\026\222\027\216\031\224\032\213\001\001\000\002\001" +
    "\001\000\004\006\210\001\001\000\004\013\203\001\001" +
    "\000\004\013\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\150\001\001\000\006" +
    "\006\126\017\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\111\013\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\051\001\001\000\002\001\001\000" +
    "\004\025\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\056\001\001\000\002\001" +
    "\001\000\004\007\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\063\001\001\000\004\025\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\132\001" +
    "\001\000\006\006\126\017\144\001\001\000\002\001\001" +
    "\000\006\006\126\017\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\152\001\001\000\002\001\001\000\004" +
    "\006\154\001\001\000\002\001\001\000\004\014\156\001" +
    "\001\000\004\015\163\001\001\000\004\014\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\201\001" +
    "\001\000\002\001\001\000\004\013\165\001\001\000\002" +
    "\001\001\000\004\014\167\001\001\000\002\001\001\000" +
    "\004\014\175\001\001\000\004\013\172\001\001\000\002" +
    "\001\001\000\004\014\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\231\001\001" +
    "\000\002\001\001\000\004\013\233\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\240\022\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\240\022\245\001\001\000\002\001\001\000\004\014" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\264\001\001\000\002\001\001" +
    "\000\004\014\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    //Método al que se llama automáticamente ante algún error sintactico. 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    
//Método al que se llama en el momento en que ya no es posible una recuperación de errores. 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$A_sintactico$actions {
  private final A_sintactico parser;

  /** Constructor */
  CUP$A_sintactico$actions(A_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$A_sintactico$do_action_part00000000(
    int                        CUP$A_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_sintactico$parser,
    java.util.Stack            CUP$A_sintactico$stack,
    int                        CUP$A_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$A_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$A_sintactico$parser.done_parsing();
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= inicio cuerpo fin 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpo ::= DECLARACION puntoComa 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpo ::= ASIGNACION puntoComa 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpo ::= CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo ::= RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo ::= METODO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo ::= FUNCION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo ::= LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo ::= cuerpo EXPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo ::= cuerpo CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo ::= cuerpo DECLARACION puntoComa 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo ::= cuerpo ASIGNACION puntoComa 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cuerpo ::= cuerpo RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpo ::= cuerpo METODO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cuerpo ::= cuerpo FUNCION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cuerpo ::= cuerpo LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cuerpo ::= cuerpo IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LLAMADA ::= ejecutar id abrir_par cerrar_par puntoComa 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LLAMADA ::= ejecutar id abrir_par LISTAP cerrar_par puntoComa 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // METODO ::= metodo id INSTRUCCIONES Finmetodo 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",21, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // METODO ::= metodo id con_parametros abrir_par LISTAP cerrar_par INSTRUCCIONES Finmetodo 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",21, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCION ::= funcion id TIPODATO INSTRUCCIONES Finfuncion 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNCION ::= funcion id TIPODATO INSTRUCCIONES RETORNO Finfuncion 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNCION ::= funcion id TIPODATO con_parametros abrir_par LISTAP cerrar_par INSTRUCCIONES Finfuncion 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCION ::= funcion id TIPODATO con_parametros abrir_par LISTAP cerrar_par INSTRUCCIONES RETORNO Finfuncion 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IMPRESION ::= imprimir EXPRESION puntoComa 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",20, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IMPRESION ::= imprimir_nl EXPRESION puntoComa 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",20, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Ringresar LISTA Rcomo TIPODATO RCon_valor EXPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIGNACION ::= LISTA asignacion EXPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTAP ::= id TIPODATO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAP",22, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTAP ::= LISTAP Coma id TIPODATO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAP",22, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTA ::= id 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTA ::= LISTA Coma id 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONDICIONALES ::= IF 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONDICIONALES ::= SEGUN 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONDICIONALES ::= PARA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONDICIONALES ::= MIENTRAS 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONDICIONALES ::= REPETIR 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IF ::= condSi CONDICION entonces INSTRUCCIONES finSi 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IF",8, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IF ::= condSi CONDICION INSTRUCCIONES contrario INSTRUCCIONES finSi 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IF",8, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF ::= condSi CONDICION INSTRUCCIONES BLOQUE contrario INSTRUCCIONES finSi 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IF",8, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARA ::= para id asignacion VALORP hasta VALORP hacer INSTRUCCIONES finPara 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",15, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PARA ::= para id asignacion VALORP hasta VALORP hacer finPara 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",15, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PARA ::= para id asignacion VALORP hasta VALORP incremento digitoEntero hacer INSTRUCCIONES finPara 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",15, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARA ::= para id asignacion VALORP hasta VALORP incremento digitoEntero hacer finPara 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",15, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MIENTRAS ::= mientras CONDICION hacer INSTRUCCIONES finMientras 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",17, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MIENTRAS ::= mientras CONDICION hacer finMientras 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",17, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // REPETIR ::= repetir INSTRUCCIONES hastaQue CONDICION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",18, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // REPETIR ::= repetir hastaQue CONDICION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",18, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RETORNO ::= retornar EXPRESION puntoComa 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",19, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RETORNO ::= retornar CONDICION puntoComa 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",19, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RETORNO ::= retornar digitoEntero puntoComa 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",19, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RETORNO ::= retornar digitoDecimal puntoComa 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",19, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VALORP ::= id 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("VALORP",16, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VALORP ::= digitoEntero 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("VALORP",16, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALORP ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("VALORP",16, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SEGUN ::= segun VALOR hacer CASE finSegun 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",12, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASE ::= aitr VALOR citr entonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CASE",14, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CASE ::= CASE contrario entonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CASE",14, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CASE ::= CASE aitr VALOR citr entonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CASE",14, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALOR ::= id 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",13, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALOR ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",13, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= digitoEntero mas digitoEntero 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BLOQUE ::= OSi CONDICION entonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BLOQUE ::= BLOQUE OSi CONDICION entonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BLOQUE ::= BLOQUE contrario entonces INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONDICION ::= id igual id 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INSTRUCCIONES ::= Cadena puntoComa 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPODATO ::= Rnumero 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPODATO ::= Rcadena 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIPODATO ::= Rboolean 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TIPODATO ::= Rcaracter 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$A_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$A_sintactico$do_action(
    int                        CUP$A_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_sintactico$parser,
    java.util.Stack            CUP$A_sintactico$stack,
    int                        CUP$A_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$A_sintactico$do_action_part00000000(
                               CUP$A_sintactico$act_num,
                               CUP$A_sintactico$parser,
                               CUP$A_sintactico$stack,
                               CUP$A_sintactico$top);
    }
}

}
