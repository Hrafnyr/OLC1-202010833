
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class A_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public A_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public A_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public A_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\004\000\002\035\002\000\002\003" +
    "\006\000\002\003\004\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\004\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\004\000\002\030\007\000\002\030\010\000" +
    "\002\036\002\000\002\025\007\000\002\037\002\000\002" +
    "\025\013\000\002\040\002\000\002\027\010\000\002\041" +
    "\002\000\002\027\014\000\002\024\005\000\002\024\005" +
    "\000\002\042\002\000\002\043\002\000\002\005\013\000" +
    "\002\004\006\000\002\026\004\000\002\026\006\000\002" +
    "\010\003\000\002\010\005\000\002\033\003\000\002\033" +
    "\005\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\044\002\000" +
    "\002\012\006\000\002\034\005\000\002\045\002\000\002" +
    "\034\010\000\002\034\006\000\002\046\002\000\002\015" +
    "\007\000\002\047\002\000\002\015\010\000\002\050\002" +
    "\000\002\015\006\000\002\051\002\000\002\020\014\000" +
    "\002\020\012\000\002\052\002\000\002\020\016\000\002" +
    "\053\002\000\002\020\015\000\002\054\002\000\002\021" +
    "\010\000\002\055\002\000\002\021\007\000\002\056\002" +
    "\000\002\022\007\000\002\022\005\000\002\023\005\000" +
    "\002\057\002\000\002\016\010\000\002\060\002\000\002" +
    "\017\010\000\002\061\002\000\002\017\007\000\002\062" +
    "\002\000\002\017\011\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\013\003\000\002\013\005\000\002\013\005\000\002\013" +
    "\007\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\006\003\004\046\006\001\002\000\004\047" +
    "\334\001\002\000\004\002\333\001\002\000\034\050\000" +
    "\051\000\055\000\061\000\065\000\071\000\073\000\075" +
    "\000\076\000\101\000\103\000\104\000\105\000\001\002" +
    "\000\034\050\026\051\033\055\022\061\027\065\013\071" +
    "\021\073\015\075\032\076\010\101\042\103\035\104\020" +
    "\105\014\001\002\000\004\051\320\001\002\000\062\031" +
    "\uffd6\047\uffd6\050\uffd6\051\uffd6\055\uffd6\056\uffd6\057\uffd6" +
    "\060\uffd6\061\uffd6\064\uffd6\065\uffd6\070\uffd6\071\uffd6\072" +
    "\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6\101\uffd6" +
    "\102\uffd6\103\uffd6\104\uffd6\105\uffd6\001\002\000\036\047" +
    "\ufff7\050\ufff7\051\ufff7\055\ufff7\061\ufff7\065\ufff7\071\ufff7" +
    "\073\ufff7\075\ufff7\076\ufff7\101\ufff7\103\ufff7\104\ufff7\105" +
    "\ufff7\001\002\000\004\051\276\001\002\000\022\004\112" +
    "\005\117\006\115\007\114\010\113\011\111\012\110\051" +
    "\107\001\002\000\032\050\uffbb\051\uffbb\055\uffbb\061\uffbb" +
    "\065\uffbb\071\uffbb\073\uffbb\074\267\075\uffbb\103\uffbb\104" +
    "\uffbb\105\uffbb\001\002\000\036\047\263\050\026\051\033" +
    "\055\022\061\027\065\013\071\021\073\015\075\032\076" +
    "\010\101\042\103\035\104\020\105\014\001\002\000\036" +
    "\047\ufffd\050\ufffd\051\ufffd\055\ufffd\061\ufffd\065\ufffd\071" +
    "\ufffd\073\ufffd\075\ufffd\076\ufffd\101\ufffd\103\ufffd\104\ufffd" +
    "\105\ufffd\001\002\000\022\004\112\005\117\006\115\007" +
    "\114\010\113\011\111\012\110\051\107\001\002\000\022" +
    "\004\112\005\117\006\115\007\114\010\113\011\111\012" +
    "\110\051\107\001\002\000\022\004\112\005\117\006\115" +
    "\007\114\010\113\011\111\012\110\051\107\001\002\000" +
    "\036\047\ufffa\050\ufffa\051\ufffa\055\ufffa\061\ufffa\065\ufffa" +
    "\071\ufffa\073\ufffa\075\ufffa\076\ufffa\101\ufffa\103\ufffa\104" +
    "\ufffa\105\ufffa\001\002\000\062\031\uffd7\047\uffd7\050\uffd7" +
    "\051\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\064" +
    "\uffd7\065\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7" +
    "\075\uffd7\076\uffd7\077\uffd7\101\uffd7\102\uffd7\103\uffd7\104" +
    "\uffd7\105\uffd7\001\002\000\062\031\uffd5\047\uffd5\050\uffd5" +
    "\051\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\064" +
    "\uffd5\065\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5" +
    "\075\uffd5\076\uffd5\077\uffd5\101\uffd5\102\uffd5\103\uffd5\104" +
    "\uffd5\105\uffd5\001\002\000\004\051\uffe1\001\002\000\022" +
    "\004\112\005\117\006\115\007\114\010\113\011\111\012" +
    "\110\051\107\001\002\000\036\047\ufff9\050\ufff9\051\ufff9" +
    "\055\ufff9\061\ufff9\065\ufff9\071\ufff9\073\ufff9\075\ufff9\076" +
    "\ufff9\101\ufff9\103\ufff9\104\ufff9\105\ufff9\001\002\000\036" +
    "\047\ufffc\050\ufffc\051\ufffc\055\ufffc\061\ufffc\065\ufffc\071" +
    "\ufffc\073\ufffc\075\ufffc\076\ufffc\101\ufffc\103\ufffc\104\ufffc" +
    "\105\ufffc\001\002\000\022\004\112\005\117\006\115\007" +
    "\114\010\113\011\111\012\110\051\107\001\002\000\010" +
    "\034\uffdb\052\uffdb\054\uffdb\001\002\000\036\047\ufffb\050" +
    "\ufffb\051\ufffb\055\ufffb\061\ufffb\065\ufffb\071\ufffb\073\ufffb" +
    "\075\ufffb\076\ufffb\101\ufffb\103\ufffb\104\ufffb\105\ufffb\001" +
    "\002\000\004\051\142\001\002\000\062\031\uffd3\047\uffd3" +
    "\050\uffd3\051\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061" +
    "\uffd3\064\uffd3\065\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3" +
    "\074\uffd3\075\uffd3\076\uffd3\077\uffd3\101\uffd3\102\uffd3\103" +
    "\uffd3\104\uffd3\105\uffd3\001\002\000\036\047\ufff6\050\ufff6" +
    "\051\ufff6\055\ufff6\061\ufff6\065\ufff6\071\ufff6\073\ufff6\075" +
    "\ufff6\076\ufff6\101\ufff6\103\ufff6\104\ufff6\105\ufff6\001\002" +
    "\000\062\031\uffd4\047\uffd4\050\uffd4\051\uffd4\055\uffd4\056" +
    "\uffd4\057\uffd4\060\uffd4\061\uffd4\064\uffd4\065\uffd4\070\uffd4" +
    "\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077" +
    "\uffd4\101\uffd4\102\uffd4\103\uffd4\104\uffd4\105\uffd4\001\002" +
    "\000\006\034\105\054\106\001\002\000\004\051\044\001" +
    "\002\000\036\047\ufff8\050\ufff8\051\ufff8\055\ufff8\061\ufff8" +
    "\065\ufff8\071\ufff8\073\ufff8\075\ufff8\076\ufff8\101\ufff8\103" +
    "\ufff8\104\ufff8\105\ufff8\001\002\000\012\015\045\016\046" +
    "\017\047\020\051\001\002\000\040\030\uff8e\034\uff8e\050" +
    "\uff8e\051\uff8e\053\uff8e\055\uff8e\061\uff8e\065\uff8e\071\uff8e" +
    "\073\uff8e\075\uff8e\100\uff8e\103\uff8e\104\uff8e\105\uff8e\001" +
    "\002\000\040\030\uff8d\034\uff8d\050\uff8d\051\uff8d\053\uff8d" +
    "\055\uff8d\061\uff8d\065\uff8d\071\uff8d\073\uff8d\075\uff8d\100" +
    "\uff8d\103\uff8d\104\uff8d\105\uff8d\001\002\000\040\030\uff8c" +
    "\034\uff8c\050\uff8c\051\uff8c\053\uff8c\055\uff8c\061\uff8c\065" +
    "\uff8c\071\uff8c\073\uff8c\075\uff8c\100\uff8c\103\uff8c\104\uff8c" +
    "\105\uff8c\001\002\000\032\050\uffe7\051\uffe7\055\uffe7\061" +
    "\uffe7\065\uffe7\071\uffe7\073\uffe7\075\uffe7\100\053\103\uffe7" +
    "\104\uffe7\105\uffe7\001\002\000\040\030\uff8b\034\uff8b\050" +
    "\uff8b\051\uff8b\053\uff8b\055\uff8b\061\uff8b\065\uff8b\071\uff8b" +
    "\073\uff8b\075\uff8b\100\uff8b\103\uff8b\104\uff8b\105\uff8b\001" +
    "\002\000\030\050\026\051\033\055\022\061\027\065\013" +
    "\071\021\073\015\075\032\103\035\104\020\105\014\001" +
    "\002\000\004\027\054\001\002\000\004\051\056\001\002" +
    "\000\006\030\061\034\060\001\002\000\012\015\045\016" +
    "\046\017\047\020\051\001\002\000\006\030\uffdd\034\uffdd" +
    "\001\002\000\004\051\101\001\002\000\030\050\uffe5\051" +
    "\uffe5\055\uffe5\061\uffe5\065\uffe5\071\uffe5\073\uffe5\075\uffe5" +
    "\103\uffe5\104\uffe5\105\uffe5\001\002\000\030\050\026\051" +
    "\033\055\022\061\027\065\013\071\021\073\015\075\032" +
    "\103\035\104\020\105\014\001\002\000\054\031\uff97\050" +
    "\uff97\051\uff97\055\uff97\056\uff97\057\uff97\060\uff97\061\uff97" +
    "\064\uff97\065\uff97\070\uff97\071\uff97\072\uff97\073\uff97\074" +
    "\uff97\075\uff97\077\uff97\102\uff97\103\uff97\104\uff97\105\uff97" +
    "\001\002\000\054\031\uff9a\050\uff9a\051\uff9a\055\uff9a\056" +
    "\uff9a\057\uff9a\060\uff9a\061\uff9a\064\uff9a\065\uff9a\070\uff9a" +
    "\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a\077\uff9a\102" +
    "\uff9a\103\uff9a\104\uff9a\105\uff9a\001\002\000\032\050\026" +
    "\051\033\055\022\061\027\065\013\071\021\073\015\075" +
    "\032\102\100\103\035\104\020\105\014\001\002\000\054" +
    "\031\uff95\050\uff95\051\uff95\055\uff95\056\uff95\057\uff95\060" +
    "\uff95\061\uff95\064\uff95\065\uff95\070\uff95\071\uff95\072\uff95" +
    "\073\uff95\074\uff95\075\uff95\077\uff95\102\uff95\103\uff95\104" +
    "\uff95\105\uff95\001\002\000\054\031\uff99\050\uff99\051\uff99" +
    "\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99\064\uff99\065" +
    "\uff99\070\uff99\071\uff99\072\uff99\073\uff99\074\uff99\075\uff99" +
    "\077\uff99\102\uff99\103\uff99\104\uff99\105\uff99\001\002\000" +
    "\054\031\uff98\050\uff98\051\uff98\055\uff98\056\uff98\057\uff98" +
    "\060\uff98\061\uff98\064\uff98\065\uff98\070\uff98\071\uff98\072" +
    "\uff98\073\uff98\074\uff98\075\uff98\077\uff98\102\uff98\103\uff98" +
    "\104\uff98\105\uff98\001\002\000\054\031\uff96\050\uff96\051" +
    "\uff96\055\uff96\056\uff96\057\uff96\060\uff96\061\uff96\064\uff96" +
    "\065\uff96\070\uff96\071\uff96\072\uff96\073\uff96\074\uff96\075" +
    "\uff96\077\uff96\102\uff96\103\uff96\104\uff96\105\uff96\001\002" +
    "\000\054\031\uff90\050\uff90\051\uff90\055\uff90\056\uff90\057" +
    "\uff90\060\uff90\061\uff90\064\uff90\065\uff90\070\uff90\071\uff90" +
    "\072\uff90\073\uff90\074\uff90\075\uff90\077\uff90\102\uff90\103" +
    "\uff90\104\uff90\105\uff90\001\002\000\054\031\uff93\050\uff93" +
    "\051\uff93\055\uff93\056\uff93\057\uff93\060\uff93\061\uff93\064" +
    "\uff93\065\uff93\070\uff93\071\uff93\072\uff93\073\uff93\074\uff93" +
    "\075\uff93\077\uff93\102\uff93\103\uff93\104\uff93\105\uff93\001" +
    "\002\000\054\031\uff94\050\uff94\051\uff94\055\uff94\056\uff94" +
    "\057\uff94\060\uff94\061\uff94\064\uff94\065\uff94\070\uff94\071" +
    "\uff94\072\uff94\073\uff94\074\uff94\075\uff94\077\uff94\102\uff94" +
    "\103\uff94\104\uff94\105\uff94\001\002\000\054\031\uff92\050" +
    "\uff92\051\uff92\055\uff92\056\uff92\057\uff92\060\uff92\061\uff92" +
    "\064\uff92\065\uff92\070\uff92\071\uff92\072\uff92\073\uff92\074" +
    "\uff92\075\uff92\077\uff92\102\uff92\103\uff92\104\uff92\105\uff92" +
    "\001\002\000\054\031\uff91\050\uff91\051\uff91\055\uff91\056" +
    "\uff91\057\uff91\060\uff91\061\uff91\064\uff91\065\uff91\070\uff91" +
    "\071\uff91\072\uff91\073\uff91\074\uff91\075\uff91\077\uff91\102" +
    "\uff91\103\uff91\104\uff91\105\uff91\001\002\000\054\031\uff8f" +
    "\050\uff8f\051\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f\061" +
    "\uff8f\064\uff8f\065\uff8f\070\uff8f\071\uff8f\072\uff8f\073\uff8f" +
    "\074\uff8f\075\uff8f\077\uff8f\102\uff8f\103\uff8f\104\uff8f\105" +
    "\uff8f\001\002\000\036\047\uffe4\050\uffe4\051\uffe4\055\uffe4" +
    "\061\uffe4\065\uffe4\071\uffe4\073\uffe4\075\uffe4\076\uffe4\101" +
    "\uffe4\103\uffe4\104\uffe4\105\uffe4\001\002\000\012\015\045" +
    "\016\046\017\047\020\051\001\002\000\006\030\uffdc\034" +
    "\uffdc\001\002\000\032\050\026\051\033\055\022\061\027" +
    "\065\013\071\021\073\015\075\032\102\104\103\035\104" +
    "\020\105\014\001\002\000\036\047\uffe6\050\uffe6\051\uffe6" +
    "\055\uffe6\061\uffe6\065\uffe6\071\uffe6\073\uffe6\075\uffe6\076" +
    "\uffe6\101\uffe6\103\uffe6\104\uffe6\105\uffe6\001\002\000\004" +
    "\051\141\001\002\000\022\004\112\005\117\006\115\007" +
    "\114\010\113\011\111\012\110\051\107\001\002\000\124" +
    "\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\047\uffad\050\uffad\051\uffad\055\uffad\056\uffad\057" +
    "\uffad\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad" +
    "\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad\073\uffad\074" +
    "\uffad\075\uffad\076\uffad\077\uffad\101\uffad\102\uffad\103\uffad" +
    "\104\uffad\105\uffad\001\002\000\124\030\uffa9\031\uffa9\032" +
    "\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\047\uffa9\050" +
    "\uffa9\051\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9" +
    "\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070" +
    "\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9" +
    "\077\uffa9\101\uffa9\102\uffa9\103\uffa9\104\uffa9\105\uffa9\001" +
    "\002\000\124\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa" +
    "\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\044\uffaa\045\uffaa\047\uffaa\050\uffaa\051\uffaa\055\uffaa" +
    "\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064" +
    "\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa" +
    "\073\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\101\uffaa\102" +
    "\uffaa\103\uffaa\104\uffaa\105\uffaa\001\002\000\124\030\uffac" +
    "\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037" +
    "\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac" +
    "\047\uffac\050\uffac\051\uffac\055\uffac\056\uffac\057\uffac\060" +
    "\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac" +
    "\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075" +
    "\uffac\076\uffac\077\uffac\101\uffac\102\uffac\103\uffac\104\uffac" +
    "\105\uffac\001\002\000\124\030\uffa8\031\uffa8\032\uffa8\033" +
    "\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8" +
    "\042\uffa8\043\uffa8\044\uffa8\045\uffa8\047\uffa8\050\uffa8\051" +
    "\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8" +
    "\063\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071" +
    "\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8" +
    "\101\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8\001\002\000" +
    "\124\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab" +
    "\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044" +
    "\uffab\045\uffab\047\uffab\050\uffab\051\uffab\055\uffab\056\uffab" +
    "\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065" +
    "\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072\uffab\073\uffab" +
    "\074\uffab\075\uffab\076\uffab\077\uffab\101\uffab\102\uffab\103" +
    "\uffab\104\uffab\105\uffab\001\002\000\124\030\uffae\031\uffae" +
    "\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040" +
    "\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\047\uffae" +
    "\050\uffae\051\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061" +
    "\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae" +
    "\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075\uffae\076" +
    "\uffae\077\uffae\101\uffae\102\uffae\103\uffae\104\uffae\105\uffae" +
    "\001\002\000\124\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034" +
    "\uffa7\035\134\036\133\037\131\040\130\041\132\042\135" +
    "\043\uffa7\044\uffa7\045\uffa7\047\uffa7\050\uffa7\051\uffa7\055" +
    "\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7" +
    "\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072" +
    "\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7\101\uffa7" +
    "\102\uffa7\103\uffa7\104\uffa7\105\uffa7\001\002\000\124\030" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf" +
    "\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045" +
    "\uffaf\047\uffaf\050\uffaf\051\uffaf\055\uffaf\056\uffaf\057\uffaf" +
    "\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf\066" +
    "\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf" +
    "\075\uffaf\076\uffaf\077\uffaf\101\uffaf\102\uffaf\103\uffaf\104" +
    "\uffaf\105\uffaf\001\002\000\012\033\123\043\124\044\122" +
    "\045\121\001\002\000\022\004\uff9b\005\uff9b\006\uff9b\007" +
    "\uff9b\010\uff9b\011\uff9b\012\uff9b\051\uff9b\001\002\000\022" +
    "\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012" +
    "\uff9c\051\uff9c\001\002\000\062\031\uffde\047\uffde\050\uffde" +
    "\051\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\064" +
    "\uffde\065\uffde\070\uffde\071\uffde\072\uffde\073\uffde\074\uffde" +
    "\075\uffde\076\uffde\077\uffde\101\uffde\102\uffde\103\uffde\104" +
    "\uffde\105\uffde\001\002\000\022\004\uff9d\005\uff9d\006\uff9d" +
    "\007\uff9d\010\uff9d\011\uff9d\012\uff9d\051\uff9d\001\002\000" +
    "\022\004\112\005\117\006\115\007\114\010\113\011\111" +
    "\012\110\051\107\001\002\000\124\030\uffa5\031\uffa5\032" +
    "\uffa5\033\uffa5\034\uffa5\035\134\036\133\037\131\040\130" +
    "\041\132\042\135\043\uffa5\044\uffa5\045\uffa5\047\uffa5\050" +
    "\uffa5\051\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5" +
    "\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070" +
    "\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5" +
    "\077\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5\001" +
    "\002\000\022\004\112\005\117\006\115\007\114\010\113" +
    "\011\111\012\110\051\107\001\002\000\022\004\uffa0\005" +
    "\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\051\uffa0" +
    "\001\002\000\022\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010" +
    "\uffa1\011\uffa1\012\uffa1\051\uffa1\001\002\000\022\004\uff9f" +
    "\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\051" +
    "\uff9f\001\002\000\022\004\uffa2\005\uffa2\006\uffa2\007\uffa2" +
    "\010\uffa2\011\uffa2\012\uffa2\051\uffa2\001\002\000\022\004" +
    "\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3" +
    "\051\uffa3\001\002\000\022\004\uff9e\005\uff9e\006\uff9e\007" +
    "\uff9e\010\uff9e\011\uff9e\012\uff9e\051\uff9e\001\002\000\110" +
    "\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\043\uffa4\044" +
    "\uffa4\045\uffa4\047\uffa4\050\uffa4\051\uffa4\055\uffa4\056\uffa4" +
    "\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\065" +
    "\uffa4\066\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4" +
    "\074\uffa4\075\uffa4\076\uffa4\077\uffa4\101\uffa4\102\uffa4\103" +
    "\uffa4\104\uffa4\105\uffa4\001\002\000\022\004\112\005\117" +
    "\006\115\007\114\010\113\011\111\012\110\051\107\001" +
    "\002\000\110\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\047\uffa6\050\uffa6\051\uffa6\055" +
    "\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6" +
    "\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6\072" +
    "\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6\101\uffa6" +
    "\102\uffa6\103\uffa6\104\uffa6\105\uffa6\001\002\000\010\034" +
    "\uffda\052\uffda\054\uffda\001\002\000\004\027\143\001\002" +
    "\000\024\004\112\005\117\006\115\007\114\010\113\011" +
    "\111\012\110\030\144\051\107\001\002\000\004\033\153" +
    "\001\002\000\006\030\150\034\147\001\002\000\014\030" +
    "\uffd9\034\uffd9\043\124\044\122\045\121\001\002\000\022" +
    "\004\112\005\117\006\115\007\114\010\113\011\111\012" +
    "\110\051\107\001\002\000\004\033\151\001\002\000\062" +
    "\031\uffec\047\uffec\050\uffec\051\uffec\055\uffec\056\uffec\057" +
    "\uffec\060\uffec\061\uffec\064\uffec\065\uffec\070\uffec\071\uffec" +
    "\072\uffec\073\uffec\074\uffec\075\uffec\076\uffec\077\uffec\101" +
    "\uffec\102\uffec\103\uffec\104\uffec\105\uffec\001\002\000\014" +
    "\030\uffd8\034\uffd8\043\124\044\122\045\121\001\002\000" +
    "\062\031\uffed\047\uffed\050\uffed\051\uffed\055\uffed\056\uffed" +
    "\057\uffed\060\uffed\061\uffed\064\uffed\065\uffed\070\uffed\071" +
    "\uffed\072\uffed\073\uffed\074\uffed\075\uffed\076\uffed\077\uffed" +
    "\101\uffed\102\uffed\103\uffed\104\uffed\105\uffed\001\002\000" +
    "\012\033\155\043\124\044\122\045\121\001\002\000\062" +
    "\031\uffb8\047\uffb8\050\uffb8\051\uffb8\055\uffb8\056\uffb8\057" +
    "\uffb8\060\uffb8\061\uffb8\064\uffb8\065\uffb8\070\uffb8\071\uffb8" +
    "\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\101" +
    "\uffb8\102\uffb8\103\uffb8\104\uffb8\105\uffb8\001\002\000\012" +
    "\043\124\044\122\045\121\062\157\001\002\000\004\031" +
    "\uffb7\001\002\000\004\031\161\001\002\000\022\004\112" +
    "\005\117\006\115\007\114\010\113\011\111\012\110\051" +
    "\107\001\002\000\010\031\163\056\165\064\164\001\002" +
    "\000\022\004\112\005\117\006\115\007\114\010\113\011" +
    "\111\012\110\051\107\001\002\000\062\031\uffb6\047\uffb6" +
    "\050\uffb6\051\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061" +
    "\uffb6\064\uffb6\065\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6" +
    "\074\uffb6\075\uffb6\076\uffb6\077\uffb6\101\uffb6\102\uffb6\103" +
    "\uffb6\104\uffb6\105\uffb6\001\002\000\004\063\166\001\002" +
    "\000\030\050\uffb3\051\uffb3\055\uffb3\061\uffb3\065\uffb3\071" +
    "\uffb3\073\uffb3\075\uffb3\103\uffb3\104\uffb3\105\uffb3\001\002" +
    "\000\030\050\026\051\033\055\022\061\027\065\013\071" +
    "\021\073\015\075\032\103\035\104\020\105\014\001\002" +
    "\000\036\031\uffb2\050\026\051\033\055\022\056\uffb2\061" +
    "\027\064\uffb2\065\013\071\021\073\015\075\032\103\035" +
    "\104\020\105\014\001\002\000\012\032\172\043\124\044" +
    "\122\045\121\001\002\000\004\063\173\001\002\000\030" +
    "\050\uffb1\051\uffb1\055\uffb1\061\uffb1\065\uffb1\071\uffb1\073" +
    "\uffb1\075\uffb1\103\uffb1\104\uffb1\105\uffb1\001\002\000\030" +
    "\050\026\051\033\055\022\061\027\065\013\071\021\073" +
    "\015\075\032\103\035\104\020\105\014\001\002\000\036" +
    "\031\uffb0\050\026\051\033\055\022\056\uffb0\061\027\064" +
    "\uffb0\065\013\071\021\073\015\075\032\103\035\104\020" +
    "\105\014\001\002\000\012\032\177\043\124\044\122\045" +
    "\121\001\002\000\004\063\200\001\002\000\030\050\uffb5" +
    "\051\uffb5\055\uffb5\061\uffb5\065\uffb5\071\uffb5\073\uffb5\075" +
    "\uffb5\103\uffb5\104\uffb5\105\uffb5\001\002\000\030\050\026" +
    "\051\033\055\022\061\027\065\013\071\021\073\015\075" +
    "\032\103\035\104\020\105\014\001\002\000\036\031\uffb4" +
    "\050\026\051\033\055\022\056\uffb4\061\027\064\uffb4\065" +
    "\013\071\021\073\015\075\032\103\035\104\020\105\014" +
    "\001\002\000\004\051\033\001\002\000\006\034\105\052" +
    "\205\001\002\000\012\015\045\016\046\017\047\020\051" +
    "\001\002\000\004\053\uffe0\001\002\000\004\053\210\001" +
    "\002\000\022\004\112\005\117\006\115\007\114\010\113" +
    "\011\111\012\110\051\107\001\002\000\012\033\212\043" +
    "\124\044\122\045\121\001\002\000\062\031\uffdf\047\uffdf" +
    "\050\uffdf\051\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061" +
    "\uffdf\064\uffdf\065\uffdf\070\uffdf\071\uffdf\072\uffdf\073\uffdf" +
    "\074\uffdf\075\uffdf\076\uffdf\077\uffdf\101\uffdf\102\uffdf\103" +
    "\uffdf\104\uffdf\105\uffdf\001\002\000\012\043\124\044\122" +
    "\045\121\063\uffd2\001\002\000\004\063\216\001\002\000" +
    "\062\031\uffd1\047\uffd1\050\uffd1\051\uffd1\055\uffd1\056\uffd1" +
    "\057\uffd1\060\uffd1\061\uffd1\064\uffd1\065\uffd1\070\uffd1\071" +
    "\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1" +
    "\101\uffd1\102\uffd1\103\uffd1\104\uffd1\105\uffd1\001\002\000" +
    "\030\050\026\051\033\055\022\061\027\065\013\071\021" +
    "\073\015\075\032\103\035\104\020\105\014\001\002\000" +
    "\036\050\026\051\033\055\022\056\222\057\221\060\223" +
    "\061\027\065\013\071\021\073\015\075\032\103\035\104" +
    "\020\105\014\001\002\000\010\056\233\057\234\060\235" +
    "\001\002\000\062\031\uffd0\047\uffd0\050\uffd0\051\uffd0\055" +
    "\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\064\uffd0\065\uffd0" +
    "\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076" +
    "\uffd0\077\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\105\uffd0" +
    "\001\002\000\030\050\uffcf\051\uffcf\055\uffcf\061\uffcf\065" +
    "\uffcf\071\uffcf\073\uffcf\075\uffcf\103\uffcf\104\uffcf\105\uffcf" +
    "\001\002\000\022\004\112\005\117\006\115\007\114\010" +
    "\113\011\111\012\110\051\107\001\002\000\012\043\124" +
    "\044\122\045\121\063\225\001\002\000\030\050\uffcc\051" +
    "\uffcc\055\uffcc\061\uffcc\065\uffcc\071\uffcc\073\uffcc\075\uffcc" +
    "\103\uffcc\104\uffcc\105\uffcc\001\002\000\030\050\026\051" +
    "\033\055\022\061\027\065\013\071\021\073\015\075\032" +
    "\103\035\104\020\105\014\001\002\000\036\050\026\051" +
    "\033\055\022\056\uffcb\057\uffcb\060\uffcb\061\027\065\013" +
    "\071\021\073\015\075\032\103\035\104\020\105\014\001" +
    "\002\000\030\050\026\051\033\055\022\061\027\065\013" +
    "\071\021\073\015\075\032\103\035\104\020\105\014\001" +
    "\002\000\032\050\026\051\033\055\022\057\232\061\027" +
    "\065\013\071\021\073\015\075\032\103\035\104\020\105" +
    "\014\001\002\000\062\031\uffce\047\uffce\050\uffce\051\uffce" +
    "\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce\064\uffce\065" +
    "\uffce\070\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075\uffce" +
    "\076\uffce\077\uffce\101\uffce\102\uffce\103\uffce\104\uffce\105" +
    "\uffce\001\002\000\030\050\uffc8\051\uffc8\055\uffc8\061\uffc8" +
    "\065\uffc8\071\uffc8\073\uffc8\075\uffc8\103\uffc8\104\uffc8\105" +
    "\uffc8\001\002\000\062\031\uffcd\047\uffcd\050\uffcd\051\uffcd" +
    "\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\064\uffcd\065" +
    "\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd" +
    "\076\uffcd\077\uffcd\101\uffcd\102\uffcd\103\uffcd\104\uffcd\105" +
    "\uffcd\001\002\000\022\004\112\005\117\006\115\007\114" +
    "\010\113\011\111\012\110\051\107\001\002\000\012\043" +
    "\124\044\122\045\121\063\237\001\002\000\030\050\uffca" +
    "\051\uffca\055\uffca\061\uffca\065\uffca\071\uffca\073\uffca\075" +
    "\uffca\103\uffca\104\uffca\105\uffca\001\002\000\030\050\026" +
    "\051\033\055\022\061\027\065\013\071\021\073\015\075" +
    "\032\103\035\104\020\105\014\001\002\000\036\050\026" +
    "\051\033\055\022\056\uffc9\057\uffc9\060\uffc9\061\027\065" +
    "\013\071\021\073\015\075\032\103\035\104\020\105\014" +
    "\001\002\000\030\050\026\051\033\055\022\061\027\065" +
    "\013\071\021\073\015\075\032\103\035\104\020\105\014" +
    "\001\002\000\036\050\026\051\033\055\022\056\uffc7\057" +
    "\uffc7\060\uffc7\061\027\065\013\071\021\073\015\075\032" +
    "\103\035\104\020\105\014\001\002\000\012\043\124\044" +
    "\122\045\121\062\245\001\002\000\032\050\uffbf\051\uffbf" +
    "\055\uffbf\061\uffbf\065\uffbf\071\uffbf\072\uffbd\073\uffbf\075" +
    "\uffbf\103\uffbf\104\uffbf\105\uffbf\001\002\000\004\072\252" +
    "\001\002\000\030\050\026\051\033\055\022\061\027\065" +
    "\013\071\021\073\015\075\032\103\035\104\020\105\014" +
    "\001\002\000\032\050\026\051\033\055\022\061\027\065" +
    "\013\071\021\072\251\073\015\075\032\103\035\104\020" +
    "\105\014\001\002\000\062\031\uffbe\047\uffbe\050\uffbe\051" +
    "\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\064\uffbe" +
    "\065\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075" +
    "\uffbe\076\uffbe\077\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe" +
    "\105\uffbe\001\002\000\062\031\uffbc\047\uffbc\050\uffbc\051" +
    "\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\064\uffbc" +
    "\065\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc\075" +
    "\uffbc\076\uffbc\077\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc" +
    "\105\uffbc\001\002\000\012\033\254\043\124\044\122\045" +
    "\121\001\002\000\062\031\uffe3\047\uffe3\050\uffe3\051\uffe3" +
    "\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\064\uffe3\065" +
    "\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3" +
    "\076\uffe3\077\uffe3\101\uffe3\102\uffe3\103\uffe3\104\uffe3\105" +
    "\uffe3\001\002\000\036\047\uffef\050\uffef\051\uffef\055\uffef" +
    "\061\uffef\065\uffef\071\uffef\073\uffef\075\uffef\076\uffef\101" +
    "\uffef\103\uffef\104\uffef\105\uffef\001\002\000\036\047\ufff4" +
    "\050\ufff4\051\ufff4\055\ufff4\061\ufff4\065\ufff4\071\ufff4\073" +
    "\ufff4\075\ufff4\076\ufff4\101\ufff4\103\ufff4\104\ufff4\105\ufff4" +
    "\001\002\000\036\047\ufff2\050\ufff2\051\ufff2\055\ufff2\061" +
    "\ufff2\065\ufff2\071\ufff2\073\ufff2\075\ufff2\076\ufff2\101\ufff2" +
    "\103\ufff2\104\ufff2\105\ufff2\001\002\000\036\047\ufff1\050" +
    "\ufff1\051\ufff1\055\ufff1\061\ufff1\065\ufff1\071\ufff1\073\ufff1" +
    "\075\ufff1\076\ufff1\101\ufff1\103\ufff1\104\ufff1\105\ufff1\001" +
    "\002\000\036\047\ufff3\050\ufff3\051\ufff3\055\ufff3\061\ufff3" +
    "\065\ufff3\071\ufff3\073\ufff3\075\ufff3\076\ufff3\101\ufff3\103" +
    "\ufff3\104\ufff3\105\ufff3\001\002\000\036\047\ufff5\050\ufff5" +
    "\051\ufff5\055\ufff5\061\ufff5\065\ufff5\071\ufff5\073\ufff5\075" +
    "\ufff5\076\ufff5\101\ufff5\103\ufff5\104\ufff5\105\ufff5\001\002" +
    "\000\004\002\uffff\001\002\000\036\047\uffee\050\uffee\051" +
    "\uffee\055\uffee\061\uffee\065\uffee\071\uffee\073\uffee\075\uffee" +
    "\076\uffee\101\uffee\103\uffee\104\uffee\105\uffee\001\002\000" +
    "\036\047\ufff0\050\ufff0\051\ufff0\055\ufff0\061\ufff0\065\ufff0" +
    "\071\ufff0\073\ufff0\075\ufff0\076\ufff0\101\ufff0\103\ufff0\104" +
    "\ufff0\105\ufff0\001\002\000\030\050\026\051\033\055\022" +
    "\061\027\065\013\071\021\073\015\075\032\103\035\104" +
    "\020\105\014\001\002\000\022\004\112\005\117\006\115" +
    "\007\114\010\113\011\111\012\110\051\107\001\002\000" +
    "\070\031\uffb9\043\124\044\122\045\121\047\uffb9\050\uffb9" +
    "\051\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\064" +
    "\uffb9\065\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9" +
    "\075\uffb9\076\uffb9\077\uffb9\101\uffb9\102\uffb9\103\uffb9\104" +
    "\uffb9\105\uffb9\001\002\000\032\050\026\051\033\055\022" +
    "\061\027\065\013\071\021\073\015\074\272\075\032\103" +
    "\035\104\020\105\014\001\002\000\022\004\112\005\117" +
    "\006\115\007\114\010\113\011\111\012\110\051\107\001" +
    "\002\000\070\031\uffba\043\124\044\122\045\121\047\uffba" +
    "\050\uffba\051\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061" +
    "\uffba\064\uffba\065\uffba\070\uffba\071\uffba\072\uffba\073\uffba" +
    "\074\uffba\075\uffba\076\uffba\077\uffba\101\uffba\102\uffba\103" +
    "\uffba\104\uffba\105\uffba\001\002\000\012\033\275\043\124" +
    "\044\122\045\121\001\002\000\062\031\uffe2\047\uffe2\050" +
    "\uffe2\051\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2" +
    "\064\uffe2\065\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074" +
    "\uffe2\075\uffe2\076\uffe2\077\uffe2\101\uffe2\102\uffe2\103\uffe2" +
    "\104\uffe2\105\uffe2\001\002\000\004\054\277\001\002\000" +
    "\022\004\112\005\117\006\115\007\114\010\113\011\111" +
    "\012\110\051\107\001\002\000\012\043\124\044\122\045" +
    "\121\066\301\001\002\000\022\004\112\005\117\006\115" +
    "\007\114\010\113\011\111\012\110\051\107\001\002\000" +
    "\014\043\124\044\122\045\121\062\303\067\304\001\002" +
    "\000\032\050\uffc6\051\uffc6\055\uffc6\061\uffc6\065\uffc6\070" +
    "\314\071\uffc6\073\uffc6\075\uffc6\103\uffc6\104\uffc6\105\uffc6" +
    "\001\002\000\004\005\305\001\002\000\004\062\306\001" +
    "\002\000\032\050\uffc3\051\uffc3\055\uffc3\061\uffc3\065\uffc3" +
    "\070\uffc1\071\uffc3\073\uffc3\075\uffc3\103\uffc3\104\uffc3\105" +
    "\uffc3\001\002\000\004\070\313\001\002\000\030\050\026" +
    "\051\033\055\022\061\027\065\013\071\021\073\015\075" +
    "\032\103\035\104\020\105\014\001\002\000\032\050\026" +
    "\051\033\055\022\061\027\065\013\070\312\071\021\073" +
    "\015\075\032\103\035\104\020\105\014\001\002\000\062" +
    "\031\uffc2\047\uffc2\050\uffc2\051\uffc2\055\uffc2\056\uffc2\057" +
    "\uffc2\060\uffc2\061\uffc2\064\uffc2\065\uffc2\070\uffc2\071\uffc2" +
    "\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\101" +
    "\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2\001\002\000\062" +
    "\031\uffc0\047\uffc0\050\uffc0\051\uffc0\055\uffc0\056\uffc0\057" +
    "\uffc0\060\uffc0\061\uffc0\064\uffc0\065\uffc0\070\uffc0\071\uffc0" +
    "\072\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\101" +
    "\uffc0\102\uffc0\103\uffc0\104\uffc0\105\uffc0\001\002\000\062" +
    "\031\uffc4\047\uffc4\050\uffc4\051\uffc4\055\uffc4\056\uffc4\057" +
    "\uffc4\060\uffc4\061\uffc4\064\uffc4\065\uffc4\070\uffc4\071\uffc4" +
    "\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\101" +
    "\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4\001\002\000\030" +
    "\050\026\051\033\055\022\061\027\065\013\071\021\073" +
    "\015\075\032\103\035\104\020\105\014\001\002\000\032" +
    "\050\026\051\033\055\022\061\027\065\013\070\317\071" +
    "\021\073\015\075\032\103\035\104\020\105\014\001\002" +
    "\000\062\031\uffc5\047\uffc5\050\uffc5\051\uffc5\055\uffc5\056" +
    "\uffc5\057\uffc5\060\uffc5\061\uffc5\064\uffc5\065\uffc5\070\uffc5" +
    "\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077" +
    "\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\105\uffc5\001\002" +
    "\000\032\050\uffeb\051\uffeb\055\uffeb\061\uffeb\065\uffeb\071" +
    "\uffeb\073\uffeb\075\uffeb\100\322\103\uffeb\104\uffeb\105\uffeb" +
    "\001\002\000\030\050\026\051\033\055\022\061\027\065" +
    "\013\071\021\073\015\075\032\103\035\104\020\105\014" +
    "\001\002\000\004\027\323\001\002\000\004\051\056\001" +
    "\002\000\006\030\325\034\060\001\002\000\030\050\uffe9" +
    "\051\uffe9\055\uffe9\061\uffe9\065\uffe9\071\uffe9\073\uffe9\075" +
    "\uffe9\103\uffe9\104\uffe9\105\uffe9\001\002\000\030\050\026" +
    "\051\033\055\022\061\027\065\013\071\021\073\015\075" +
    "\032\103\035\104\020\105\014\001\002\000\032\050\026" +
    "\051\033\055\022\061\027\065\013\071\021\073\015\075" +
    "\032\077\330\103\035\104\020\105\014\001\002\000\036" +
    "\047\uffe8\050\uffe8\051\uffe8\055\uffe8\061\uffe8\065\uffe8\071" +
    "\uffe8\073\uffe8\075\uffe8\076\uffe8\101\uffe8\103\uffe8\104\uffe8" +
    "\105\uffe8\001\002\000\032\050\026\051\033\055\022\061" +
    "\027\065\013\071\021\073\015\075\032\077\332\103\035" +
    "\104\020\105\014\001\002\000\036\047\uffea\050\uffea\051" +
    "\uffea\055\uffea\061\uffea\065\uffea\071\uffea\073\uffea\075\uffea" +
    "\076\uffea\101\uffea\103\uffea\104\uffea\105\uffea\001\002\000" +
    "\004\002\001\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\006\001\001\000\040\002\015" +
    "\004\030\005\016\010\040\011\033\012\023\016\010\020" +
    "\024\021\037\022\035\023\022\024\036\025\027\027\042" +
    "\030\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\115\013\273" +
    "\001\001\000\004\056\265\001\001\000\036\004\260\005" +
    "\255\010\040\011\261\012\023\016\010\020\024\021\037" +
    "\022\035\023\256\024\263\025\257\027\264\030\254\001" +
    "\001\000\002\001\001\000\006\006\115\013\252\001\001" +
    "\000\006\006\115\013\243\001\001\000\006\006\115\013" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\202\001\001\000\006\006\115\013" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\115\013\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\051\001" +
    "\001\000\002\001\001\000\034\004\066\005\063\010\040" +
    "\011\067\012\023\014\102\016\010\020\024\021\037\022" +
    "\035\023\065\024\070\030\062\001\001\000\002\001\001" +
    "\000\004\026\054\001\001\000\002\001\001\000\004\007" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\061\001\001\000\034\004\066\005\063\010\040\011" +
    "\067\012\023\014\064\016\010\020\024\021\037\022\035" +
    "\023\065\024\070\030\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\004\074\005\072\010\040\011\075" +
    "\012\023\016\010\020\024\021\037\022\035\023\073\024" +
    "\076\030\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\101\001\001\000\002\001\001\000\032\004\074\005\072" +
    "\010\040\011\075\012\023\016\010\020\024\021\037\022" +
    "\035\023\073\024\076\030\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\115\013\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\136\001\001\000\002\001\001\000\004" +
    "\032\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\125\001\001" +
    "\000\004\031\126\001\001\000\004\006\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\115\013\145\033" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\124\001\001\000\006\006\115\013\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\124\001\001" +
    "\000\002\001\001\000\004\032\124\001\001\000\002\001" +
    "\001\000\004\032\124\001\001\000\004\057\157\001\001" +
    "\000\004\017\161\001\001\000\006\006\115\013\175\001" +
    "\001\000\002\001\001\000\006\006\115\013\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\166\001" +
    "\001\000\034\004\066\005\063\010\040\011\067\012\023" +
    "\014\167\016\010\020\024\021\037\022\035\023\065\024" +
    "\070\030\062\001\001\000\032\004\074\005\072\010\040" +
    "\011\075\012\023\016\010\020\024\021\037\022\035\023" +
    "\073\024\076\030\071\001\001\000\004\032\124\001\001" +
    "\000\002\001\001\000\004\062\173\001\001\000\034\004" +
    "\066\005\063\010\040\011\067\012\023\014\174\016\010" +
    "\020\024\021\037\022\035\023\065\024\070\030\062\001" +
    "\001\000\032\004\074\005\072\010\040\011\075\012\023" +
    "\016\010\020\024\021\037\022\035\023\073\024\076\030" +
    "\071\001\001\000\004\032\124\001\001\000\002\001\001" +
    "\000\004\060\200\001\001\000\034\004\066\005\063\010" +
    "\040\011\067\012\023\014\201\016\010\020\024\021\037" +
    "\022\035\023\065\024\070\030\062\001\001\000\032\004" +
    "\074\005\072\010\040\011\075\012\023\016\010\020\024" +
    "\021\037\022\035\023\073\024\076\030\071\001\001\000" +
    "\004\010\203\001\001\000\002\001\001\000\004\007\205" +
    "\001\001\000\004\043\206\001\001\000\002\001\001\000" +
    "\006\006\115\013\210\001\001\000\004\032\124\001\001" +
    "\000\002\001\001\000\006\032\124\044\213\001\001\000" +
    "\004\034\214\001\001\000\002\001\001\000\034\004\066" +
    "\005\063\010\040\011\067\012\023\014\216\016\010\020" +
    "\024\021\037\022\035\023\065\024\070\030\062\001\001" +
    "\000\034\004\074\005\072\010\040\011\075\012\023\015" +
    "\217\016\010\020\024\021\037\022\035\023\073\024\076" +
    "\030\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\227\001\001\000\006\006\115\013\223\001\001" +
    "\000\004\032\124\001\001\000\004\046\225\001\001\000" +
    "\034\004\066\005\063\010\040\011\067\012\023\014\226" +
    "\016\010\020\024\021\037\022\035\023\065\024\070\030" +
    "\062\001\001\000\032\004\074\005\072\010\040\011\075" +
    "\012\023\016\010\020\024\021\037\022\035\023\073\024" +
    "\076\030\071\001\001\000\034\004\066\005\063\010\040" +
    "\011\067\012\023\014\230\016\010\020\024\021\037\022" +
    "\035\023\065\024\070\030\062\001\001\000\032\004\074" +
    "\005\072\010\040\011\075\012\023\016\010\020\024\021" +
    "\037\022\035\023\073\024\076\030\071\001\001\000\002" +
    "\001\001\000\004\050\241\001\001\000\002\001\001\000" +
    "\006\006\115\013\235\001\001\000\004\032\124\001\001" +
    "\000\004\047\237\001\001\000\034\004\066\005\063\010" +
    "\040\011\067\012\023\014\240\016\010\020\024\021\037" +
    "\022\035\023\065\024\070\030\062\001\001\000\032\004" +
    "\074\005\072\010\040\011\075\012\023\016\010\020\024" +
    "\021\037\022\035\023\073\024\076\030\071\001\001\000" +
    "\034\004\066\005\063\010\040\011\067\012\023\014\242" +
    "\016\010\020\024\021\037\022\035\023\065\024\070\030" +
    "\062\001\001\000\032\004\074\005\072\010\040\011\075" +
    "\012\023\016\010\020\024\021\037\022\035\023\073\024" +
    "\076\030\071\001\001\000\004\032\124\001\001\000\006" +
    "\054\246\055\245\001\001\000\002\001\001\000\034\004" +
    "\066\005\063\010\040\011\067\012\023\014\247\016\010" +
    "\020\024\021\037\022\035\023\065\024\070\030\062\001" +
    "\001\000\032\004\074\005\072\010\040\011\075\012\023" +
    "\016\010\020\024\021\037\022\035\023\073\024\076\030" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\066\005\063\010\040" +
    "\011\067\012\023\014\270\016\010\020\024\021\037\022" +
    "\035\023\065\024\070\030\062\001\001\000\006\006\115" +
    "\013\267\001\001\000\004\032\124\001\001\000\032\004" +
    "\074\005\072\010\040\011\075\012\023\016\010\020\024" +
    "\021\037\022\035\023\073\024\076\030\071\001\001\000" +
    "\006\006\115\013\272\001\001\000\004\032\124\001\001" +
    "\000\004\032\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\115\013\277\001\001\000\004\032\124" +
    "\001\001\000\006\006\115\013\301\001\001\000\004\032" +
    "\124\001\001\000\004\051\314\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\052\307\053\306\001\001\000" +
    "\002\001\001\000\034\004\066\005\063\010\040\011\067" +
    "\012\023\014\310\016\010\020\024\021\037\022\035\023" +
    "\065\024\070\030\062\001\001\000\032\004\074\005\072" +
    "\010\040\011\075\012\023\016\010\020\024\021\037\022" +
    "\035\023\073\024\076\030\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\066\005" +
    "\063\010\040\011\067\012\023\014\315\016\010\020\024" +
    "\021\037\022\035\023\065\024\070\030\062\001\001\000" +
    "\032\004\074\005\072\010\040\011\075\012\023\016\010" +
    "\020\024\021\037\022\035\023\073\024\076\030\071\001" +
    "\001\000\002\001\001\000\004\036\320\001\001\000\034" +
    "\004\066\005\063\010\040\011\067\012\023\014\330\016" +
    "\010\020\024\021\037\022\035\023\065\024\070\030\062" +
    "\001\001\000\002\001\001\000\004\026\323\001\001\000" +
    "\002\001\001\000\004\037\325\001\001\000\034\004\066" +
    "\005\063\010\040\011\067\012\023\014\326\016\010\020" +
    "\024\021\037\022\035\023\065\024\070\030\062\001\001" +
    "\000\032\004\074\005\072\010\040\011\075\012\023\016" +
    "\010\020\024\021\037\022\035\023\073\024\076\030\071" +
    "\001\001\000\002\001\001\000\032\004\074\005\072\010" +
    "\040\011\075\012\023\016\010\020\024\021\037\022\035" +
    "\023\073\024\076\030\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public static String txtPython = ""; //Variable que guarda el código python
    String auxP = ""; //Guarda condicion/expresion
    String aux2=""; //Guarda informacion de lista parametros, nombres y expresiones/condiciones
    String tmpPS = ""; //Guarda condicion del switch case
    String tmp = "";   // Guarda lista de resultados asignacion/declaracion
    String tmpPARA =""; //Guarda condicion hasta(condicion) del ciclo para
    int cont1 = 0; //contador de nombres asignacion/declaracion

    int contTPY = 0; //contador de tabulacion
    
    public static String txtGo = ""; //Variable que guarda el código Golang
    String auxTP = ""; //guarda el tipo de dato
    String auxC = "";
    String aux2G = "";
    String tmpG="";
    String imps = ""; //guarda bloque de importaciones
    int flag = 0; //verificador para cierre de llave main

    //caracter ascii
    String cA = ""; //guarda el valor del token caracter Ascci
    int c = 0; //guarda el valor del caracter asccii

    //Metodo para calcular la identación correcta python
    public String tab(){
        String tab = "";
        for(int i = 0; i < (contTPY*4); i++) {
            tab+=" ";

        }
       
        return tab;
    }

    //Método al que se llama automáticamente ante algún error sintactico. 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
            claseErrores datos = new claseErrores(String.valueOf(s.value), "Error sintáctico", "eliminar entrada incorrecta",s.left,s.right);
            Analizador_Lexico.TError.add(datos);
    } 
    
    //Método al que se llama en el momento en que ya no es posible una recuperación de errores. 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
            claseErrores datos = new claseErrores("Null", "Error sintáctico", "eliminar entrada incorrecta",s.left,s.right);
            Analizador_Lexico.TError.add(datos);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$A_sintactico$actions {
  private final A_sintactico parser;

  /** Constructor */
  CUP$A_sintactico$actions(A_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$A_sintactico$do_action_part00000000(
    int                        CUP$A_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_sintactico$parser,
    java.util.Stack            CUP$A_sintactico$stack,
    int                        CUP$A_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$A_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$A_sintactico$parser.done_parsing();
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        txtPython+=tab()+"def main():\n";
        imps+= "import (\n\"fmt\"\n )\n";
        txtGo+=tab()+"package main\n"+tab()+imps+"func main(){\n";
        contTPY+=1;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",27, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= inicio NT$0 cuerpo fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		
        txtPython+="if __name__ == '__main__':\n    main()";
        
        if(flag==0){
            txtGo+="}";
        }

        contTPY-=1;
        imps = "";
        System.out.println(txtPython);
        System.out.println(txtGo);
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error fin 
            {
              Object RESULT =null;
		System.out.println("Falta inicio");
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpo ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo ::= CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo ::= RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo ::= METODO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo ::= FUNCION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo ::= LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo ::= cuerpo CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo ::= cuerpo DECLARACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo ::= cuerpo ASIGNACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cuerpo ::= cuerpo RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpo ::= cuerpo METODO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cuerpo ::= cuerpo FUNCION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cuerpo ::= cuerpo LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cuerpo ::= cuerpo IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LLAMADA ::= ejecutar id abrir_par cerrar_par puntoComa 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		
                txtPython+=tab()+String.valueOf(idd)+"()\n";
                txtGo+= tab()+String.valueOf(idd)+"()\n";
            
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",22, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LLAMADA ::= ejecutar id abrir_par LEJC cerrar_par puntoComa 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		
        txtPython+= tab()+ String.valueOf(idd)+"("+aux2+")\n";
        txtGo+=tab()+String.valueOf(idd)+"("+aux2G+")\n";
        auxP="";
        auxC="";
        aux2="";
        aux2G="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",22, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$1 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        txtPython+=tab()+"def "+String.valueOf(idd)+"():\n";
        flag=1;
        txtGo+="}\n";
        txtGo+="func "+String.valueOf(idd)+"(){\n";
        contTPY+=1; 
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",28, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // METODO ::= metodo id NT$1 INSTRUCCIONES Finmetodo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$2 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;

        txtPython+=tab()+"def "+String.valueOf(idd)+"("+aux2+"):\n";
        flag=1;
        txtGo+="}\n";
        txtGo+="func "+String.valueOf(idd)+"("+aux2G+"){\n";
        contTPY+=1; 
        aux2="";
        aux2G="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",29, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // METODO ::= metodo id con_parametros abrir_par LISTAP cerrar_par NT$2 INSTRUCCIONES Finmetodo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$3 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        txtPython+=tab()+"def "+String.valueOf(idd)+":\n";
        flag=1;
        txtGo+="}\n";
        txtGo+="func "+String.valueOf(idd)+"()"+String.valueOf(tdd)+"{\n";
        contTPY+=1; 
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCION ::= funcion id TIPODATO NT$3 INSTRUCCIONES Finfuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$4 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;

        txtPython+=tab()+"def "+String.valueOf(idd)+"("+aux2+"):\n";
        flag=1;
        txtGo+="}\n";
        txtGo+="func "+String.valueOf(idd)+"("+aux2G+")"+String.valueOf(tdd)+"{\n";
        contTPY+=1; 
        aux2="";
        aux2G="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",31, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCION ::= funcion id TIPODATO con_parametros abrir_par LISTAP cerrar_par NT$4 INSTRUCCIONES Finfuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IMPRESION ::= imprimir CONDICION puntoComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		
        txtPython+=tab()+"print("+auxP+")\n";
        txtGo+=tab()+"fmt.Print("+auxC+")\n";
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",18, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IMPRESION ::= imprimir_nl CONDICION puntoComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		
        txtPython+=tab()+"print("+auxP+",\"\\n\")\n";
        txtGo+=tab()+"fmt.Println("+auxC+")\n";
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",18, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$5 ::= 
            {
              Object RESULT =null;

                txtPython+=tab();
                txtGo+=tab()+"var ";
            
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",32, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int ttdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int ttdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object ttd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
auxTP+=ttd;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",33, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Ringresar NT$5 LISTA Rcomo TIPODATO NT$6 RCon_valor CONDICION puntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int ttdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int ttdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object ttd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		
                txtPython+=aux2;
                txtGo+=aux2;

                aux2="";
                txtPython+=" = ";
                txtGo+=" "+auxTP+" = ";
                auxTP="";
           
                for(int i = 0 ; i <= cont1; i = i + 1)
                {
                    if(i==0){
                        tmp+=auxP;
                        tmpG+=auxC;
                    }
                    else{
                        tmp+= "," + auxP;
                        tmpG+= ","+ auxC;
                    }

                };
                txtPython+= tmp+"\n";
                txtGo+= tmpG+"\n"; 
                auxP="";
                auxC="";
                tmp="";
                tmpG="";
                cont1=0;
            
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGNACION ::= LISTA asignacion CONDICION puntoComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		
                txtPython+= tab()+aux2;
                txtGo+= tab()+aux2;
                aux2="";
                txtPython+=" = ";
                txtGo+=" = ";

                for(int i = 0 ; i <= cont1; i = i + 1)
                {
                    if(i==0){
                        tmp+=auxP;
                        tmpG+=auxC;
                    }
                    else{
                        tmp+= "," + auxP;
                        tmpG+= ","+ auxC;
                    }

                };
                txtPython+= tmp+"\n";
                txtGo+=tmpG+"\n";
                auxP="";
                auxC="";
                tmp="";
                tmpG="";
                cont1=0;
            
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTAP ::= id TIPODATO 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        aux2+=String.valueOf(idd);
        aux2G+= String.valueOf(idd)+" "+String.valueOf(tdd);
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAP",20, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTAP ::= LISTAP Coma id TIPODATO 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        aux2+=","+String.valueOf(idd);
        aux2G+=","+String.valueOf(idd)+" "+String.valueOf(tdd);
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAP",20, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LISTA ::= id 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        aux2+=idd.toString();
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTA ::= LISTA Coma id 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        aux2+=","+idd.toString();
        cont1=cont1+1;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LEJC ::= CONDICION 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        aux2+=auxP;
        aux2G+=auxC;
        auxC="";
        auxP="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LEJC",25, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LEJC ::= LEJC Coma CONDICION 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        aux2+=","+auxP;
        aux2G+=","+auxC;
        auxC="";
        auxP="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LEJC",25, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONDICIONALES ::= IF 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONDICIONALES ::= SEGUN 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONDICIONALES ::= PARA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONDICIONALES ::= MIENTRAS 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONDICIONALES ::= REPETIR 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$7 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        txtPython+=tab()+"if "+auxP+":\n";
        txtGo+=tab()+"if "+auxC+" {\n";
        contTPY+=1; auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",34, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF ::= condSi CONDICION NT$7 auxFS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IF",8, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // auxFS ::= entonces INSTRUCCIONES finSi 
            {
              Object RESULT =null;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("auxFS",26, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$8 ::= 
            {
              Object RESULT =null;

        contTPY-=1;
        txtPython+=tab()+"else:\n";
        txtGo+=tab()+"} else {\n";
        contTPY+=1;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",35, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // auxFS ::= entonces INSTRUCCIONES contrario NT$8 INSTRUCCIONES finSi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("auxFS",26, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // auxFS ::= entonces INSTRUCCIONES BLOQUE finSi 
            {
              Object RESULT =null;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("auxFS",26, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$9 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        contTPY-=1; 
        txtPython+=tab()+"elif "+auxP+":\n";
        txtGo+= tab()+"}else if "+auxC+" {\n";
        contTPY+=1;
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",36, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BLOQUE ::= OSi CONDICION entonces NT$9 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$10 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        contTPY-=1; 
        txtPython+=tab()+"elif "+auxP+":\n";
        txtGo+=tab()+"}else if "+auxC+" {\n";
        contTPY+=1;
        auxP=""; auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",37, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BLOQUE ::= BLOQUE OSi CONDICION entonces NT$10 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$11 ::= 
            {
              Object RESULT =null;

        contTPY-=1;
        txtPython+=tab()+"else:\n";
        txtGo+=tab()+" }else {\n";
        contTPY+=1;
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",38, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BLOQUE ::= BLOQUE contrario NT$11 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$12 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        txtPython+=tab()+"for "+String.valueOf(idd)+" in range("+b.toString(); 
        txtPython+=","+c.toString()+"):\n";
        txtGo+=tab()+"for "+String.valueOf(idd)+" := "+b.toString()+";";
        txtGo+= String.valueOf(idd)+" < "+c.toString()+";"+String.valueOf(idd)+"++ {\n";
        contTPY+=1; 
        auxP="";
        auxC="";
        tmpPARA="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",39, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARA ::= para id asignacion CONDICION hasta CONDICION hacer NT$12 INSTRUCCIONES finPara 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",14, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARA ::= para id asignacion CONDICION hasta CONDICION hacer finPara 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		
        txtPython+=tab()+"for "+String.valueOf(idd)+" in range("+b.toString(); 
        txtPython+=","+c.toString()+"):\n";
        txtGo+=tab()+"for "+String.valueOf(idd)+" := "+b.toString()+";";
        txtGo+= String.valueOf(idd)+" < "+c.toString()+";"+String.valueOf(idd)+"++ {\n";
        contTPY+=1; 
        auxP="";
        auxC="";
        tmpPARA=""; 
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",14, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$13 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        txtPython+=tab()+"for "+String.valueOf(idd)+" in range("+b.toString();txtPython+=","+c.toString()+","+String.valueOf(num)+"):\n";
        txtGo+=tab()+"for "+String.valueOf(idd)+" := "+b.toString()+";"+String.valueOf(idd)+" < "+c.toString()+";"+String.valueOf(idd)+"+="+String.valueOf(num)+" {\n";
        contTPY+=1; 
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",40, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PARA ::= para id asignacion CONDICION hasta CONDICION incremento digitoEntero hacer NT$13 INSTRUCCIONES finPara 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-10)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-10)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",14, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$14 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        txtPython+=tab()+"for "+String.valueOf(idd)+" in range("+b.toString();txtPython+=","+c.toString()+","+String.valueOf(num)+"):\n";
        txtGo+=tab()+"for "+String.valueOf(idd)+" := "+b.toString()+";"+String.valueOf(idd)+" < "+c.toString()+";"+String.valueOf(idd)+"+="+String.valueOf(num)+" {\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",41, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARA ::= para id asignacion CONDICION hasta CONDICION incremento digitoEntero hacer NT$14 finPara 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-9)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-9)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",14, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$15 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        txtPython+=tab()+"while "+auxP+":\n";
        txtGo+=tab()+"for true {\n"; contTPY+=1; 
        txtGo+=tab()+"if !("+auxC+"){\n";  contTPY+=1;
        txtGo+=tab()+"break\n";  contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",42, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // MIENTRAS ::= mientras CONDICION hacer NT$15 INSTRUCCIONES finMientras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",15, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$16 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        txtPython+=tab()+"while "+auxP+":\n";
        txtGo+=tab()+"for true {\n"; contTPY+=1; 
        txtGo+=tab()+"if !("+auxC+"){\n";  contTPY+=1;
        txtGo+=tab()+"break\n";  contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",43, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MIENTRAS ::= mientras CONDICION hacer NT$16 finMientras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",15, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$17 ::= 
            {
              Object RESULT =null;

        txtPython+=tab()+"while "+auxP+"\n";
        txtGo+= tab()+"for true {\n";
        contTPY+=1;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",44, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // REPETIR ::= repetir NT$17 INSTRUCCIONES hastaQue CONDICION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        txtPython+=tab()+"if "+auxP+" == False:\n";
        txtGo+=tab()+"if ("+auxC+"){\n"; contTPY+=1;
        txtPython+=tab()+"break\n";
        txtGo+=tab()+"break}\n";
        contTPY-=2; 
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",16, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // REPETIR ::= repetir hastaQue CONDICION 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        txtPython+=tab()+"while "+auxP+"\n";
        txtGo+= tab()+"for true {\n"; contTPY+=1;
        txtPython+=tab()+"if "+auxP+" == False:\n";
        txtGo+=tab()+"if ("+auxC+"){\n"; contTPY+=1;
        txtPython+=tab()+"break\n"; 
        txtGo+=tab()+"break}\n";
        contTPY-=2; 
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",16, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // RETORNO ::= retornar CONDICION puntoComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		
        txtPython+=tab()+"return "+auxP+"\n";
        txtGo+=tab()+"return "+auxC+"\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",17, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$18 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        tmpPS+=auxP;
        txtGo+=tab()+"switch "+auxC+" {\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",45, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SEGUN ::= segun CONDICION hacer NT$18 CASE finSegun 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
        tmpPS="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",12, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$19 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

        txtPython+=tab()+"if "+tmpPS+"=="+auxP+":\n";
        txtGo+= tab()+"case "+auxC+":\n";
        contTPY+=1;
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$19",46, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CASE ::= aitr CONDICION citr entonces NT$19 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$20 ::= 
            {
              Object RESULT =null;

        contTPY-=1;
        txtPython+=tab()+"else:\n";
        txtGo+= tab()+"default:\n";
        contTPY+=1;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$20",47, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CASE ::= CASE contrario entonces NT$20 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$21 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

        contTPY-=1; 
        txtPython+=tab()+"elif "+tmpPS+"=="+auxP+":\n";
        txtGo+= tab()+"case "+auxC+":\n";
        contTPY+=1;
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$21",48, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CASE ::= CASE aitr CONDICION citr entonces NT$21 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= digitoEntero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= digitoDecimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= Cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= caracter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= Rtrue 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= Rfalse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= caracterAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONDICION ::= EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=a;

                //si empieza con $ es caracter
                if(a.toString().length()>1){
                    if((a.toString().charAt(1)=='$')){
                        //obtener numero
                        cA+= a.toString().replace("'","").replace("$","").replace("{","").replace("}","");
                        c = Integer.parseInt(cA);
                        //verificar numero sino espacion en blanco
                        if((c>=65 && c<=90)||(c>=97 && c<=122)){
                            char convertedChar = (char)c;
                            auxP+= "'"+String.valueOf(convertedChar)+"'"; tmpPARA = cA;
                            auxC+= "'"+String.valueOf(convertedChar)+"'";
                            cA="";
                        }
                        else{
                            auxP+= "\" \""; tmpPARA = cA;
                            auxC+= "\" \"";
                            cA="";
                        }
                    }
                    else if(a.toString().toLowerCase().equals("verdadero")){
                        auxP+= "True";tmpPARA=a.toString();
                        auxC+= "true";
                    }
                    else if(a.toString().toLowerCase().equals("falso")){
                        auxP+= "False";tmpPARA=a.toString();
                        auxC+= "false";
                    }
                    else{
                        auxP+= a.toString();tmpPARA=a.toString();
                        auxC+= a.toString();
                    }
                }
                else{
                    auxP+= a.toString();tmpPARA=a.toString();
                    auxC+= a.toString();
                }
         
            
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONDICION ::= EXPRESION OP EXPRESION 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		auxP+=q.toString()+opr+s.toString();auxC+=q.toString()+opr+s.toString();
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONDICION ::= CONDICION OPL EXPRESION 
            {
              Object RESULT =null;
		int oplrleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int oplrright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object oplr = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
            if(oplr.toString().equals("or")){
                auxP+=" or "+z.toString();
                auxC+=" || "+z.toString();
            }

            if(oplr.toString().equals("and")){
                auxP+=" and "+z.toString();
                auxC+=" && "+z.toString();
            }
            
            if(oplr.toString().equals("not")){
                auxP+=" not "+z.toString();
                auxC+=" ! "+z.toString();
            }
        
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONDICION ::= CONDICION OPL EXPRESION OP EXPRESION 
            {
              Object RESULT =null;
		int oplrleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int oplrright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object oplr = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
            if(oplr.toString().equals("or")){
                auxP+=" or "+x.toString()+opr+y.toString();
                auxC+=" || "+x.toString()+opr+y.toString();
            }

            if(oplr.toString().equals("and")){
                auxP+=" and "+x.toString()+opr+y.toString();
                auxC+=" && "+x.toString()+opr+y.toString();
            }
            
            if(oplr.toString().equals("not")){
                auxP+=" not "+x.toString()+opr+y.toString();
                auxC+=" ! "+x.toString()+opr+y.toString();
            }
        
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP ::= mayor 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=">";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP ::= menor 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="<";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OP ::= mayorIgual 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=">=";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OP ::= menorIgual 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="<=";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP ::= igual 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="==";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP ::= diferente 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="!=";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPL ::= or 
            {
              Object RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=opl;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OPL",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPL ::= and 
            {
              Object RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=opl;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OPL",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPL ::= not 
            {
              Object RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=opl;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OPL",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INSTRUCCIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // INSTRUCCIONES ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // INSTRUCCIONES ::= CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // INSTRUCCIONES ::= LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INSTRUCCIONES ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // INSTRUCCIONES ::= RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // INSTRUCCIONES ::= INSTRUCCIONES RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // INSTRUCCIONES ::= INSTRUCCIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // INSTRUCCIONES ::= INSTRUCCIONES ASIGNACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // INSTRUCCIONES ::= INSTRUCCIONES CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INSTRUCCIONES ::= INSTRUCCIONES LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INSTRUCCIONES ::= INSTRUCCIONES IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TIPODATO ::= Rnumero 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="float64";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TIPODATO ::= Rcadena 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="string";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TIPODATO ::= Rboolean 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="bool";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TIPODATO ::= Rcaracter 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="byte";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$A_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$A_sintactico$do_action(
    int                        CUP$A_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_sintactico$parser,
    java.util.Stack            CUP$A_sintactico$stack,
    int                        CUP$A_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$A_sintactico$do_action_part00000000(
                               CUP$A_sintactico$act_num,
                               CUP$A_sintactico$parser,
                               CUP$A_sintactico$stack,
                               CUP$A_sintactico$top);
    }
}

}
