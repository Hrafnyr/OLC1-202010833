
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import proyecto_olc1.Nodo;
import proyecto_olc1.arbolSintactico;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class A_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public A_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public A_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public A_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\214\000\002\002\004\000\002\042\002\000\002\003" +
    "\006\000\002\003\004\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\004\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\004\000\002\031\007\000\002\043\002\000" +
    "\002\031\011\000\002\044\002\000\002\026\007\000\002" +
    "\045\002\000\002\026\013\000\002\046\002\000\002\030" +
    "\010\000\002\047\002\000\002\030\014\000\002\050\002" +
    "\000\002\025\006\000\002\051\002\000\002\025\006\000" +
    "\002\052\002\000\002\053\002\000\002\005\013\000\002" +
    "\054\002\000\002\004\007\000\002\027\004\000\002\027" +
    "\006\000\002\010\003\000\002\010\005\000\002\034\003" +
    "\000\002\055\002\000\002\034\006\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\056\002\000\002\012\006\000\002\035" +
    "\005\000\002\057\002\000\002\035\010\000\002\035\006" +
    "\000\002\060\002\000\002\015\007\000\002\061\002\000" +
    "\002\015\010\000\002\062\002\000\002\015\006\000\002" +
    "\063\002\000\002\064\002\000\002\020\013\000\002\065" +
    "\002\000\002\021\006\000\002\066\002\000\002\021\010" +
    "\000\002\021\004\000\002\021\006\000\002\067\002\000" +
    "\002\022\010\000\002\070\002\000\002\022\007\000\002" +
    "\071\002\000\002\023\007\000\002\023\005\000\002\024" +
    "\005\000\002\072\002\000\002\016\010\000\002\073\002" +
    "\000\002\017\010\000\002\074\002\000\002\017\007\000" +
    "\002\075\002\000\002\017\011\000\002\041\003\000\002" +
    "\006\005\000\002\006\005\000\002\006\003\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\003" +
    "\000\002\037\007\000\002\037\003\000\002\076\002\000" +
    "\002\040\006\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\013\003" +
    "\000\002\077\002\000\002\013\006\000\002\100\002\000" +
    "\002\101\002\000\002\013\011\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\372\000\006\003\004\046\006\001\002\000\004\047" +
    "\374\001\002\000\004\002\373\001\002\000\034\050\000" +
    "\051\000\055\000\061\000\065\000\071\000\073\000\075" +
    "\000\076\000\101\000\103\000\104\000\105\000\001\002" +
    "\000\034\050\027\051\uffdb\055\023\061\030\065\013\071" +
    "\022\073\015\075\033\076\011\101\041\103\035\104\021" +
    "\105\014\001\002\000\062\031\uffd1\047\uffd1\050\uffd1\051" +
    "\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\064\uffd1" +
    "\065\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\075" +
    "\uffd1\076\uffd1\077\uffd1\101\uffd1\102\uffd1\103\uffd1\104\uffd1" +
    "\105\uffd1\001\002\000\004\051\360\001\002\000\036\047" +
    "\ufff7\050\ufff7\051\ufff7\055\ufff7\061\ufff7\065\ufff7\071\ufff7" +
    "\073\ufff7\075\ufff7\076\ufff7\101\ufff7\103\ufff7\104\ufff7\105" +
    "\ufff7\001\002\000\004\051\334\001\002\000\024\004\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\027" +
    "\uffe0\051\uffe0\001\002\000\032\050\uffb4\051\uffb4\055\uffb4" +
    "\061\uffb4\065\uffb4\071\uffb4\073\uffb4\074\323\075\uffb4\103" +
    "\uffb4\104\uffb4\105\uffb4\001\002\000\036\047\320\050\027" +
    "\051\uffdb\055\023\061\030\065\013\071\022\073\015\075" +
    "\033\076\011\101\041\103\035\104\021\105\014\001\002" +
    "\000\004\051\232\001\002\000\036\047\ufffd\050\ufffd\051" +
    "\ufffd\055\ufffd\061\ufffd\065\ufffd\071\ufffd\073\ufffd\075\ufffd" +
    "\076\ufffd\101\ufffd\103\ufffd\104\ufffd\105\ufffd\001\002\000" +
    "\024\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2" +
    "\012\uffe2\027\uffe2\051\uffe2\001\002\000\024\004\120\005" +
    "\127\006\125\007\124\010\117\011\116\012\113\027\121" +
    "\051\111\001\002\000\024\004\120\005\127\006\125\007" +
    "\124\010\117\011\116\012\113\027\121\051\111\001\002" +
    "\000\036\047\ufffa\050\ufffa\051\ufffa\055\ufffa\061\ufffa\065" +
    "\ufffa\071\ufffa\073\ufffa\075\ufffa\076\ufffa\101\ufffa\103\ufffa" +
    "\104\ufffa\105\ufffa\001\002\000\062\031\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2" +
    "\064\uffd2\065\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\074" +
    "\uffd2\075\uffd2\076\uffd2\077\uffd2\101\uffd2\102\uffd2\103\uffd2" +
    "\104\uffd2\105\uffd2\001\002\000\062\031\uffd0\047\uffd0\050" +
    "\uffd0\051\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0" +
    "\064\uffd0\065\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074" +
    "\uffd0\075\uffd0\076\uffd0\077\uffd0\101\uffd0\102\uffd0\103\uffd0" +
    "\104\uffd0\105\uffd0\001\002\000\004\051\uffde\001\002\000" +
    "\024\004\120\005\127\006\125\007\124\010\117\011\116" +
    "\012\113\027\121\051\111\001\002\000\036\047\ufff9\050" +
    "\ufff9\051\ufff9\055\ufff9\061\ufff9\065\ufff9\071\ufff9\073\ufff9" +
    "\075\ufff9\076\ufff9\101\ufff9\103\ufff9\104\ufff9\105\ufff9\001" +
    "\002\000\036\047\ufffc\050\ufffc\051\ufffc\055\ufffc\061\ufffc" +
    "\065\ufffc\071\ufffc\073\ufffc\075\ufffc\076\ufffc\101\ufffc\103" +
    "\ufffc\104\ufffc\105\ufffc\001\002\000\024\004\120\005\127" +
    "\006\125\007\124\010\117\011\116\012\113\027\121\051" +
    "\111\001\002\000\036\047\ufffb\050\ufffb\051\ufffb\055\ufffb" +
    "\061\ufffb\065\ufffb\071\ufffb\073\ufffb\075\ufffb\076\ufffb\101" +
    "\ufffb\103\ufffb\104\ufffb\105\ufffb\001\002\000\004\051\104" +
    "\001\002\000\062\031\uffce\047\uffce\050\uffce\051\uffce\055" +
    "\uffce\056\uffce\057\uffce\060\uffce\061\uffce\064\uffce\065\uffce" +
    "\070\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075\uffce\076" +
    "\uffce\077\uffce\101\uffce\102\uffce\103\uffce\104\uffce\105\uffce" +
    "\001\002\000\036\047\ufff6\050\ufff6\051\ufff6\055\ufff6\061" +
    "\ufff6\065\ufff6\071\ufff6\073\ufff6\075\ufff6\076\ufff6\101\ufff6" +
    "\103\ufff6\104\ufff6\105\ufff6\001\002\000\062\031\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf" +
    "\061\uffcf\064\uffcf\065\uffcf\070\uffcf\071\uffcf\072\uffcf\073" +
    "\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\101\uffcf\102\uffcf" +
    "\103\uffcf\104\uffcf\105\uffcf\001\002\000\004\051\043\001" +
    "\002\000\036\047\ufff8\050\ufff8\051\ufff8\055\ufff8\061\ufff8" +
    "\065\ufff8\071\ufff8\073\ufff8\075\ufff8\076\ufff8\101\ufff8\103" +
    "\ufff8\104\ufff8\105\ufff8\001\002\000\012\015\044\016\045" +
    "\017\046\020\050\001\002\000\040\030\uff79\034\uff79\050" +
    "\uff79\051\uff79\053\uff79\055\uff79\061\uff79\065\uff79\071\uff79" +
    "\073\uff79\075\uff79\100\uff79\103\uff79\104\uff79\105\uff79\001" +
    "\002\000\040\030\uff78\034\uff78\050\uff78\051\uff78\053\uff78" +
    "\055\uff78\061\uff78\065\uff78\071\uff78\073\uff78\075\uff78\100" +
    "\uff78\103\uff78\104\uff78\105\uff78\001\002\000\040\030\uff77" +
    "\034\uff77\050\uff77\051\uff77\053\uff77\055\uff77\061\uff77\065" +
    "\uff77\071\uff77\073\uff77\075\uff77\100\uff77\103\uff77\104\uff77" +
    "\105\uff77\001\002\000\032\050\uffe6\051\uffe6\055\uffe6\061" +
    "\uffe6\065\uffe6\071\uffe6\073\uffe6\075\uffe6\100\051\103\uffe6" +
    "\104\uffe6\105\uffe6\001\002\000\040\030\uff76\034\uff76\050" +
    "\uff76\051\uff76\053\uff76\055\uff76\061\uff76\065\uff76\071\uff76" +
    "\073\uff76\075\uff76\100\uff76\103\uff76\104\uff76\105\uff76\001" +
    "\002\000\004\027\071\001\002\000\030\050\027\051\uffdb" +
    "\055\023\061\030\065\013\071\022\073\015\075\033\103" +
    "\035\104\021\105\014\001\002\000\054\031\uff82\050\uff82" +
    "\051\uff82\055\uff82\056\uff82\057\uff82\060\uff82\061\uff82\064" +
    "\uff82\065\uff82\070\uff82\071\uff82\072\uff82\073\uff82\074\uff82" +
    "\075\uff82\077\uff82\102\uff82\103\uff82\104\uff82\105\uff82\001" +
    "\002\000\054\031\uff85\050\uff85\051\uff85\055\uff85\056\uff85" +
    "\057\uff85\060\uff85\061\uff85\064\uff85\065\uff85\070\uff85\071" +
    "\uff85\072\uff85\073\uff85\074\uff85\075\uff85\077\uff85\102\uff85" +
    "\103\uff85\104\uff85\105\uff85\001\002\000\032\050\027\051" +
    "\uffdb\055\023\061\030\065\013\071\022\073\015\075\033" +
    "\102\070\103\035\104\021\105\014\001\002\000\054\031" +
    "\uff80\050\uff80\051\uff80\055\uff80\056\uff80\057\uff80\060\uff80" +
    "\061\uff80\064\uff80\065\uff80\070\uff80\071\uff80\072\uff80\073" +
    "\uff80\074\uff80\075\uff80\077\uff80\102\uff80\103\uff80\104\uff80" +
    "\105\uff80\001\002\000\054\031\uff84\050\uff84\051\uff84\055" +
    "\uff84\056\uff84\057\uff84\060\uff84\061\uff84\064\uff84\065\uff84" +
    "\070\uff84\071\uff84\072\uff84\073\uff84\074\uff84\075\uff84\077" +
    "\uff84\102\uff84\103\uff84\104\uff84\105\uff84\001\002\000\054" +
    "\031\uff83\050\uff83\051\uff83\055\uff83\056\uff83\057\uff83\060" +
    "\uff83\061\uff83\064\uff83\065\uff83\070\uff83\071\uff83\072\uff83" +
    "\073\uff83\074\uff83\075\uff83\077\uff83\102\uff83\103\uff83\104" +
    "\uff83\105\uff83\001\002\000\054\031\uff81\050\uff81\051\uff81" +
    "\055\uff81\056\uff81\057\uff81\060\uff81\061\uff81\064\uff81\065" +
    "\uff81\070\uff81\071\uff81\072\uff81\073\uff81\074\uff81\075\uff81" +
    "\077\uff81\102\uff81\103\uff81\104\uff81\105\uff81\001\002\000" +
    "\054\031\uff7b\050\uff7b\051\uff7b\055\uff7b\056\uff7b\057\uff7b" +
    "\060\uff7b\061\uff7b\064\uff7b\065\uff7b\070\uff7b\071\uff7b\072" +
    "\uff7b\073\uff7b\074\uff7b\075\uff7b\077\uff7b\102\uff7b\103\uff7b" +
    "\104\uff7b\105\uff7b\001\002\000\054\031\uff7e\050\uff7e\051" +
    "\uff7e\055\uff7e\056\uff7e\057\uff7e\060\uff7e\061\uff7e\064\uff7e" +
    "\065\uff7e\070\uff7e\071\uff7e\072\uff7e\073\uff7e\074\uff7e\075" +
    "\uff7e\077\uff7e\102\uff7e\103\uff7e\104\uff7e\105\uff7e\001\002" +
    "\000\054\031\uff7f\050\uff7f\051\uff7f\055\uff7f\056\uff7f\057" +
    "\uff7f\060\uff7f\061\uff7f\064\uff7f\065\uff7f\070\uff7f\071\uff7f" +
    "\072\uff7f\073\uff7f\074\uff7f\075\uff7f\077\uff7f\102\uff7f\103" +
    "\uff7f\104\uff7f\105\uff7f\001\002\000\054\031\uff7d\050\uff7d" +
    "\051\uff7d\055\uff7d\056\uff7d\057\uff7d\060\uff7d\061\uff7d\064" +
    "\uff7d\065\uff7d\070\uff7d\071\uff7d\072\uff7d\073\uff7d\074\uff7d" +
    "\075\uff7d\077\uff7d\102\uff7d\103\uff7d\104\uff7d\105\uff7d\001" +
    "\002\000\054\031\uff7c\050\uff7c\051\uff7c\055\uff7c\056\uff7c" +
    "\057\uff7c\060\uff7c\061\uff7c\064\uff7c\065\uff7c\070\uff7c\071" +
    "\uff7c\072\uff7c\073\uff7c\074\uff7c\075\uff7c\077\uff7c\102\uff7c" +
    "\103\uff7c\104\uff7c\105\uff7c\001\002\000\054\031\uff7a\050" +
    "\uff7a\051\uff7a\055\uff7a\056\uff7a\057\uff7a\060\uff7a\061\uff7a" +
    "\064\uff7a\065\uff7a\070\uff7a\071\uff7a\072\uff7a\073\uff7a\074" +
    "\uff7a\075\uff7a\077\uff7a\102\uff7a\103\uff7a\104\uff7a\105\uff7a" +
    "\001\002\000\036\047\uffe5\050\uffe5\051\uffe5\055\uffe5\061" +
    "\uffe5\065\uffe5\071\uffe5\073\uffe5\075\uffe5\076\uffe5\101\uffe5" +
    "\103\uffe5\104\uffe5\105\uffe5\001\002\000\004\051\073\001" +
    "\002\000\006\030\076\034\075\001\002\000\012\015\044" +
    "\016\045\017\046\020\050\001\002\000\006\030\uffd9\034" +
    "\uffd9\001\002\000\004\051\102\001\002\000\030\050\uffe4" +
    "\051\uffe4\055\uffe4\061\uffe4\065\uffe4\071\uffe4\073\uffe4\075" +
    "\uffe4\103\uffe4\104\uffe4\105\uffe4\001\002\000\030\050\027" +
    "\051\uffdb\055\023\061\030\065\013\071\022\073\015\075" +
    "\033\103\035\104\021\105\014\001\002\000\032\050\027" +
    "\051\uffdb\055\023\061\030\065\013\071\022\073\015\075" +
    "\033\102\101\103\035\104\021\105\014\001\002\000\036" +
    "\047\uffe3\050\uffe3\051\uffe3\055\uffe3\061\uffe3\065\uffe3\071" +
    "\uffe3\073\uffe3\075\uffe3\076\uffe3\101\uffe3\103\uffe3\104\uffe3" +
    "\105\uffe3\001\002\000\012\015\044\016\045\017\046\020" +
    "\050\001\002\000\006\030\uffd8\034\uffd8\001\002\000\004" +
    "\027\105\001\002\000\026\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\012\uffec\027\uffec\030\107\051\uffec" +
    "\001\002\000\024\004\120\005\127\006\125\007\124\010" +
    "\117\011\116\012\113\027\121\051\111\001\002\000\004" +
    "\033\110\001\002\000\062\031\uffed\047\uffed\050\uffed\051" +
    "\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed\064\uffed" +
    "\065\uffed\070\uffed\071\uffed\072\uffed\073\uffed\074\uffed\075" +
    "\uffed\076\uffed\077\uffed\101\uffed\102\uffed\103\uffed\104\uffed" +
    "\105\uffed\001\002\000\142\014\uff9a\021\uff9a\022\uff9a\023" +
    "\uff9a\024\uff9a\025\uff9a\026\uff9a\030\uff9a\031\uff9a\032\uff9a" +
    "\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041" +
    "\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\047\uff9a\050\uff9a" +
    "\051\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062" +
    "\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a" +
    "\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a\076\uff9a\077" +
    "\uff9a\101\uff9a\102\uff9a\103\uff9a\104\uff9a\105\uff9a\001\002" +
    "\000\140\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026" +
    "\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f" +
    "\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044" +
    "\uff9f\045\uff9f\047\uff9f\050\uff9f\051\uff9f\055\uff9f\056\uff9f" +
    "\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065" +
    "\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f" +
    "\074\uff9f\075\uff9f\076\uff9f\077\uff9f\101\uff9f\102\uff9f\103" +
    "\uff9f\104\uff9f\105\uff9f\001\002\000\142\014\uff96\021\uff96" +
    "\022\uff96\023\uff96\024\uff96\025\uff96\026\uff96\030\uff96\031" +
    "\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96" +
    "\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\047" +
    "\uff96\050\uff96\051\uff96\055\uff96\056\uff96\057\uff96\060\uff96" +
    "\061\uff96\062\uff96\063\uff96\064\uff96\065\uff96\066\uff96\067" +
    "\uff96\070\uff96\071\uff96\072\uff96\073\uff96\074\uff96\075\uff96" +
    "\076\uff96\077\uff96\101\uff96\102\uff96\103\uff96\104\uff96\105" +
    "\uff96\001\002\000\140\021\uffa1\022\uffa1\023\uffa1\024\uffa1" +
    "\025\157\026\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034" +
    "\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1" +
    "\043\uffa1\044\uffa1\045\uffa1\047\uffa1\050\uffa1\051\uffa1\055" +
    "\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1" +
    "\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1\072" +
    "\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1\101\uffa1" +
    "\102\uffa1\103\uffa1\104\uffa1\105\uffa1\001\002\000\136\021" +
    "\uffa5\022\uffa5\023\154\024\155\026\153\030\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\047\uffa5" +
    "\050\uffa5\051\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061" +
    "\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5" +
    "\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076" +
    "\uffa5\077\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5" +
    "\001\002\000\142\014\uff97\021\uff97\022\uff97\023\uff97\024" +
    "\uff97\025\uff97\026\uff97\030\uff97\031\uff97\032\uff97\033\uff97" +
    "\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042" +
    "\uff97\043\uff97\044\uff97\045\uff97\047\uff97\050\uff97\051\uff97" +
    "\055\uff97\056\uff97\057\uff97\060\uff97\061\uff97\062\uff97\063" +
    "\uff97\064\uff97\065\uff97\066\uff97\067\uff97\070\uff97\071\uff97" +
    "\072\uff97\073\uff97\074\uff97\075\uff97\076\uff97\077\uff97\101" +
    "\uff97\102\uff97\103\uff97\104\uff97\105\uff97\001\002\000\142" +
    "\014\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\026" +
    "\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95" +
    "\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044" +
    "\uff95\045\uff95\047\uff95\050\uff95\051\uff95\055\uff95\056\uff95" +
    "\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95\064\uff95\065" +
    "\uff95\066\uff95\067\uff95\070\uff95\071\uff95\072\uff95\073\uff95" +
    "\074\uff95\075\uff95\076\uff95\077\uff95\101\uff95\102\uff95\103" +
    "\uff95\104\uff95\105\uff95\001\002\000\142\014\uff99\021\uff99" +
    "\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99\030\uff99\031" +
    "\uff99\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99" +
    "\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\047" +
    "\uff99\050\uff99\051\uff99\055\uff99\056\uff99\057\uff99\060\uff99" +
    "\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99\066\uff99\067" +
    "\uff99\070\uff99\071\uff99\072\uff99\073\uff99\074\uff99\075\uff99" +
    "\076\uff99\077\uff99\101\uff99\102\uff99\103\uff99\104\uff99\105" +
    "\uff99\001\002\000\024\004\uff9e\005\uff9e\006\uff9e\007\uff9e" +
    "\010\uff9e\011\uff9e\012\uff9e\027\uff9e\051\uff9e\001\002\000" +
    "\124\030\uff94\031\uff94\032\uff94\033\uff94\034\uff94\035\144" +
    "\036\143\037\140\040\141\041\142\042\145\043\uff94\044" +
    "\uff94\045\uff94\047\uff94\050\uff94\051\uff94\055\uff94\056\uff94" +
    "\057\uff94\060\uff94\061\uff94\062\uff94\063\uff94\064\uff94\065" +
    "\uff94\066\uff94\067\uff94\070\uff94\071\uff94\072\uff94\073\uff94" +
    "\074\uff94\075\uff94\076\uff94\077\uff94\101\uff94\102\uff94\103" +
    "\uff94\104\uff94\105\uff94\001\002\000\006\030\167\034\166" +
    "\001\002\000\142\014\uff98\021\uff98\022\uff98\023\uff98\024" +
    "\uff98\025\uff98\026\uff98\030\uff98\031\uff98\032\uff98\033\uff98" +
    "\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042" +
    "\uff98\043\uff98\044\uff98\045\uff98\047\uff98\050\uff98\051\uff98" +
    "\055\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98\063" +
    "\uff98\064\uff98\065\uff98\066\uff98\067\uff98\070\uff98\071\uff98" +
    "\072\uff98\073\uff98\074\uff98\075\uff98\076\uff98\077\uff98\101" +
    "\uff98\102\uff98\103\uff98\104\uff98\105\uff98\001\002\000\142" +
    "\014\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026" +
    "\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b" +
    "\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044" +
    "\uff9b\045\uff9b\047\uff9b\050\uff9b\051\uff9b\055\uff9b\056\uff9b" +
    "\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\065" +
    "\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b" +
    "\074\uff9b\075\uff9b\076\uff9b\077\uff9b\101\uff9b\102\uff9b\103" +
    "\uff9b\104\uff9b\105\uff9b\001\002\000\130\021\151\022\150" +
    "\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036" +
    "\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\047\uffa8\050\uffa8\051\uffa8\055\uffa8\056\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8" +
    "\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\074" +
    "\uffa8\075\uffa8\076\uffa8\077\uffa8\101\uffa8\102\uffa8\103\uffa8" +
    "\104\uffa8\105\uffa8\001\002\000\142\014\uff9c\021\uff9c\022" +
    "\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\030\uff9c\031\uff9c" +
    "\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040" +
    "\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\047\uff9c" +
    "\050\uff9c\051\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061" +
    "\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c" +
    "\070\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076" +
    "\uff9c\077\uff9c\101\uff9c\102\uff9c\103\uff9c\104\uff9c\105\uff9c" +
    "\001\002\000\014\030\uffd5\034\uffd5\043\133\044\131\045" +
    "\132\001\002\000\024\004\uff87\005\uff87\006\uff87\007\uff87" +
    "\010\uff87\011\uff87\012\uff87\027\uff87\051\uff87\001\002\000" +
    "\024\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86\011\uff86" +
    "\012\uff86\027\uff86\051\uff86\001\002\000\024\004\uff88\005" +
    "\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012\uff88\027\uff88" +
    "\051\uff88\001\002\000\024\004\uff91\005\uff91\006\uff91\007" +
    "\uff91\010\uff91\011\uff91\012\uff91\027\uff91\051\uff91\001\002" +
    "\000\024\004\120\005\127\006\125\007\124\010\117\011" +
    "\116\012\113\027\121\051\111\001\002\000\016\035\144" +
    "\036\143\037\140\040\141\041\142\042\145\001\002\000" +
    "\024\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90" +
    "\012\uff90\027\uff90\051\uff90\001\002\000\024\004\uff8c\005" +
    "\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\027\uff8c" +
    "\051\uff8c\001\002\000\024\004\uff8b\005\uff8b\006\uff8b\007" +
    "\uff8b\010\uff8b\011\uff8b\012\uff8b\027\uff8b\051\uff8b\001\002" +
    "\000\024\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011" +
    "\uff8a\012\uff8a\027\uff8a\051\uff8a\001\002\000\024\004\uff8d" +
    "\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\027" +
    "\uff8d\051\uff8d\001\002\000\024\004\uff8e\005\uff8e\006\uff8e" +
    "\007\uff8e\010\uff8e\011\uff8e\012\uff8e\027\uff8e\051\uff8e\001" +
    "\002\000\024\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89" +
    "\011\uff89\012\uff89\027\uff89\051\uff89\001\002\000\024\004" +
    "\120\005\127\006\125\007\124\010\117\011\116\012\113" +
    "\027\121\051\111\001\002\000\110\030\uff8f\031\uff8f\032" +
    "\uff8f\033\uff8f\034\uff8f\043\uff8f\044\uff8f\045\uff8f\047\uff8f" +
    "\050\uff8f\051\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f\061" +
    "\uff8f\062\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f" +
    "\070\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f\076" +
    "\uff8f\077\uff8f\101\uff8f\102\uff8f\103\uff8f\104\uff8f\105\uff8f" +
    "\001\002\000\024\004\120\005\127\006\125\007\124\010" +
    "\117\011\116\012\113\027\121\051\111\001\002\000\024" +
    "\004\120\005\127\006\125\007\124\010\117\011\116\012" +
    "\113\027\121\051\111\001\002\000\136\021\uffa7\022\uffa7" +
    "\023\154\024\155\026\153\030\uffa7\031\uffa7\032\uffa7\033" +
    "\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7" +
    "\042\uffa7\043\uffa7\044\uffa7\045\uffa7\047\uffa7\050\uffa7\051" +
    "\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7" +
    "\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071" +
    "\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7" +
    "\101\uffa7\102\uffa7\103\uffa7\104\uffa7\105\uffa7\001\002\000" +
    "\024\004\120\005\127\006\125\007\124\010\117\011\116" +
    "\012\113\027\121\051\111\001\002\000\024\004\120\005" +
    "\127\006\125\007\124\010\117\011\116\012\113\027\121" +
    "\051\111\001\002\000\024\004\120\005\127\006\125\007" +
    "\124\010\117\011\116\012\113\027\121\051\111\001\002" +
    "\000\140\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\157\026" +
    "\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044" +
    "\uffa3\045\uffa3\047\uffa3\050\uffa3\051\uffa3\055\uffa3\056\uffa3" +
    "\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065" +
    "\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\073\uffa3" +
    "\074\uffa3\075\uffa3\076\uffa3\077\uffa3\101\uffa3\102\uffa3\103" +
    "\uffa3\104\uffa3\105\uffa3\001\002\000\004\013\160\001\002" +
    "\000\024\004\120\005\127\006\125\007\124\010\117\011" +
    "\116\012\113\027\121\051\111\001\002\000\004\014\162" +
    "\001\002\000\140\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025" +
    "\uffa0\026\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0" +
    "\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043" +
    "\uffa0\044\uffa0\045\uffa0\047\uffa0\050\uffa0\051\uffa0\055\uffa0" +
    "\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064" +
    "\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0" +
    "\073\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0\101\uffa0\102" +
    "\uffa0\103\uffa0\104\uffa0\105\uffa0\001\002\000\140\021\uffa4" +
    "\022\uffa4\023\uffa4\024\uffa4\025\157\026\uffa4\030\uffa4\031" +
    "\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4" +
    "\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\047" +
    "\uffa4\050\uffa4\051\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4" +
    "\061\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067" +
    "\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4" +
    "\076\uffa4\077\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4\105" +
    "\uffa4\001\002\000\140\021\uffa2\022\uffa2\023\uffa2\024\uffa2" +
    "\025\157\026\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034" +
    "\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2" +
    "\043\uffa2\044\uffa2\045\uffa2\047\uffa2\050\uffa2\051\uffa2\055" +
    "\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2" +
    "\064\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2\072" +
    "\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2\101\uffa2" +
    "\102\uffa2\103\uffa2\104\uffa2\105\uffa2\001\002\000\136\021" +
    "\uffa6\022\uffa6\023\154\024\155\026\153\030\uffa6\031\uffa6" +
    "\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\047\uffa6" +
    "\050\uffa6\051\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061" +
    "\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6" +
    "\070\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076" +
    "\uffa6\077\uffa6\101\uffa6\102\uffa6\103\uffa6\104\uffa6\105\uffa6" +
    "\001\002\000\024\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010" +
    "\uffd4\011\uffd4\012\uffd4\027\uffd4\051\uffd4\001\002\000\004" +
    "\033\170\001\002\000\062\031\uffeb\047\uffeb\050\uffeb\051" +
    "\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\064\uffeb" +
    "\065\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\075" +
    "\uffeb\076\uffeb\077\uffeb\101\uffeb\102\uffeb\103\uffeb\104\uffeb" +
    "\105\uffeb\001\002\000\024\004\120\005\127\006\125\007" +
    "\124\010\117\011\116\012\113\027\121\051\111\001\002" +
    "\000\014\030\uffd3\034\uffd3\043\133\044\131\045\132\001" +
    "\002\000\024\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93" +
    "\011\uff93\012\uff93\027\uff93\051\uff93\001\002\000\024\004" +
    "\120\005\127\006\125\007\124\010\117\011\116\012\113" +
    "\027\121\051\111\001\002\000\110\030\uff92\031\uff92\032" +
    "\uff92\033\uff92\034\uff92\043\uff92\044\uff92\045\uff92\047\uff92" +
    "\050\uff92\051\uff92\055\uff92\056\uff92\057\uff92\060\uff92\061" +
    "\uff92\062\uff92\063\uff92\064\uff92\065\uff92\066\uff92\067\uff92" +
    "\070\uff92\071\uff92\072\uff92\073\uff92\074\uff92\075\uff92\076" +
    "\uff92\077\uff92\101\uff92\102\uff92\103\uff92\104\uff92\105\uff92" +
    "\001\002\000\024\004\120\005\127\006\125\007\124\010" +
    "\117\011\116\012\113\027\121\051\111\001\002\000\004" +
    "\030\200\001\002\000\142\014\uff9d\021\uff9d\022\uff9d\023" +
    "\uff9d\024\uff9d\025\uff9d\026\uff9d\030\uff9d\031\uff9d\032\uff9d" +
    "\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041" +
    "\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\047\uff9d\050\uff9d" +
    "\051\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062" +
    "\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d" +
    "\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077" +
    "\uff9d\101\uff9d\102\uff9d\103\uff9d\104\uff9d\105\uff9d\001\002" +
    "\000\012\033\202\043\133\044\131\045\132\001\002\000" +
    "\062\031\uffb1\047\uffb1\050\uffb1\051\uffb1\055\uffb1\056\uffb1" +
    "\057\uffb1\060\uffb1\061\uffb1\064\uffb1\065\uffb1\070\uffb1\071" +
    "\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1" +
    "\101\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1\001\002\000" +
    "\012\043\133\044\131\045\132\062\204\001\002\000\004" +
    "\031\uffb0\001\002\000\004\031\206\001\002\000\024\004" +
    "\120\005\127\006\125\007\124\010\117\011\116\012\113" +
    "\027\121\051\111\001\002\000\010\031\210\056\212\064" +
    "\211\001\002\000\024\004\120\005\127\006\125\007\124" +
    "\010\117\011\116\012\113\027\121\051\111\001\002\000" +
    "\062\031\uffaf\047\uffaf\050\uffaf\051\uffaf\055\uffaf\056\uffaf" +
    "\057\uffaf\060\uffaf\061\uffaf\064\uffaf\065\uffaf\070\uffaf\071" +
    "\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf" +
    "\101\uffaf\102\uffaf\103\uffaf\104\uffaf\105\uffaf\001\002\000" +
    "\004\063\213\001\002\000\030\050\uffac\051\uffac\055\uffac" +
    "\061\uffac\065\uffac\071\uffac\073\uffac\075\uffac\103\uffac\104" +
    "\uffac\105\uffac\001\002\000\030\050\027\051\uffdb\055\023" +
    "\061\030\065\013\071\022\073\015\075\033\103\035\104" +
    "\021\105\014\001\002\000\036\031\uffab\050\027\051\uffdb" +
    "\055\023\056\uffab\061\030\064\uffab\065\013\071\022\073" +
    "\015\075\033\103\035\104\021\105\014\001\002\000\012" +
    "\032\217\043\133\044\131\045\132\001\002\000\004\063" +
    "\220\001\002\000\030\050\uffaa\051\uffaa\055\uffaa\061\uffaa" +
    "\065\uffaa\071\uffaa\073\uffaa\075\uffaa\103\uffaa\104\uffaa\105" +
    "\uffaa\001\002\000\030\050\027\051\uffdb\055\023\061\030" +
    "\065\013\071\022\073\015\075\033\103\035\104\021\105" +
    "\014\001\002\000\036\031\uffa9\050\027\051\uffdb\055\023" +
    "\056\uffa9\061\030\064\uffa9\065\013\071\022\073\015\075" +
    "\033\103\035\104\021\105\014\001\002\000\012\032\224" +
    "\043\133\044\131\045\132\001\002\000\004\063\225\001" +
    "\002\000\030\050\uffae\051\uffae\055\uffae\061\uffae\065\uffae" +
    "\071\uffae\073\uffae\075\uffae\103\uffae\104\uffae\105\uffae\001" +
    "\002\000\030\050\027\051\uffdb\055\023\061\030\065\013" +
    "\071\022\073\015\075\033\103\035\104\021\105\014\001" +
    "\002\000\036\031\uffad\050\027\051\uffdb\055\023\056\uffad" +
    "\061\030\064\uffad\065\013\071\022\073\015\075\033\103" +
    "\035\104\021\105\014\001\002\000\004\051\232\001\002" +
    "\000\006\034\234\052\233\001\002\000\010\034\uffd7\052" +
    "\uffd7\054\uffd7\001\002\000\012\015\044\016\045\017\046" +
    "\020\050\001\002\000\004\051\235\001\002\000\010\034" +
    "\uffd6\052\uffd6\054\uffd6\001\002\000\004\053\uffdd\001\002" +
    "\000\004\053\240\001\002\000\024\004\120\005\127\006" +
    "\125\007\124\010\117\011\116\012\113\027\121\051\111" +
    "\001\002\000\012\033\242\043\133\044\131\045\132\001" +
    "\002\000\062\031\uffdc\047\uffdc\050\uffdc\051\uffdc\055\uffdc" +
    "\056\uffdc\057\uffdc\060\uffdc\061\uffdc\064\uffdc\065\uffdc\070" +
    "\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc" +
    "\077\uffdc\101\uffdc\102\uffdc\103\uffdc\104\uffdc\105\uffdc\001" +
    "\002\000\012\043\133\044\131\045\132\063\uffcd\001\002" +
    "\000\004\063\246\001\002\000\062\031\uffcc\047\uffcc\050" +
    "\uffcc\051\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc" +
    "\064\uffcc\065\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\074" +
    "\uffcc\075\uffcc\076\uffcc\077\uffcc\101\uffcc\102\uffcc\103\uffcc" +
    "\104\uffcc\105\uffcc\001\002\000\030\050\027\051\uffdb\055" +
    "\023\061\030\065\013\071\022\073\015\075\033\103\035" +
    "\104\021\105\014\001\002\000\036\050\027\051\uffdb\055" +
    "\023\056\252\057\251\060\253\061\030\065\013\071\022" +
    "\073\015\075\033\103\035\104\021\105\014\001\002\000" +
    "\010\056\263\057\264\060\265\001\002\000\062\031\uffcb" +
    "\047\uffcb\050\uffcb\051\uffcb\055\uffcb\056\uffcb\057\uffcb\060" +
    "\uffcb\061\uffcb\064\uffcb\065\uffcb\070\uffcb\071\uffcb\072\uffcb" +
    "\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\101\uffcb\102" +
    "\uffcb\103\uffcb\104\uffcb\105\uffcb\001\002\000\030\050\uffca" +
    "\051\uffca\055\uffca\061\uffca\065\uffca\071\uffca\073\uffca\075" +
    "\uffca\103\uffca\104\uffca\105\uffca\001\002\000\024\004\120" +
    "\005\127\006\125\007\124\010\117\011\116\012\113\027" +
    "\121\051\111\001\002\000\012\043\133\044\131\045\132" +
    "\063\255\001\002\000\030\050\uffc7\051\uffc7\055\uffc7\061" +
    "\uffc7\065\uffc7\071\uffc7\073\uffc7\075\uffc7\103\uffc7\104\uffc7" +
    "\105\uffc7\001\002\000\030\050\027\051\uffdb\055\023\061" +
    "\030\065\013\071\022\073\015\075\033\103\035\104\021" +
    "\105\014\001\002\000\036\050\027\051\uffdb\055\023\056" +
    "\uffc6\057\uffc6\060\uffc6\061\030\065\013\071\022\073\015" +
    "\075\033\103\035\104\021\105\014\001\002\000\030\050" +
    "\027\051\uffdb\055\023\061\030\065\013\071\022\073\015" +
    "\075\033\103\035\104\021\105\014\001\002\000\032\050" +
    "\027\051\uffdb\055\023\057\262\061\030\065\013\071\022" +
    "\073\015\075\033\103\035\104\021\105\014\001\002\000" +
    "\062\031\uffc9\047\uffc9\050\uffc9\051\uffc9\055\uffc9\056\uffc9" +
    "\057\uffc9\060\uffc9\061\uffc9\064\uffc9\065\uffc9\070\uffc9\071" +
    "\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9" +
    "\101\uffc9\102\uffc9\103\uffc9\104\uffc9\105\uffc9\001\002\000" +
    "\030\050\uffc3\051\uffc3\055\uffc3\061\uffc3\065\uffc3\071\uffc3" +
    "\073\uffc3\075\uffc3\103\uffc3\104\uffc3\105\uffc3\001\002\000" +
    "\062\031\uffc8\047\uffc8\050\uffc8\051\uffc8\055\uffc8\056\uffc8" +
    "\057\uffc8\060\uffc8\061\uffc8\064\uffc8\065\uffc8\070\uffc8\071" +
    "\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8" +
    "\101\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8\001\002\000" +
    "\024\004\120\005\127\006\125\007\124\010\117\011\116" +
    "\012\113\027\121\051\111\001\002\000\012\043\133\044" +
    "\131\045\132\063\267\001\002\000\030\050\uffc5\051\uffc5" +
    "\055\uffc5\061\uffc5\065\uffc5\071\uffc5\073\uffc5\075\uffc5\103" +
    "\uffc5\104\uffc5\105\uffc5\001\002\000\030\050\027\051\uffdb" +
    "\055\023\061\030\065\013\071\022\073\015\075\033\103" +
    "\035\104\021\105\014\001\002\000\036\050\027\051\uffdb" +
    "\055\023\056\uffc4\057\uffc4\060\uffc4\061\030\065\013\071" +
    "\022\073\015\075\033\103\035\104\021\105\014\001\002" +
    "\000\030\050\027\051\uffdb\055\023\061\030\065\013\071" +
    "\022\073\015\075\033\103\035\104\021\105\014\001\002" +
    "\000\036\050\027\051\uffdb\055\023\056\uffc2\057\uffc2\060" +
    "\uffc2\061\030\065\013\071\022\073\015\075\033\103\035" +
    "\104\021\105\014\001\002\000\012\043\133\044\131\045" +
    "\132\062\275\001\002\000\032\050\uffb8\051\uffb8\055\uffb8" +
    "\061\uffb8\065\uffb8\071\uffb8\072\uffb6\073\uffb8\075\uffb8\103" +
    "\uffb8\104\uffb8\105\uffb8\001\002\000\004\072\302\001\002" +
    "\000\030\050\027\051\uffdb\055\023\061\030\065\013\071" +
    "\022\073\015\075\033\103\035\104\021\105\014\001\002" +
    "\000\032\050\027\051\uffdb\055\023\061\030\065\013\071" +
    "\022\072\301\073\015\075\033\103\035\104\021\105\014" +
    "\001\002\000\062\031\uffb7\047\uffb7\050\uffb7\051\uffb7\055" +
    "\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\064\uffb7\065\uffb7" +
    "\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076" +
    "\uffb7\077\uffb7\101\uffb7\102\uffb7\103\uffb7\104\uffb7\105\uffb7" +
    "\001\002\000\062\031\uffb5\047\uffb5\050\uffb5\051\uffb5\055" +
    "\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\064\uffb5\065\uffb5" +
    "\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076" +
    "\uffb5\077\uffb5\101\uffb5\102\uffb5\103\uffb5\104\uffb5\105\uffb5" +
    "\001\002\000\024\004\120\005\127\006\125\007\124\010" +
    "\117\011\116\012\113\027\121\051\111\001\002\000\012" +
    "\033\305\043\133\044\131\045\132\001\002\000\062\031" +
    "\uffe1\047\uffe1\050\uffe1\051\uffe1\055\uffe1\056\uffe1\057\uffe1" +
    "\060\uffe1\061\uffe1\064\uffe1\065\uffe1\070\uffe1\071\uffe1\072" +
    "\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\077\uffe1\101\uffe1" +
    "\102\uffe1\103\uffe1\104\uffe1\105\uffe1\001\002\000\006\034" +
    "\234\054\307\001\002\000\024\004\120\005\127\006\125" +
    "\007\124\010\117\011\116\012\113\027\121\051\111\001" +
    "\002\000\012\033\311\043\133\044\131\045\132\001\002" +
    "\000\062\031\uffda\047\uffda\050\uffda\051\uffda\055\uffda\056" +
    "\uffda\057\uffda\060\uffda\061\uffda\064\uffda\065\uffda\070\uffda" +
    "\071\uffda\072\uffda\073\uffda\074\uffda\075\uffda\076\uffda\077" +
    "\uffda\101\uffda\102\uffda\103\uffda\104\uffda\105\uffda\001\002" +
    "\000\036\047\uffef\050\uffef\051\uffef\055\uffef\061\uffef\065" +
    "\uffef\071\uffef\073\uffef\075\uffef\076\uffef\101\uffef\103\uffef" +
    "\104\uffef\105\uffef\001\002\000\036\047\ufff4\050\ufff4\051" +
    "\ufff4\055\ufff4\061\ufff4\065\ufff4\071\ufff4\073\ufff4\075\ufff4" +
    "\076\ufff4\101\ufff4\103\ufff4\104\ufff4\105\ufff4\001\002\000" +
    "\036\047\ufff2\050\ufff2\051\ufff2\055\ufff2\061\ufff2\065\ufff2" +
    "\071\ufff2\073\ufff2\075\ufff2\076\ufff2\101\ufff2\103\ufff2\104" +
    "\ufff2\105\ufff2\001\002\000\036\047\ufff1\050\ufff1\051\ufff1" +
    "\055\ufff1\061\ufff1\065\ufff1\071\ufff1\073\ufff1\075\ufff1\076" +
    "\ufff1\101\ufff1\103\ufff1\104\ufff1\105\ufff1\001\002\000\036" +
    "\047\ufff3\050\ufff3\051\ufff3\055\ufff3\061\ufff3\065\ufff3\071" +
    "\ufff3\073\ufff3\075\ufff3\076\ufff3\101\ufff3\103\ufff3\104\ufff3" +
    "\105\ufff3\001\002\000\036\047\ufff5\050\ufff5\051\ufff5\055" +
    "\ufff5\061\ufff5\065\ufff5\071\ufff5\073\ufff5\075\ufff5\076\ufff5" +
    "\101\ufff5\103\ufff5\104\ufff5\105\ufff5\001\002\000\004\002" +
    "\uffff\001\002\000\036\047\uffee\050\uffee\051\uffee\055\uffee" +
    "\061\uffee\065\uffee\071\uffee\073\uffee\075\uffee\076\uffee\101" +
    "\uffee\103\uffee\104\uffee\105\uffee\001\002\000\036\047\ufff0" +
    "\050\ufff0\051\ufff0\055\ufff0\061\ufff0\065\ufff0\071\ufff0\073" +
    "\ufff0\075\ufff0\076\ufff0\101\ufff0\103\ufff0\104\ufff0\105\ufff0" +
    "\001\002\000\024\004\120\005\127\006\125\007\124\010" +
    "\117\011\116\012\113\027\121\051\111\001\002\000\030" +
    "\050\027\051\uffdb\055\023\061\030\065\013\071\022\073" +
    "\015\075\033\103\035\104\021\105\014\001\002\000\032" +
    "\050\027\051\uffdb\055\023\061\030\065\013\071\022\073" +
    "\015\074\326\075\033\103\035\104\021\105\014\001\002" +
    "\000\024\004\120\005\127\006\125\007\124\010\117\011" +
    "\116\012\113\027\121\051\111\001\002\000\070\031\uffb3" +
    "\043\133\044\131\045\132\047\uffb3\050\uffb3\051\uffb3\055" +
    "\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\064\uffb3\065\uffb3" +
    "\070\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076" +
    "\uffb3\077\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\105\uffb3" +
    "\001\002\000\070\031\uffb2\043\133\044\131\045\132\047" +
    "\uffb2\050\uffb2\051\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2" +
    "\061\uffb2\064\uffb2\065\uffb2\070\uffb2\071\uffb2\072\uffb2\073" +
    "\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2\101\uffb2\102\uffb2" +
    "\103\uffb2\104\uffb2\105\uffb2\001\002\000\024\004\120\005" +
    "\127\006\125\007\124\010\117\011\116\012\113\027\121" +
    "\051\111\001\002\000\012\033\333\043\133\044\131\045" +
    "\132\001\002\000\062\031\uffdf\047\uffdf\050\uffdf\051\uffdf" +
    "\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\064\uffdf\065" +
    "\uffdf\070\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf\075\uffdf" +
    "\076\uffdf\077\uffdf\101\uffdf\102\uffdf\103\uffdf\104\uffdf\105" +
    "\uffdf\001\002\000\004\054\335\001\002\000\024\004\120" +
    "\005\127\006\125\007\124\010\117\011\116\012\113\027" +
    "\121\051\111\001\002\000\012\043\133\044\131\045\132" +
    "\066\uffc1\001\002\000\004\066\340\001\002\000\024\004" +
    "\120\005\127\006\125\007\124\010\117\011\116\012\113" +
    "\027\121\051\111\001\002\000\014\043\133\044\131\045" +
    "\132\062\uffc0\067\uffc0\001\002\000\006\062\343\067\344" +
    "\001\002\000\032\050\uffbe\051\uffbe\055\uffbe\061\uffbe\065" +
    "\uffbe\070\355\071\uffbe\073\uffbe\075\uffbe\103\uffbe\104\uffbe" +
    "\105\uffbe\001\002\000\024\004\120\005\127\006\125\007" +
    "\124\010\117\011\116\012\113\027\121\051\111\001\002" +
    "\000\062\031\uffbf\047\uffbf\050\uffbf\051\uffbf\055\uffbf\056" +
    "\uffbf\057\uffbf\060\uffbf\061\uffbf\064\uffbf\065\uffbf\070\uffbf" +
    "\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077" +
    "\uffbf\101\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf\001\002" +
    "\000\012\043\133\044\131\045\132\062\347\001\002\000" +
    "\032\050\uffbc\051\uffbc\055\uffbc\061\uffbc\065\uffbc\070\351" +
    "\071\uffbc\073\uffbc\075\uffbc\103\uffbc\104\uffbc\105\uffbc\001" +
    "\002\000\030\050\027\051\uffdb\055\023\061\030\065\013" +
    "\071\022\073\015\075\033\103\035\104\021\105\014\001" +
    "\002\000\062\031\uffb9\047\uffb9\050\uffb9\051\uffb9\055\uffb9" +
    "\056\uffb9\057\uffb9\060\uffb9\061\uffb9\064\uffb9\065\uffb9\070" +
    "\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9" +
    "\077\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9\001" +
    "\002\000\032\050\027\051\uffdb\055\023\061\030\065\013" +
    "\070\353\071\022\073\015\075\033\103\035\104\021\105" +
    "\014\001\002\000\062\031\uffbb\047\uffbb\050\uffbb\051\uffbb" +
    "\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\064\uffbb\065" +
    "\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb" +
    "\076\uffbb\077\uffbb\101\uffbb\102\uffbb\103\uffbb\104\uffbb\105" +
    "\uffbb\001\002\000\030\050\027\051\uffdb\055\023\061\030" +
    "\065\013\071\022\073\015\075\033\103\035\104\021\105" +
    "\014\001\002\000\062\031\uffba\047\uffba\050\uffba\051\uffba" +
    "\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba\064\uffba\065" +
    "\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074\uffba\075\uffba" +
    "\076\uffba\077\uffba\101\uffba\102\uffba\103\uffba\104\uffba\105" +
    "\uffba\001\002\000\032\050\027\051\uffdb\055\023\061\030" +
    "\065\013\070\357\071\022\073\015\075\033\103\035\104" +
    "\021\105\014\001\002\000\062\031\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\064" +
    "\uffbd\065\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd" +
    "\075\uffbd\076\uffbd\077\uffbd\101\uffbd\102\uffbd\103\uffbd\104" +
    "\uffbd\105\uffbd\001\002\000\032\050\uffea\051\uffea\055\uffea" +
    "\061\uffea\065\uffea\071\uffea\073\uffea\075\uffea\100\362\103" +
    "\uffea\104\uffea\105\uffea\001\002\000\030\050\027\051\uffdb" +
    "\055\023\061\030\065\013\071\022\073\015\075\033\103" +
    "\035\104\021\105\014\001\002\000\004\027\363\001\002" +
    "\000\004\051\073\001\002\000\006\030\365\034\075\001" +
    "\002\000\030\050\uffe8\051\uffe8\055\uffe8\061\uffe8\065\uffe8" +
    "\071\uffe8\073\uffe8\075\uffe8\103\uffe8\104\uffe8\105\uffe8\001" +
    "\002\000\030\050\027\051\uffdb\055\023\061\030\065\013" +
    "\071\022\073\015\075\033\103\035\104\021\105\014\001" +
    "\002\000\032\050\027\051\uffdb\055\023\061\030\065\013" +
    "\071\022\073\015\075\033\077\370\103\035\104\021\105" +
    "\014\001\002\000\036\047\uffe7\050\uffe7\051\uffe7\055\uffe7" +
    "\061\uffe7\065\uffe7\071\uffe7\073\uffe7\075\uffe7\076\uffe7\101" +
    "\uffe7\103\uffe7\104\uffe7\105\uffe7\001\002\000\032\050\027" +
    "\051\uffdb\055\023\061\030\065\013\071\022\073\015\075" +
    "\033\077\372\103\035\104\021\105\014\001\002\000\036" +
    "\047\uffe9\050\uffe9\051\uffe9\055\uffe9\061\uffe9\065\uffe9\071" +
    "\uffe9\073\uffe9\075\uffe9\076\uffe9\101\uffe9\103\uffe9\104\uffe9" +
    "\105\uffe9\001\002\000\004\002\001\001\002\000\004\002" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\372\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\006\001\001\000\040\002\015" +
    "\004\031\005\017\011\033\012\024\016\007\020\025\022" +
    "\037\023\035\024\023\025\036\026\030\030\041\031\011" +
    "\054\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\330\001\001" +
    "\000\004\071\323\001\001\000\036\004\315\005\312\011" +
    "\316\012\024\016\007\020\025\022\037\023\035\024\313" +
    "\025\320\026\314\030\321\031\311\054\016\001\001\000" +
    "\004\010\305\001\001\000\002\001\001\000\004\050\302" +
    "\001\001\000\016\006\125\013\273\036\114\037\113\040" +
    "\111\041\121\001\001\000\016\006\125\013\242\036\114" +
    "\037\113\040\111\041\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\227\001\001" +
    "\000\016\006\125\013\202\036\114\037\113\040\111\041" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\125\013\200\036\114\037\113\040\111\041\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\056" +
    "\005\053\011\057\012\024\014\054\016\007\020\025\022" +
    "\037\023\035\024\055\025\060\031\052\054\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\064\005" +
    "\062\011\065\012\024\016\007\020\025\022\037\023\035" +
    "\024\063\025\066\031\061\054\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\071\001\001\000\002\001\001\000" +
    "\004\007\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\076\001\001\000\034\004\056\005\053\011" +
    "\057\012\024\014\077\016\007\020\025\022\037\023\035" +
    "\024\055\025\060\031\052\054\016\001\001\000\032\004" +
    "\064\005\062\011\065\012\024\016\007\020\025\022\037" +
    "\023\035\024\063\025\066\031\061\054\016\001\001\000" +
    "\002\001\001\000\004\007\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\105\001\001\000\020\006" +
    "\125\013\127\034\122\036\114\037\113\040\111\041\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\076\175\001\001\000\004\032\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\100\134\001\001\000\014\006\125\036\114" +
    "\037\113\040\111\041\135\001\001\000\004\032\136\001" +
    "\001\000\004\101\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\006\125\036\114\037\113" +
    "\040\111\041\146\001\001\000\002\001\001\000\010\036" +
    "\164\037\113\040\111\001\001\000\010\036\151\037\113" +
    "\040\111\001\001\000\002\001\001\000\006\037\163\040" +
    "\111\001\001\000\006\037\162\040\111\001\001\000\006" +
    "\037\155\040\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\125\013\171\036\114\037\113\040" +
    "\111\041\121\001\001\000\004\033\133\001\001\000\004" +
    "\077\173\001\001\000\014\006\125\036\114\037\113\040" +
    "\111\041\174\001\001\000\002\001\001\000\014\006\125" +
    "\036\114\037\113\040\111\041\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\133\001\001\000\002" +
    "\001\001\000\004\033\133\001\001\000\004\072\204\001" +
    "\001\000\004\017\206\001\001\000\016\006\125\013\222" +
    "\036\114\037\113\040\111\041\121\001\001\000\002\001" +
    "\001\000\016\006\125\013\215\036\114\037\113\040\111" +
    "\041\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\074\213\001\001\000\034\004\056\005\053\011\057" +
    "\012\024\014\214\016\007\020\025\022\037\023\035\024" +
    "\055\025\060\031\052\054\016\001\001\000\032\004\064" +
    "\005\062\011\065\012\024\016\007\020\025\022\037\023" +
    "\035\024\063\025\066\031\061\054\016\001\001\000\004" +
    "\033\133\001\001\000\002\001\001\000\004\075\220\001" +
    "\001\000\034\004\056\005\053\011\057\012\024\014\221" +
    "\016\007\020\025\022\037\023\035\024\055\025\060\031" +
    "\052\054\016\001\001\000\032\004\064\005\062\011\065" +
    "\012\024\016\007\020\025\022\037\023\035\024\063\025" +
    "\066\031\061\054\016\001\001\000\004\033\133\001\001" +
    "\000\002\001\001\000\004\073\225\001\001\000\034\004" +
    "\056\005\053\011\057\012\024\014\226\016\007\020\025" +
    "\022\037\023\035\024\055\025\060\031\052\054\016\001" +
    "\001\000\032\004\064\005\062\011\065\012\024\016\007" +
    "\020\025\022\037\023\035\024\063\025\066\031\061\054" +
    "\016\001\001\000\004\010\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\236\001\001\000\002" +
    "\001\001\000\016\006\125\013\240\036\114\037\113\040" +
    "\111\041\121\001\001\000\004\033\133\001\001\000\002" +
    "\001\001\000\006\033\133\056\243\001\001\000\004\035" +
    "\244\001\001\000\002\001\001\000\034\004\056\005\053" +
    "\011\057\012\024\014\246\016\007\020\025\022\037\023" +
    "\035\024\055\025\060\031\052\054\016\001\001\000\034" +
    "\004\064\005\062\011\065\012\024\015\247\016\007\020" +
    "\025\022\037\023\035\024\063\025\066\031\061\054\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\257\001\001\000\016\006\125\013\253\036\114\037\113" +
    "\040\111\041\121\001\001\000\004\033\133\001\001\000" +
    "\004\060\255\001\001\000\034\004\056\005\053\011\057" +
    "\012\024\014\256\016\007\020\025\022\037\023\035\024" +
    "\055\025\060\031\052\054\016\001\001\000\032\004\064" +
    "\005\062\011\065\012\024\016\007\020\025\022\037\023" +
    "\035\024\063\025\066\031\061\054\016\001\001\000\034" +
    "\004\056\005\053\011\057\012\024\014\260\016\007\020" +
    "\025\022\037\023\035\024\055\025\060\031\052\054\016" +
    "\001\001\000\032\004\064\005\062\011\065\012\024\016" +
    "\007\020\025\022\037\023\035\024\063\025\066\031\061" +
    "\054\016\001\001\000\002\001\001\000\004\062\271\001" +
    "\001\000\002\001\001\000\016\006\125\013\265\036\114" +
    "\037\113\040\111\041\121\001\001\000\004\033\133\001" +
    "\001\000\004\061\267\001\001\000\034\004\056\005\053" +
    "\011\057\012\024\014\270\016\007\020\025\022\037\023" +
    "\035\024\055\025\060\031\052\054\016\001\001\000\032" +
    "\004\064\005\062\011\065\012\024\016\007\020\025\022" +
    "\037\023\035\024\063\025\066\031\061\054\016\001\001" +
    "\000\034\004\056\005\053\011\057\012\024\014\272\016" +
    "\007\020\025\022\037\023\035\024\055\025\060\031\052" +
    "\054\016\001\001\000\032\004\064\005\062\011\065\012" +
    "\024\016\007\020\025\022\037\023\035\024\063\025\066" +
    "\031\061\054\016\001\001\000\004\033\133\001\001\000" +
    "\006\067\276\070\275\001\001\000\002\001\001\000\034" +
    "\004\056\005\053\011\057\012\024\014\277\016\007\020" +
    "\025\022\037\023\035\024\055\025\060\031\052\054\016" +
    "\001\001\000\032\004\064\005\062\011\065\012\024\016" +
    "\007\020\025\022\037\023\035\024\063\025\066\031\061" +
    "\054\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\125\013\303\036\114\037\113\040\111\041\121" +
    "\001\001\000\004\033\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\125\013\307\036\114\037\113" +
    "\040\111\041\121\001\001\000\004\033\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\125\013\327\036\114\037\113\040\111\041" +
    "\121\001\001\000\034\004\056\005\053\011\057\012\024" +
    "\014\324\016\007\020\025\022\037\023\035\024\055\025" +
    "\060\031\052\054\016\001\001\000\032\004\064\005\062" +
    "\011\065\012\024\016\007\020\025\022\037\023\035\024" +
    "\063\025\066\031\061\054\016\001\001\000\016\006\125" +
    "\013\326\036\114\037\113\040\111\041\121\001\001\000" +
    "\004\033\133\001\001\000\004\033\133\001\001\000\016" +
    "\006\125\013\331\036\114\037\113\040\111\041\121\001" +
    "\001\000\004\033\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\125\013\335\036\114\037\113\040" +
    "\111\041\121\001\001\000\006\033\133\063\336\001\001" +
    "\000\002\001\001\000\016\006\125\013\340\036\114\037" +
    "\113\040\111\041\121\001\001\000\006\033\133\064\341" +
    "\001\001\000\004\021\344\001\001\000\004\065\353\001" +
    "\001\000\016\006\125\013\345\036\114\037\113\040\111" +
    "\041\121\001\001\000\002\001\001\000\004\033\133\001" +
    "\001\000\004\066\347\001\001\000\034\004\056\005\053" +
    "\011\057\012\024\014\351\016\007\020\025\022\037\023" +
    "\035\024\055\025\060\031\052\054\016\001\001\000\002" +
    "\001\001\000\032\004\064\005\062\011\065\012\024\016" +
    "\007\020\025\022\037\023\035\024\063\025\066\031\061" +
    "\054\016\001\001\000\002\001\001\000\034\004\056\005" +
    "\053\011\057\012\024\014\355\016\007\020\025\022\037" +
    "\023\035\024\055\025\060\031\052\054\016\001\001\000" +
    "\002\001\001\000\032\004\064\005\062\011\065\012\024" +
    "\016\007\020\025\022\037\023\035\024\063\025\066\031" +
    "\061\054\016\001\001\000\002\001\001\000\004\044\360" +
    "\001\001\000\034\004\056\005\053\011\057\012\024\014" +
    "\370\016\007\020\025\022\037\023\035\024\055\025\060" +
    "\031\052\054\016\001\001\000\002\001\001\000\004\027" +
    "\363\001\001\000\002\001\001\000\004\045\365\001\001" +
    "\000\034\004\056\005\053\011\057\012\024\014\366\016" +
    "\007\020\025\022\037\023\035\024\055\025\060\031\052" +
    "\054\016\001\001\000\032\004\064\005\062\011\065\012" +
    "\024\016\007\020\025\022\037\023\035\024\063\025\066" +
    "\031\061\054\016\001\001\000\002\001\001\000\032\004" +
    "\064\005\062\011\065\012\024\016\007\020\025\022\037" +
    "\023\035\024\063\025\066\031\061\054\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Variables para el Arbol sintactico
    proyecto_olc1.arbolSintactico arbolAux = proyecto_olc1.interfaz.arbol;
    proyecto_olc1.Nodo nodoAux = proyecto_olc1.interfaz.nodo;

    int v1,v2 = 0;
    int contLL,contCL = 0;
    String crp = "cuerpo";
    String ins = "INSTRUCCIONES";

    public static String txtPython = ""; //Variable que guarda el código python
    String auxP = ""; //Guarda condicion/expresion
    String aux2=""; //Guarda informacion de lista parametros, nombres y expresiones/condiciones
    String tmpPS = ""; //Guarda condicion del switch case
    String tmp = "";   // Guarda lista de resultados asignacion/declaracion
    String tmpPARA =""; //Guarda condicion hasta(condicion) del ciclo para
    int cont1 = 0; //contador de nombres asignacion/declaracion

    int contTPY = 0; //contador de tabulacion
    
    public static String txtGo = ""; //Variable que guarda el código Golang
    String auxTP = ""; //guarda el tipo de dato
    String auxC = "";
    String aux2G = "";
    String tmpG="";
    String auxID="";
    String tmpPARAG="";
    String imps = ""; //guarda bloque de importaciones
    int flag = 0; //verificador para cierre de llave main
    int flag2 = 0;

    //caracter ascii
    String cA = ""; //guarda el valor del token caracter Ascci
    int c = 0; //guarda el valor del caracter asccii

    //Metodo para calcular la identación correcta python
    public String tab(){
        String tab = "";
        for(int i = 0; i < (contTPY*4); i++) {
            tab+=" ";

        }
       
        return tab;
    }

    //Método al que se llama automáticamente ante algún error sintactico. 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
            claseErrores datos = new claseErrores(String.valueOf(s.value), "Error sintáctico", "No se esperaba este componente:",s.left,s.right);
            Analizador_Lexico.TError.add(datos);
    } 
    
    //Método al que se llama en el momento en que ya no es posible una recuperación de errores. 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
            claseErrores datos = new claseErrores("Null", "Error sintáctico", "Error irrecuperable", s.left,s.right);
            Analizador_Lexico.TError.add(datos);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$A_sintactico$actions {


    String sumaO(Object v1, Object v2){
        auxP+= " "+v1.toString() + " + " + v2.toString();
        auxC+= " "+v1.toString() + " + " + v2.toString();
        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        return "";
    }
    
    String restaO(Object v1, Object v2){
        auxP+= " "+v1.toString() + " - " + v2.toString();
        auxC+= " "+v1.toString() + " - " + v2.toString();
        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        flag2=0;
        return "";
    }

    String multi(Object v1, Object v2){
        auxP+= " "+v1.toString() + " * " + v2.toString();
        auxC+= " "+v1.toString() + " * " + v2.toString();
        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        return "";
    }

    String divs(Object v1, Object v2){

        auxP+= " "+v1.toString() + " / " + v2.toString();
        auxC+= " "+v1.toString() + " / " + v2.toString();
        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        return "";
    }
    
    String modulo(Object v1, Object v2){

        auxP+= " "+v1.toString() + " % " + v2.toString();
        auxC+= " "+v1.toString() + " % " + v2.toString();
        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        return "";
    }
    
    String potencia(Object v1, Object v2){

        auxP+= " "+v1.toString() + " ** " + v2.toString();
        auxC+= " math.Pow(float64("+v1.toString() + "),float64(" + v2.toString()+"))";
        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        return "";
    }

  private final A_sintactico parser;

  /** Constructor */
  CUP$A_sintactico$actions(A_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$A_sintactico$do_action_part00000000(
    int                        CUP$A_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_sintactico$parser,
    java.util.Stack            CUP$A_sintactico$stack,
    int                        CUP$A_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$A_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$A_sintactico$parser.done_parsing();
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        //arbol
        arbolAux.InsertarRecursivo(nodoAux,"Rinicio","Global");
        arbolAux.InsertarRecursivo(nodoAux,"inicio","inicio");
        arbolAux.InsertarRecursivo(nodoAux,"cuerpo","Global");
        arbolAux.InsertarRecursivo(nodoAux,"Rfin","Global");

        txtPython+=tab()+"def main():\n";
        imps+= "import (\n\"fmt\"\n\"math\"\n)\n";
        txtGo+=tab()+"package main\n"+tab()+imps+"func main(){\n";
        contTPY+=1;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",32, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= inicio NT$0 cuerpo fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int crpleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int crpright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object crp = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		
        arbolAux.InsertarRecursivo(nodoAux,"fin","Rfin");

        txtPython+="if __name__ == '__main__':\n    main()";
        
        if(flag==0){
            txtGo+="}";
        }

        contTPY-=1;
        imps = "";
        System.out.println(txtPython);
        System.out.println(txtGo);
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error fin 
            {
              Object RESULT =null;
		System.out.println("Falta inicio");
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpo ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo ::= CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo ::= RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo ::= METODO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo ::= FUNCION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo ::= LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo ::= cuerpo CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo ::= cuerpo DECLARACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo ::= cuerpo ASIGNACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cuerpo ::= cuerpo RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpo ::= cuerpo METODO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cuerpo ::= cuerpo FUNCION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cuerpo ::= cuerpo LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cuerpo ::= cuerpo IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LLAMADA ::= ejecutar id abrir_par cerrar_par puntoComa 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		  
                                
                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-LLAMADA",crp);

                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rejecutar",String.valueOf(contLL)+"-LLAMADA");
                arbolAux.InsertarRecursivo(nodoAux,"ejecutar",String.valueOf(contLL)+"-ejecutar");

                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-id",String.valueOf(contLL)+"-LLAMADA");
                arbolAux.InsertarRecursivo(nodoAux,idd.toString(),String.valueOf(contLL)+"-id");

                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-abrir_par",String.valueOf(contLL)+"-LLAMADA");
                arbolAux.InsertarRecursivo(nodoAux,"(",String.valueOf(contLL)+"-abrir_par");
                
                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-cerrar_par",String.valueOf(contLL)+"-LLAMADA");
                arbolAux.InsertarRecursivo(nodoAux,")",String.valueOf(contLL)+"-cerrar_par");

                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-puntoComa",String.valueOf(contLL)+"-LLAMADA");
                arbolAux.InsertarRecursivo(nodoAux,";",String.valueOf(contLL)+"-puntoComa");
    
                txtPython+=tab()+String.valueOf(idd)+"()\n";
                txtGo+= tab()+String.valueOf(idd)+"()\n";
                contLL++;
            
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$1 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-LLAMADA",crp);

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rejecutar",String.valueOf(contLL)+"-LLAMADA");
        arbolAux.InsertarRecursivo(nodoAux,"ejecutar",String.valueOf(contLL)+"-ejecutar");

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-id",String.valueOf(contLL)+"-LLAMADA");
        arbolAux.InsertarRecursivo(nodoAux,idd.toString(),String.valueOf(contLL)+"-id");

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-abrir_par",String.valueOf(contLL)+"-LLAMADA");
        arbolAux.InsertarRecursivo(nodoAux,"(",String.valueOf(contLL)+"-abrir_par");

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-LEJC",String.valueOf(contLL)+"-LLAMADA");

    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",33, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LLAMADA ::= ejecutar id abrir_par NT$1 LEJC cerrar_par puntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).value;
		
        
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-cerrar_par",String.valueOf(contLL)+"-LLAMADA");
        arbolAux.InsertarRecursivo(nodoAux,")",String.valueOf(contLL)+"-cerrar_par");

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-puntoComa",String.valueOf(contLL)+"-LLAMADA");
        arbolAux.InsertarRecursivo(nodoAux,";",String.valueOf(contLL)+"-puntoComa");
        
       

        txtPython+= tab()+ String.valueOf(idd)+"("+aux2+")\n";
        txtGo+=tab()+String.valueOf(idd)+"("+aux2G+")\n";
        contLL++;
        auxP="";
        auxC="";
        aux2="";
        aux2G="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$2 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        txtPython+=tab()+"def "+String.valueOf(idd)+"():\n";
        flag=1;
        txtGo+="}\n";
        txtGo+="func "+String.valueOf(idd)+"(){\n";
        contTPY+=1; 
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",34, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // METODO ::= metodo id NT$2 INSTRUCCIONES Finmetodo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$3 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;

        txtPython+=tab()+"def "+String.valueOf(idd)+"("+aux2+"):\n";
        flag=1;
        txtGo+="}\n";
        txtGo+="func "+String.valueOf(idd)+"("+aux2G+"){\n";
        contTPY+=1; 
        aux2="";
        aux2G="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",35, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // METODO ::= metodo id con_parametros abrir_par LISTAP cerrar_par NT$3 INSTRUCCIONES Finmetodo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$4 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        txtPython+=tab()+"def "+String.valueOf(idd)+":\n";
        flag=1;
        txtGo+="}\n";
        txtGo+="func "+String.valueOf(idd)+"()"+String.valueOf(tdd)+"{\n";
        contTPY+=1; 
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",36, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCION ::= funcion id TIPODATO NT$4 INSTRUCCIONES Finfuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$5 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;

        txtPython+=tab()+"def "+String.valueOf(idd)+"("+aux2+"):\n";
        flag=1;
        txtGo+="}\n";
        txtGo+="func "+String.valueOf(idd)+"("+aux2G+")"+String.valueOf(tdd)+"{\n";
        contTPY+=1; 
        aux2="";
        aux2G="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",37, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCION ::= funcion id TIPODATO con_parametros abrir_par LISTAP cerrar_par NT$5 INSTRUCCIONES Finfuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$6 ::= 
            {
              Object RESULT =null;

    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-IMPRESION",crp);
    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rimprimir",String.valueOf(contLL)+"-IMPRESION");
    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-imprimir",String.valueOf(contLL)+"-imprimir");
    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-IMPRESION");
    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-puntoComa",String.valueOf(contLL)+"-IMPRESION");
    arbolAux.InsertarRecursivo(nodoAux,";",String.valueOf(contLL)+"-puntoComa");
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",38, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IMPRESION ::= imprimir NT$6 CONDICION puntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		       

        txtPython+=tab()+"print("+auxP+")\n";
        txtGo+=tab()+"fmt.Print("+auxC+")\n";
        contLL++;
        contCL++;
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",19, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$7 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-IMPRESION",crp);
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rimprimir_nl",String.valueOf(contLL)+"-IMPRESION");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-imprimir_nl",String.valueOf(contLL)+"-imprimir_nl");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-IMPRESION");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-puntoComa",String.valueOf(contLL)+"-IMPRESION");
        arbolAux.InsertarRecursivo(nodoAux,";",String.valueOf(contLL)+"-puntoComa");
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",39, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IMPRESION ::= imprimir_nl NT$7 CONDICION puntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		
        txtPython+=tab()+"print("+auxP+",\"\\n\")\n";
        txtGo+=tab()+"fmt.Println("+auxC+")\n";
        contLL++;
        contCL++;
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",19, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$8 ::= 
            {
              Object RESULT =null;

                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-DECLARACION",crp);
                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Ringresar",String.valueOf(contLL)+"-DECLARACION");
                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-ingresar",String.valueOf(contLL)+"-Ringresar");
                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-LISTA",String.valueOf(contLL)+"-DECLARACION");
                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rcomo",String.valueOf(contLL)+"-DECLARACION");
                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-como",String.valueOf(contLL)+"-Rcomo");
                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-TIPODATO",String.valueOf(contLL)+"-DECLARACION");
                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-RCon_valor",String.valueOf(contLL)+"-DECLARACION");
                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-con_valor",String.valueOf(contLL)+"-RCon_valor");
                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-DECLARACION");
                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-puntoComa",String.valueOf(contLL)+"-DECLARACION");
                arbolAux.InsertarRecursivo(nodoAux,";",String.valueOf(contLL)+"-puntoComa");

                txtPython+=tab();
                txtGo+=tab()+"var ";
            
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",40, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int ttdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int ttdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object ttd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
auxTP+=ttd;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",41, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Ringresar NT$8 LISTA Rcomo TIPODATO NT$9 RCon_valor CONDICION puntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int ttdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int ttdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object ttd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		
                contLL++;
                contCL++;

                txtPython+=aux2;
                txtGo+=aux2;

                aux2="";
                txtPython+=" = ";
                txtGo+=" "+auxTP+" = ";
                auxTP="";
           
                for(int i = 0 ; i <= cont1; i = i + 1)
                {
                    if(i==0){
                        tmp+=auxP;
                        tmpG+=auxC;
                    }
                    else{
                        tmp+= "," + auxP;
                        tmpG+= ","+ auxC;
                    }

                };
                txtPython+= tmp+"\n";
                txtGo+= tmpG+"\n"; 
                auxP="";
                auxC="";
                tmp="";
                tmpG="";
                cont1=0;
            
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$10 ::= 
            {
              Object RESULT =null;

        //arbol
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-ASIGNACION",crp);
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-LISTA",String.valueOf(contLL)+"-ASIGNACION");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rasignacion",String.valueOf(contLL)+"-ASIGNACION");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- ->",String.valueOf(contLL)+"-Rasignacion");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-ASIGNACION");

    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",42, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACION ::= NT$10 LISTA asignacion CONDICION puntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		
                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-puntoComa",String.valueOf(contLL)+"-ASIGNACION");
                arbolAux.InsertarRecursivo(nodoAux,";",String.valueOf(contLL)+"-puntoComa");

                txtPython+= tab()+aux2;
                txtGo+= tab()+aux2;
                aux2="";
                txtPython+=" = ";
                txtGo+=" = ";

                for(int i = 0 ; i <= cont1; i = i + 1)
                {
                    if(i==0){
                        tmp+=auxP;
                        tmpG+=auxC;
                    }
                    else{
                        tmp+= "," + auxP;
                        tmpG+= ","+ auxC;
                    }

                };
                txtPython+= tmp+"\n";
                txtGo+=tmpG+"\n";
                auxP="";
                auxC="";
                tmp="";
                tmpG="";
                cont1=0;
                contLL++;
                contCL++;
            
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTAP ::= id TIPODATO 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        aux2+=String.valueOf(idd);
        aux2G+= String.valueOf(idd)+" "+String.valueOf(tdd);
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAP",21, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTAP ::= LISTAP Coma id TIPODATO 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        aux2+=","+String.valueOf(idd);
        aux2G+=","+String.valueOf(idd)+" "+String.valueOf(tdd);
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAP",21, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTA ::= id 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-idd",String.valueOf(contLL)+"-LISTA");
        arbolAux.InsertarRecursivo(nodoAux,idd.toString(),String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-idd");
        contCL++;
        aux2+=idd.toString();
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTA ::= LISTA Coma id 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Coma",String.valueOf(contLL)+"-LISTA");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"- , ",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Coma");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-idd",String.valueOf(contLL)+"-LISTA");
        arbolAux.InsertarRecursivo(nodoAux,idd.toString(),String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-idd");
        
        contCL++;
        aux2+=","+idd.toString();
        cont1=cont1+1;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LEJC ::= CONDICION 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-LEJC");

        contCL++;
        aux2+=auxP;
        aux2G+=auxC;
        auxC="";
        auxP="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LEJC",26, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$11 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Coma",String.valueOf(contLL)+"-LEJC");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"- , ",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Coma");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-LEJC");
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",43, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LEJC ::= LEJC Coma NT$11 CONDICION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        aux2+=","+auxP;
        aux2G+=","+auxC;
        contCL++;
        auxC="";
        auxP="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LEJC",26, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICIONALES ::= IF 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDICIONALES ::= SEGUN 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONDICIONALES ::= PARA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDICIONALES ::= MIENTRAS 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICIONALES ::= REPETIR 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$12 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        txtPython+=tab()+"if "+auxP+":\n";
        txtGo+=tab()+"if "+auxC+" {\n";
        contTPY+=1; auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",44, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF ::= condSi CONDICION NT$12 auxFS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IF",8, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // auxFS ::= entonces INSTRUCCIONES finSi 
            {
              Object RESULT =null;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("auxFS",27, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$13 ::= 
            {
              Object RESULT =null;

        contTPY-=1;
        txtPython+=tab()+"else:\n";
        txtGo+=tab()+"} else {\n";
        contTPY+=1;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",45, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // auxFS ::= entonces INSTRUCCIONES contrario NT$13 INSTRUCCIONES finSi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("auxFS",27, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // auxFS ::= entonces INSTRUCCIONES BLOQUE finSi 
            {
              Object RESULT =null;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("auxFS",27, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$14 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        contTPY-=1; 
        txtPython+=tab()+"elif "+auxP+":\n";
        txtGo+= tab()+"}else if "+auxC+" {\n";
        contTPY+=1;
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",46, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BLOQUE ::= OSi CONDICION entonces NT$14 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$15 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        contTPY-=1; 
        txtPython+=tab()+"elif "+auxP+":\n";
        txtGo+=tab()+"}else if "+auxC+" {\n";
        contTPY+=1;
        auxP=""; auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",47, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BLOQUE ::= BLOQUE OSi CONDICION entonces NT$15 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$16 ::= 
            {
              Object RESULT =null;

        contTPY-=1;
        txtPython+=tab()+"else:\n";
        txtGo+=tab()+" }else {\n";
        contTPY+=1;
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",48, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BLOQUE ::= BLOQUE contrario NT$16 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$17 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        auxID=String.valueOf(idd);
        txtPython+=tab()+"for "+auxID+" in range("+auxP; 
        txtGo+=tab()+"for "+auxID+" := "+auxC+";";
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",49, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        tmpPARA=auxP;
        tmpPARAG=auxC;
        contTPY+=1; 
        auxP="";
        auxC="";
        
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",50, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARA ::= para id asignacion CONDICION NT$17 hasta CONDICION NT$18 BLOQUEPARA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",14, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$19 ::= 
            {
              Object RESULT =null;

        txtPython+=","+tmpPARA+"):\n";
        txtGo+= " "+tmpPARAG+";"+auxID+"++ {\n";
        tmpPARA ="";tmpPARAG="";auxID="";

    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$19",51, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BLOQUEPARA ::= hacer NT$19 INSTRUCCIONES finPara 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		 
        contTPY-=1; txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUEPARA",15, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$20 ::= 
            {
              Object RESULT =null;

        txtPython+=","+tmpPARA+","+auxP+"):\n";
        txtGo+= " "+tmpPARAG+";"+auxID+"+= "+auxC+"{\n";
        tmpPARA ="";tmpPARAG="";auxID="";auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$20",52, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BLOQUEPARA ::= incremento CONDICION hacer NT$20 INSTRUCCIONES finPara 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		 
        contTPY-=1; txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUEPARA",15, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BLOQUEPARA ::= hacer finPara 
            {
              Object RESULT =null;
		
        txtPython+=","+tmpPARA+"):\n";
        txtGo+= " "+tmpPARAG+";"+auxID+"++ {\n";
        tmpPARA ="";tmpPARAG="";auxID="";
        contTPY-=1; txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUEPARA",15, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BLOQUEPARA ::= incremento CONDICION hacer finPara 
            {
              Object RESULT =null;
		
        txtPython+=","+tmpPARA+","+auxP+"):\n";
        txtGo+= " "+tmpPARAG+";"+auxID+"+= "+auxC+"{\n";
        tmpPARA ="";tmpPARAG="";auxID="";auxP="";auxC="";
        contTPY-=1; txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUEPARA",15, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$21 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        txtPython+=tab()+"while "+auxP+":\n";
        txtGo+=tab()+"for true {\n"; contTPY+=1; 
        txtGo+=tab()+"if !("+auxC+"){\n";  contTPY+=1;
        txtGo+=tab()+"break\n";  contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$21",53, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MIENTRAS ::= mientras CONDICION hacer NT$21 INSTRUCCIONES finMientras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",16, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$22 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        txtPython+=tab()+"while "+auxP+":\n";
        txtGo+=tab()+"for true {\n"; contTPY+=1; 
        txtGo+=tab()+"if !("+auxC+"){\n";  contTPY+=1;
        txtGo+=tab()+"break\n";  contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$22",54, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MIENTRAS ::= mientras CONDICION hacer NT$22 finMientras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",16, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$23 ::= 
            {
              Object RESULT =null;

        txtPython+=tab()+"while "+auxP+"\n";
        txtGo+= tab()+"for true {\n";
        contTPY+=1;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$23",55, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // REPETIR ::= repetir NT$23 INSTRUCCIONES hastaQue CONDICION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        txtPython+=tab()+"if "+auxP+" == False:\n";
        txtGo+=tab()+"if ("+auxC+"){\n"; contTPY+=1;
        txtPython+=tab()+"break\n";
        txtGo+=tab()+"break}\n";
        contTPY-=2; 
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",17, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // REPETIR ::= repetir hastaQue CONDICION 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        txtPython+=tab()+"while "+auxP+"\n";
        txtGo+= tab()+"for true {\n"; contTPY+=1;
        txtPython+=tab()+"if "+auxP+" == False:\n";
        txtGo+=tab()+"if ("+auxC+"){\n"; contTPY+=1;
        txtPython+=tab()+"break\n"; 
        txtGo+=tab()+"break}\n";
        contTPY-=2; 
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",17, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // RETORNO ::= retornar CONDICION puntoComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		
        txtPython+=tab()+"return "+auxP+"\n";
        txtGo+=tab()+"return "+auxC+"\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",18, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$24 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        tmpPS+=auxP;
        txtGo+=tab()+"switch "+auxC+" {\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$24",56, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SEGUN ::= segun CONDICION hacer NT$24 CASE finSegun 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
        tmpPS="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",12, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$25 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

        txtPython+=tab()+"if "+tmpPS+"=="+auxP+":\n";
        txtGo+= tab()+"case "+auxC+":\n";
        contTPY+=1;
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$25",57, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CASE ::= aitr CONDICION citr entonces NT$25 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$26 ::= 
            {
              Object RESULT =null;

        contTPY-=1;
        txtPython+=tab()+"else:\n";
        txtGo+= tab()+"default:\n";
        contTPY+=1;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$26",58, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CASE ::= CASE contrario entonces NT$26 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$27 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

        contTPY-=1; 
        txtPython+=tab()+"elif "+tmpPS+"=="+auxP+":\n";
        txtGo+= tab()+"case "+auxC+":\n";
        contTPY+=1;
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$27",59, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CASE ::= CASE aitr CONDICION citr entonces NT$27 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERACIONES ::= EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        RESULT=a; 
        System.out.println("datoTot:"+a.toString());
        //si empieza con $ es caracter
        if(a.toString().length()>1){ 
            if((a.toString().charAt(1)=='$')){
                //obtener numero
                cA+= a.toString().replace("'","").replace("$","").replace("{","").replace("}","");
                c = Integer.parseInt(cA); 
                //verificar numero sino espacion en blanco
                if((c>=65 && c<=90)||(c>=97 && c<=122)){
                    char convertedChar = (char)c; 
                    auxP+= "'"+String.valueOf(convertedChar)+"'";
                    auxC+= "'"+String.valueOf(convertedChar)+"'";
                    cA="";
                }
                else{
                    auxP+= "\" \"";
                    auxC+= "\" \"";
                    cA="";
                }
            }
            else if(a.toString().toLowerCase().equals("verdadero")){
                auxP+= "True";
                auxC+= "true";
            }
            else if(a.toString().toLowerCase().equals("falso")){
                auxP+= "False";
                auxC+= "false";
            }
            else{
                auxP+= a.toString();
                auxC+= a.toString();
            }
        }
        else{
            auxP+= a.toString();
            auxC+= a.toString();
        }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES",31, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= EXPRESION mas OP1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = sumaO(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= EXPRESION resta OP1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = restaO(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= OP1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT =a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP1 ::= OP1 mult OP2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = multi(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP1",28, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP1 ::= OP1 div OP2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = divs(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP1",28, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP1 ::= OP1 Rmod OP2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = modulo(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP1",28, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OP1 ::= OP2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT =a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP1",28, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OP2 ::= OP2 Rpotencia abrir_cor OP3 cerrar_cor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		RESULT = potencia(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP2",29, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP2 ::= OP3 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP2",29, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$28 ::= 
            {
              Object RESULT =null;
auxP+="("; auxC+="(";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$28",60, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OP3 ::= abrir_par NT$28 OPERACIONES cerrar_par 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		RESULT = a; auxP+=")"; auxC+=")";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OP3 ::= digitoEntero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OP3 ::= digitoDecimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP3 ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP3 ::= Cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OP3 ::= caracter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OP3 ::= Rtrue 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OP3 ::= Rfalse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OP3 ::= caracterAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
            RESULT = a;
            
        
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CONDICION ::= OPERACIONES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$29 ::= 
            {
              Object RESULT =null;
		int oprleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
auxP+=opr; auxC+=opr;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$29",61, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CONDICION ::= OPERACIONES OP NT$29 OPERACIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$30 ::= 
            {
              Object RESULT =null;
		int ooplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int ooplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oopl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        if(oopl.toString().equals("or")){
            auxP+=" or ";
            auxC+=" || ";
        }

        if(oopl.toString().equals("and")){
            auxP+=" and ";
            auxC+=" && ";
        }

        if(oopl.toString().equals("not")){
            auxP+=" not ";
            auxC+=" ! ";
        }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$30",62, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$31 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int ooplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int ooplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object oopl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
auxP+=opr; auxC+=opr;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$31",63, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CONDICION ::= CONDICION OPL NT$30 OPERACIONES OP NT$31 OPERACIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int ooplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).left;
		int ooplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).right;
		Object oopl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OP ::= mayor 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=">";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OP ::= menor 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="<";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OP ::= mayorIgual 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=">=";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OP ::= menorIgual 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="<=";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OP ::= igual 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="==";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OP ::= diferente 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="!=";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OPL ::= or 
            {
              Object RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=opl;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OPL",25, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OPL ::= and 
            {
              Object RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=opl;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OPL",25, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPL ::= not 
            {
              Object RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=opl;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OPL",25, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // INSTRUCCIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // INSTRUCCIONES ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // INSTRUCCIONES ::= CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // INSTRUCCIONES ::= LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // INSTRUCCIONES ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // INSTRUCCIONES ::= RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // INSTRUCCIONES ::= INSTRUCCIONES RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // INSTRUCCIONES ::= INSTRUCCIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // INSTRUCCIONES ::= INSTRUCCIONES ASIGNACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // INSTRUCCIONES ::= INSTRUCCIONES CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // INSTRUCCIONES ::= INSTRUCCIONES LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // INSTRUCCIONES ::= INSTRUCCIONES IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // TIPODATO ::= Rnumero 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="float64";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // TIPODATO ::= Rcadena 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="string";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // TIPODATO ::= Rboolean 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="bool";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // TIPODATO ::= Rcaracter 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="byte";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$A_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$A_sintactico$do_action(
    int                        CUP$A_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_sintactico$parser,
    java.util.Stack            CUP$A_sintactico$stack,
    int                        CUP$A_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$A_sintactico$do_action_part00000000(
                               CUP$A_sintactico$act_num,
                               CUP$A_sintactico$parser,
                               CUP$A_sintactico$stack,
                               CUP$A_sintactico$top);
    }
}

}
