
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import proyecto_olc1.Nodo;
import proyecto_olc1.arbolSintactico;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class A_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public A_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public A_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public A_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\002\004\000\002\042\002\000\002\003" +
    "\006\000\002\003\004\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\004\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\004\000\002\031\007\000\002\031\010\000" +
    "\002\043\002\000\002\026\007\000\002\044\002\000\002" +
    "\026\013\000\002\045\002\000\002\030\010\000\002\046" +
    "\002\000\002\030\014\000\002\025\005\000\002\025\005" +
    "\000\002\047\002\000\002\050\002\000\002\005\013\000" +
    "\002\004\006\000\002\027\004\000\002\027\006\000\002" +
    "\010\003\000\002\010\005\000\002\034\003\000\002\034" +
    "\005\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\051\002\000" +
    "\002\012\006\000\002\035\005\000\002\052\002\000\002" +
    "\035\010\000\002\035\006\000\002\053\002\000\002\015" +
    "\007\000\002\054\002\000\002\015\010\000\002\055\002" +
    "\000\002\015\006\000\002\056\002\000\002\057\002\000" +
    "\002\020\013\000\002\060\002\000\002\021\006\000\002" +
    "\061\002\000\002\021\010\000\002\021\004\000\002\021" +
    "\006\000\002\062\002\000\002\022\010\000\002\063\002" +
    "\000\002\022\007\000\002\064\002\000\002\023\007\000" +
    "\002\023\005\000\002\024\005\000\002\065\002\000\002" +
    "\016\010\000\002\066\002\000\002\017\010\000\002\067" +
    "\002\000\002\017\007\000\002\070\002\000\002\017\011" +
    "\000\002\041\003\000\002\006\005\000\002\006\005\000" +
    "\002\006\003\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\003\000\002\037\007\000\002\037" +
    "\003\000\002\071\002\000\002\040\006\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\013\003\000\002\072\002\000\002\013" +
    "\006\000\002\073\002\000\002\074\002\000\002\013\011" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\006\003\004\046\006\001\002\000\004\047" +
    "\367\001\002\000\004\002\366\001\002\000\034\050\000" +
    "\051\000\055\000\061\000\065\000\071\000\073\000\075" +
    "\000\076\000\101\000\103\000\104\000\105\000\001\002" +
    "\000\034\050\026\051\033\055\022\061\027\065\013\071" +
    "\021\073\015\075\032\076\010\101\042\103\035\104\020" +
    "\105\014\001\002\000\004\051\353\001\002\000\062\031" +
    "\uffd6\047\uffd6\050\uffd6\051\uffd6\055\uffd6\056\uffd6\057\uffd6" +
    "\060\uffd6\061\uffd6\064\uffd6\065\uffd6\070\uffd6\071\uffd6\072" +
    "\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6\101\uffd6" +
    "\102\uffd6\103\uffd6\104\uffd6\105\uffd6\001\002\000\036\047" +
    "\ufff7\050\ufff7\051\ufff7\055\ufff7\061\ufff7\065\ufff7\071\ufff7" +
    "\073\ufff7\075\ufff7\076\ufff7\101\ufff7\103\ufff7\104\ufff7\105" +
    "\ufff7\001\002\000\004\051\327\001\002\000\024\004\116" +
    "\005\124\006\122\007\121\010\115\011\114\012\111\027" +
    "\117\051\107\001\002\000\032\050\uffb9\051\uffb9\055\uffb9" +
    "\061\uffb9\065\uffb9\071\uffb9\073\uffb9\074\320\075\uffb9\103" +
    "\uffb9\104\uffb9\105\uffb9\001\002\000\036\047\314\050\026" +
    "\051\033\055\022\061\027\065\013\071\021\073\015\075" +
    "\032\076\010\101\042\103\035\104\020\105\014\001\002" +
    "\000\036\047\ufffd\050\ufffd\051\ufffd\055\ufffd\061\ufffd\065" +
    "\ufffd\071\ufffd\073\ufffd\075\ufffd\076\ufffd\101\ufffd\103\ufffd" +
    "\104\ufffd\105\ufffd\001\002\000\024\004\116\005\124\006" +
    "\122\007\121\010\115\011\114\012\111\027\117\051\107" +
    "\001\002\000\024\004\116\005\124\006\122\007\121\010" +
    "\115\011\114\012\111\027\117\051\107\001\002\000\024" +
    "\004\116\005\124\006\122\007\121\010\115\011\114\012" +
    "\111\027\117\051\107\001\002\000\036\047\ufffa\050\ufffa" +
    "\051\ufffa\055\ufffa\061\ufffa\065\ufffa\071\ufffa\073\ufffa\075" +
    "\ufffa\076\ufffa\101\ufffa\103\ufffa\104\ufffa\105\ufffa\001\002" +
    "\000\062\031\uffd7\047\uffd7\050\uffd7\051\uffd7\055\uffd7\056" +
    "\uffd7\057\uffd7\060\uffd7\061\uffd7\064\uffd7\065\uffd7\070\uffd7" +
    "\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\077" +
    "\uffd7\101\uffd7\102\uffd7\103\uffd7\104\uffd7\105\uffd7\001\002" +
    "\000\062\031\uffd5\047\uffd5\050\uffd5\051\uffd5\055\uffd5\056" +
    "\uffd5\057\uffd5\060\uffd5\061\uffd5\064\uffd5\065\uffd5\070\uffd5" +
    "\071\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5\077" +
    "\uffd5\101\uffd5\102\uffd5\103\uffd5\104\uffd5\105\uffd5\001\002" +
    "\000\004\051\uffe1\001\002\000\024\004\116\005\124\006" +
    "\122\007\121\010\115\011\114\012\111\027\117\051\107" +
    "\001\002\000\036\047\ufff9\050\ufff9\051\ufff9\055\ufff9\061" +
    "\ufff9\065\ufff9\071\ufff9\073\ufff9\075\ufff9\076\ufff9\101\ufff9" +
    "\103\ufff9\104\ufff9\105\ufff9\001\002\000\036\047\ufffc\050" +
    "\ufffc\051\ufffc\055\ufffc\061\ufffc\065\ufffc\071\ufffc\073\ufffc" +
    "\075\ufffc\076\ufffc\101\ufffc\103\ufffc\104\ufffc\105\ufffc\001" +
    "\002\000\024\004\116\005\124\006\122\007\121\010\115" +
    "\011\114\012\111\027\117\051\107\001\002\000\010\034" +
    "\uffdb\052\uffdb\054\uffdb\001\002\000\036\047\ufffb\050\ufffb" +
    "\051\ufffb\055\ufffb\061\ufffb\065\ufffb\071\ufffb\073\ufffb\075" +
    "\ufffb\076\ufffb\101\ufffb\103\ufffb\104\ufffb\105\ufffb\001\002" +
    "\000\004\051\173\001\002\000\062\031\uffd3\047\uffd3\050" +
    "\uffd3\051\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3" +
    "\064\uffd3\065\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074" +
    "\uffd3\075\uffd3\076\uffd3\077\uffd3\101\uffd3\102\uffd3\103\uffd3" +
    "\104\uffd3\105\uffd3\001\002\000\036\047\ufff6\050\ufff6\051" +
    "\ufff6\055\ufff6\061\ufff6\065\ufff6\071\ufff6\073\ufff6\075\ufff6" +
    "\076\ufff6\101\ufff6\103\ufff6\104\ufff6\105\ufff6\001\002\000" +
    "\062\031\uffd4\047\uffd4\050\uffd4\051\uffd4\055\uffd4\056\uffd4" +
    "\057\uffd4\060\uffd4\061\uffd4\064\uffd4\065\uffd4\070\uffd4\071" +
    "\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4" +
    "\101\uffd4\102\uffd4\103\uffd4\104\uffd4\105\uffd4\001\002\000" +
    "\006\034\105\054\106\001\002\000\004\051\044\001\002" +
    "\000\036\047\ufff8\050\ufff8\051\ufff8\055\ufff8\061\ufff8\065" +
    "\ufff8\071\ufff8\073\ufff8\075\ufff8\076\ufff8\101\ufff8\103\ufff8" +
    "\104\ufff8\105\ufff8\001\002\000\012\015\045\016\046\017" +
    "\047\020\051\001\002\000\040\030\uff7e\034\uff7e\050\uff7e" +
    "\051\uff7e\053\uff7e\055\uff7e\061\uff7e\065\uff7e\071\uff7e\073" +
    "\uff7e\075\uff7e\100\uff7e\103\uff7e\104\uff7e\105\uff7e\001\002" +
    "\000\040\030\uff7d\034\uff7d\050\uff7d\051\uff7d\053\uff7d\055" +
    "\uff7d\061\uff7d\065\uff7d\071\uff7d\073\uff7d\075\uff7d\100\uff7d" +
    "\103\uff7d\104\uff7d\105\uff7d\001\002\000\040\030\uff7c\034" +
    "\uff7c\050\uff7c\051\uff7c\053\uff7c\055\uff7c\061\uff7c\065\uff7c" +
    "\071\uff7c\073\uff7c\075\uff7c\100\uff7c\103\uff7c\104\uff7c\105" +
    "\uff7c\001\002\000\032\050\uffe7\051\uffe7\055\uffe7\061\uffe7" +
    "\065\uffe7\071\uffe7\073\uffe7\075\uffe7\100\053\103\uffe7\104" +
    "\uffe7\105\uffe7\001\002\000\040\030\uff7b\034\uff7b\050\uff7b" +
    "\051\uff7b\053\uff7b\055\uff7b\061\uff7b\065\uff7b\071\uff7b\073" +
    "\uff7b\075\uff7b\100\uff7b\103\uff7b\104\uff7b\105\uff7b\001\002" +
    "\000\030\050\026\051\033\055\022\061\027\065\013\071" +
    "\021\073\015\075\032\103\035\104\020\105\014\001\002" +
    "\000\004\027\054\001\002\000\004\051\056\001\002\000" +
    "\006\030\061\034\060\001\002\000\012\015\045\016\046" +
    "\017\047\020\051\001\002\000\006\030\uffdd\034\uffdd\001" +
    "\002\000\004\051\101\001\002\000\030\050\uffe5\051\uffe5" +
    "\055\uffe5\061\uffe5\065\uffe5\071\uffe5\073\uffe5\075\uffe5\103" +
    "\uffe5\104\uffe5\105\uffe5\001\002\000\030\050\026\051\033" +
    "\055\022\061\027\065\013\071\021\073\015\075\032\103" +
    "\035\104\020\105\014\001\002\000\054\031\uff87\050\uff87" +
    "\051\uff87\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87\064" +
    "\uff87\065\uff87\070\uff87\071\uff87\072\uff87\073\uff87\074\uff87" +
    "\075\uff87\077\uff87\102\uff87\103\uff87\104\uff87\105\uff87\001" +
    "\002\000\054\031\uff8a\050\uff8a\051\uff8a\055\uff8a\056\uff8a" +
    "\057\uff8a\060\uff8a\061\uff8a\064\uff8a\065\uff8a\070\uff8a\071" +
    "\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a\077\uff8a\102\uff8a" +
    "\103\uff8a\104\uff8a\105\uff8a\001\002\000\032\050\026\051" +
    "\033\055\022\061\027\065\013\071\021\073\015\075\032" +
    "\102\100\103\035\104\020\105\014\001\002\000\054\031" +
    "\uff85\050\uff85\051\uff85\055\uff85\056\uff85\057\uff85\060\uff85" +
    "\061\uff85\064\uff85\065\uff85\070\uff85\071\uff85\072\uff85\073" +
    "\uff85\074\uff85\075\uff85\077\uff85\102\uff85\103\uff85\104\uff85" +
    "\105\uff85\001\002\000\054\031\uff89\050\uff89\051\uff89\055" +
    "\uff89\056\uff89\057\uff89\060\uff89\061\uff89\064\uff89\065\uff89" +
    "\070\uff89\071\uff89\072\uff89\073\uff89\074\uff89\075\uff89\077" +
    "\uff89\102\uff89\103\uff89\104\uff89\105\uff89\001\002\000\054" +
    "\031\uff88\050\uff88\051\uff88\055\uff88\056\uff88\057\uff88\060" +
    "\uff88\061\uff88\064\uff88\065\uff88\070\uff88\071\uff88\072\uff88" +
    "\073\uff88\074\uff88\075\uff88\077\uff88\102\uff88\103\uff88\104" +
    "\uff88\105\uff88\001\002\000\054\031\uff86\050\uff86\051\uff86" +
    "\055\uff86\056\uff86\057\uff86\060\uff86\061\uff86\064\uff86\065" +
    "\uff86\070\uff86\071\uff86\072\uff86\073\uff86\074\uff86\075\uff86" +
    "\077\uff86\102\uff86\103\uff86\104\uff86\105\uff86\001\002\000" +
    "\054\031\uff80\050\uff80\051\uff80\055\uff80\056\uff80\057\uff80" +
    "\060\uff80\061\uff80\064\uff80\065\uff80\070\uff80\071\uff80\072" +
    "\uff80\073\uff80\074\uff80\075\uff80\077\uff80\102\uff80\103\uff80" +
    "\104\uff80\105\uff80\001\002\000\054\031\uff83\050\uff83\051" +
    "\uff83\055\uff83\056\uff83\057\uff83\060\uff83\061\uff83\064\uff83" +
    "\065\uff83\070\uff83\071\uff83\072\uff83\073\uff83\074\uff83\075" +
    "\uff83\077\uff83\102\uff83\103\uff83\104\uff83\105\uff83\001\002" +
    "\000\054\031\uff84\050\uff84\051\uff84\055\uff84\056\uff84\057" +
    "\uff84\060\uff84\061\uff84\064\uff84\065\uff84\070\uff84\071\uff84" +
    "\072\uff84\073\uff84\074\uff84\075\uff84\077\uff84\102\uff84\103" +
    "\uff84\104\uff84\105\uff84\001\002\000\054\031\uff82\050\uff82" +
    "\051\uff82\055\uff82\056\uff82\057\uff82\060\uff82\061\uff82\064" +
    "\uff82\065\uff82\070\uff82\071\uff82\072\uff82\073\uff82\074\uff82" +
    "\075\uff82\077\uff82\102\uff82\103\uff82\104\uff82\105\uff82\001" +
    "\002\000\054\031\uff81\050\uff81\051\uff81\055\uff81\056\uff81" +
    "\057\uff81\060\uff81\061\uff81\064\uff81\065\uff81\070\uff81\071" +
    "\uff81\072\uff81\073\uff81\074\uff81\075\uff81\077\uff81\102\uff81" +
    "\103\uff81\104\uff81\105\uff81\001\002\000\054\031\uff7f\050" +
    "\uff7f\051\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f\061\uff7f" +
    "\064\uff7f\065\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f\074" +
    "\uff7f\075\uff7f\077\uff7f\102\uff7f\103\uff7f\104\uff7f\105\uff7f" +
    "\001\002\000\036\047\uffe4\050\uffe4\051\uffe4\055\uffe4\061" +
    "\uffe4\065\uffe4\071\uffe4\073\uffe4\075\uffe4\076\uffe4\101\uffe4" +
    "\103\uffe4\104\uffe4\105\uffe4\001\002\000\012\015\045\016" +
    "\046\017\047\020\051\001\002\000\006\030\uffdc\034\uffdc" +
    "\001\002\000\032\050\026\051\033\055\022\061\027\065" +
    "\013\071\021\073\015\075\032\102\104\103\035\104\020" +
    "\105\014\001\002\000\036\047\uffe6\050\uffe6\051\uffe6\055" +
    "\uffe6\061\uffe6\065\uffe6\071\uffe6\073\uffe6\075\uffe6\076\uffe6" +
    "\101\uffe6\103\uffe6\104\uffe6\105\uffe6\001\002\000\004\051" +
    "\172\001\002\000\024\004\116\005\124\006\122\007\121" +
    "\010\115\011\114\012\111\027\117\051\107\001\002\000" +
    "\142\014\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f" +
    "\026\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035" +
    "\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f" +
    "\044\uff9f\045\uff9f\047\uff9f\050\uff9f\051\uff9f\055\uff9f\056" +
    "\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f" +
    "\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f\073" +
    "\uff9f\074\uff9f\075\uff9f\076\uff9f\077\uff9f\101\uff9f\102\uff9f" +
    "\103\uff9f\104\uff9f\105\uff9f\001\002\000\140\021\uffa4\022" +
    "\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\030\uffa4\031\uffa4" +
    "\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040" +
    "\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\047\uffa4" +
    "\050\uffa4\051\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061" +
    "\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4" +
    "\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076" +
    "\uffa4\077\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4" +
    "\001\002\000\142\014\uff9b\021\uff9b\022\uff9b\023\uff9b\024" +
    "\uff9b\025\uff9b\026\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b" +
    "\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042" +
    "\uff9b\043\uff9b\044\uff9b\045\uff9b\047\uff9b\050\uff9b\051\uff9b" +
    "\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063" +
    "\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b" +
    "\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b\101" +
    "\uff9b\102\uff9b\103\uff9b\104\uff9b\105\uff9b\001\002\000\140" +
    "\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\155\026\uffa6\030" +
    "\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6" +
    "\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045" +
    "\uffa6\047\uffa6\050\uffa6\051\uffa6\055\uffa6\056\uffa6\057\uffa6" +
    "\060\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066" +
    "\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6" +
    "\075\uffa6\076\uffa6\077\uffa6\101\uffa6\102\uffa6\103\uffa6\104" +
    "\uffa6\105\uffa6\001\002\000\136\021\uffaa\022\uffaa\023\152" +
    "\024\153\026\151\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\044\uffaa\045\uffaa\047\uffaa\050\uffaa\051\uffaa\055" +
    "\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa" +
    "\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072" +
    "\uffaa\073\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\101\uffaa" +
    "\102\uffaa\103\uffaa\104\uffaa\105\uffaa\001\002\000\142\014" +
    "\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c" +
    "\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036" +
    "\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c" +
    "\045\uff9c\047\uff9c\050\uff9c\051\uff9c\055\uff9c\056\uff9c\057" +
    "\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c" +
    "\066\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c\074" +
    "\uff9c\075\uff9c\076\uff9c\077\uff9c\101\uff9c\102\uff9c\103\uff9c" +
    "\104\uff9c\105\uff9c\001\002\000\142\014\uff9a\021\uff9a\022" +
    "\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\030\uff9a\031\uff9a" +
    "\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040" +
    "\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\047\uff9a" +
    "\050\uff9a\051\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\061" +
    "\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a" +
    "\070\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a\076" +
    "\uff9a\077\uff9a\101\uff9a\102\uff9a\103\uff9a\104\uff9a\105\uff9a" +
    "\001\002\000\142\014\uff9e\021\uff9e\022\uff9e\023\uff9e\024" +
    "\uff9e\025\uff9e\026\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e" +
    "\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042" +
    "\uff9e\043\uff9e\044\uff9e\045\uff9e\047\uff9e\050\uff9e\051\uff9e" +
    "\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063" +
    "\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e" +
    "\072\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e\101" +
    "\uff9e\102\uff9e\103\uff9e\104\uff9e\105\uff9e\001\002\000\024" +
    "\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012" +
    "\uffa3\027\uffa3\051\uffa3\001\002\000\124\030\uff99\031\uff99" +
    "\032\uff99\033\uff99\034\uff99\035\142\036\141\037\137\040" +
    "\136\041\140\042\143\043\uff99\044\uff99\045\uff99\047\uff99" +
    "\050\uff99\051\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061" +
    "\uff99\062\uff99\063\uff99\064\uff99\065\uff99\066\uff99\067\uff99" +
    "\070\uff99\071\uff99\072\uff99\073\uff99\074\uff99\075\uff99\076" +
    "\uff99\077\uff99\101\uff99\102\uff99\103\uff99\104\uff99\105\uff99" +
    "\001\002\000\142\014\uff9d\021\uff9d\022\uff9d\023\uff9d\024" +
    "\uff9d\025\uff9d\026\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d" +
    "\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042" +
    "\uff9d\043\uff9d\044\uff9d\045\uff9d\047\uff9d\050\uff9d\051\uff9d" +
    "\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063" +
    "\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d\071\uff9d" +
    "\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d\101" +
    "\uff9d\102\uff9d\103\uff9d\104\uff9d\105\uff9d\001\002\000\142" +
    "\014\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026" +
    "\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0" +
    "\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044" +
    "\uffa0\045\uffa0\047\uffa0\050\uffa0\051\uffa0\055\uffa0\056\uffa0" +
    "\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065" +
    "\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0" +
    "\074\uffa0\075\uffa0\076\uffa0\077\uffa0\101\uffa0\102\uffa0\103" +
    "\uffa0\104\uffa0\105\uffa0\001\002\000\130\021\147\022\146" +
    "\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\047\uffad\050\uffad\051\uffad\055\uffad\056\uffad\057" +
    "\uffad\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad" +
    "\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad\073\uffad\074" +
    "\uffad\075\uffad\076\uffad\077\uffad\101\uffad\102\uffad\103\uffad" +
    "\104\uffad\105\uffad\001\002\000\142\014\uffa1\021\uffa1\022" +
    "\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\030\uffa1\031\uffa1" +
    "\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040" +
    "\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\047\uffa1" +
    "\050\uffa1\051\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061" +
    "\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1" +
    "\070\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076" +
    "\uffa1\077\uffa1\101\uffa1\102\uffa1\103\uffa1\104\uffa1\105\uffa1" +
    "\001\002\000\012\033\130\043\131\044\126\045\127\001" +
    "\002\000\024\004\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c" +
    "\011\uff8c\012\uff8c\027\uff8c\051\uff8c\001\002\000\024\004" +
    "\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b" +
    "\027\uff8b\051\uff8b\001\002\000\062\031\uffde\047\uffde\050" +
    "\uffde\051\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde" +
    "\064\uffde\065\uffde\070\uffde\071\uffde\072\uffde\073\uffde\074" +
    "\uffde\075\uffde\076\uffde\077\uffde\101\uffde\102\uffde\103\uffde" +
    "\104\uffde\105\uffde\001\002\000\024\004\uff8d\005\uff8d\006" +
    "\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\027\uff8d\051\uff8d" +
    "\001\002\000\024\004\uff96\005\uff96\006\uff96\007\uff96\010" +
    "\uff96\011\uff96\012\uff96\027\uff96\051\uff96\001\002\000\024" +
    "\004\116\005\124\006\122\007\121\010\115\011\114\012" +
    "\111\027\117\051\107\001\002\000\016\035\142\036\141" +
    "\037\137\040\136\041\140\042\143\001\002\000\024\004" +
    "\uff95\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95" +
    "\027\uff95\051\uff95\001\002\000\024\004\uff90\005\uff90\006" +
    "\uff90\007\uff90\010\uff90\011\uff90\012\uff90\027\uff90\051\uff90" +
    "\001\002\000\024\004\uff91\005\uff91\006\uff91\007\uff91\010" +
    "\uff91\011\uff91\012\uff91\027\uff91\051\uff91\001\002\000\024" +
    "\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012" +
    "\uff8f\027\uff8f\051\uff8f\001\002\000\024\004\uff92\005\uff92" +
    "\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92\027\uff92\051" +
    "\uff92\001\002\000\024\004\uff93\005\uff93\006\uff93\007\uff93" +
    "\010\uff93\011\uff93\012\uff93\027\uff93\051\uff93\001\002\000" +
    "\024\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e" +
    "\012\uff8e\027\uff8e\051\uff8e\001\002\000\024\004\116\005" +
    "\124\006\122\007\121\010\115\011\114\012\111\027\117" +
    "\051\107\001\002\000\110\030\uff94\031\uff94\032\uff94\033" +
    "\uff94\034\uff94\043\uff94\044\uff94\045\uff94\047\uff94\050\uff94" +
    "\051\uff94\055\uff94\056\uff94\057\uff94\060\uff94\061\uff94\062" +
    "\uff94\063\uff94\064\uff94\065\uff94\066\uff94\067\uff94\070\uff94" +
    "\071\uff94\072\uff94\073\uff94\074\uff94\075\uff94\076\uff94\077" +
    "\uff94\101\uff94\102\uff94\103\uff94\104\uff94\105\uff94\001\002" +
    "\000\024\004\116\005\124\006\122\007\121\010\115\011" +
    "\114\012\111\027\117\051\107\001\002\000\024\004\116" +
    "\005\124\006\122\007\121\010\115\011\114\012\111\027" +
    "\117\051\107\001\002\000\136\021\uffac\022\uffac\023\152" +
    "\024\153\026\151\030\uffac\031\uffac\032\uffac\033\uffac\034" +
    "\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac" +
    "\043\uffac\044\uffac\045\uffac\047\uffac\050\uffac\051\uffac\055" +
    "\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac" +
    "\064\uffac\065\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072" +
    "\uffac\073\uffac\074\uffac\075\uffac\076\uffac\077\uffac\101\uffac" +
    "\102\uffac\103\uffac\104\uffac\105\uffac\001\002\000\024\004" +
    "\116\005\124\006\122\007\121\010\115\011\114\012\111" +
    "\027\117\051\107\001\002\000\024\004\116\005\124\006" +
    "\122\007\121\010\115\011\114\012\111\027\117\051\107" +
    "\001\002\000\024\004\116\005\124\006\122\007\121\010" +
    "\115\011\114\012\111\027\117\051\107\001\002\000\140" +
    "\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\155\026\uffa8\030" +
    "\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8" +
    "\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045" +
    "\uffa8\047\uffa8\050\uffa8\051\uffa8\055\uffa8\056\uffa8\057\uffa8" +
    "\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\066" +
    "\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8" +
    "\075\uffa8\076\uffa8\077\uffa8\101\uffa8\102\uffa8\103\uffa8\104" +
    "\uffa8\105\uffa8\001\002\000\004\013\156\001\002\000\024" +
    "\004\116\005\124\006\122\007\121\010\115\011\114\012" +
    "\111\027\117\051\107\001\002\000\004\014\160\001\002" +
    "\000\140\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026" +
    "\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5" +
    "\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044" +
    "\uffa5\045\uffa5\047\uffa5\050\uffa5\051\uffa5\055\uffa5\056\uffa5" +
    "\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065" +
    "\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5\073\uffa5" +
    "\074\uffa5\075\uffa5\076\uffa5\077\uffa5\101\uffa5\102\uffa5\103" +
    "\uffa5\104\uffa5\105\uffa5\001\002\000\140\021\uffa9\022\uffa9" +
    "\023\uffa9\024\uffa9\025\155\026\uffa9\030\uffa9\031\uffa9\032" +
    "\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\047\uffa9\050" +
    "\uffa9\051\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9" +
    "\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070" +
    "\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9" +
    "\077\uffa9\101\uffa9\102\uffa9\103\uffa9\104\uffa9\105\uffa9\001" +
    "\002\000\140\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\155" +
    "\026\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035" +
    "\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7" +
    "\044\uffa7\045\uffa7\047\uffa7\050\uffa7\051\uffa7\055\uffa7\056" +
    "\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7" +
    "\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073" +
    "\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7\101\uffa7\102\uffa7" +
    "\103\uffa7\104\uffa7\105\uffa7\001\002\000\136\021\uffab\022" +
    "\uffab\023\152\024\153\026\151\030\uffab\031\uffab\032\uffab" +
    "\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041" +
    "\uffab\042\uffab\043\uffab\044\uffab\045\uffab\047\uffab\050\uffab" +
    "\051\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062" +
    "\uffab\063\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab" +
    "\071\uffab\072\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077" +
    "\uffab\101\uffab\102\uffab\103\uffab\104\uffab\105\uffab\001\002" +
    "\000\024\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98\011" +
    "\uff98\012\uff98\027\uff98\051\uff98\001\002\000\024\004\116" +
    "\005\124\006\122\007\121\010\115\011\114\012\111\027" +
    "\117\051\107\001\002\000\110\030\uff97\031\uff97\032\uff97" +
    "\033\uff97\034\uff97\043\uff97\044\uff97\045\uff97\047\uff97\050" +
    "\uff97\051\uff97\055\uff97\056\uff97\057\uff97\060\uff97\061\uff97" +
    "\062\uff97\063\uff97\064\uff97\065\uff97\066\uff97\067\uff97\070" +
    "\uff97\071\uff97\072\uff97\073\uff97\074\uff97\075\uff97\076\uff97" +
    "\077\uff97\101\uff97\102\uff97\103\uff97\104\uff97\105\uff97\001" +
    "\002\000\024\004\116\005\124\006\122\007\121\010\115" +
    "\011\114\012\111\027\117\051\107\001\002\000\004\030" +
    "\171\001\002\000\142\014\uffa2\021\uffa2\022\uffa2\023\uffa2" +
    "\024\uffa2\025\uffa2\026\uffa2\030\uffa2\031\uffa2\032\uffa2\033" +
    "\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2" +
    "\042\uffa2\043\uffa2\044\uffa2\045\uffa2\047\uffa2\050\uffa2\051" +
    "\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2" +
    "\063\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2\071" +
    "\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2" +
    "\101\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2\001\002\000" +
    "\010\034\uffda\052\uffda\054\uffda\001\002\000\004\027\174" +
    "\001\002\000\026\004\116\005\124\006\122\007\121\010" +
    "\115\011\114\012\111\027\117\030\175\051\107\001\002" +
    "\000\004\033\204\001\002\000\006\030\201\034\200\001" +
    "\002\000\014\030\uffd9\034\uffd9\043\131\044\126\045\127" +
    "\001\002\000\024\004\116\005\124\006\122\007\121\010" +
    "\115\011\114\012\111\027\117\051\107\001\002\000\004" +
    "\033\202\001\002\000\062\031\uffec\047\uffec\050\uffec\051" +
    "\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec\064\uffec" +
    "\065\uffec\070\uffec\071\uffec\072\uffec\073\uffec\074\uffec\075" +
    "\uffec\076\uffec\077\uffec\101\uffec\102\uffec\103\uffec\104\uffec" +
    "\105\uffec\001\002\000\014\030\uffd8\034\uffd8\043\131\044" +
    "\126\045\127\001\002\000\062\031\uffed\047\uffed\050\uffed" +
    "\051\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed\064" +
    "\uffed\065\uffed\070\uffed\071\uffed\072\uffed\073\uffed\074\uffed" +
    "\075\uffed\076\uffed\077\uffed\101\uffed\102\uffed\103\uffed\104" +
    "\uffed\105\uffed\001\002\000\012\033\206\043\131\044\126" +
    "\045\127\001\002\000\062\031\uffb6\047\uffb6\050\uffb6\051" +
    "\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\064\uffb6" +
    "\065\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075" +
    "\uffb6\076\uffb6\077\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6" +
    "\105\uffb6\001\002\000\012\043\131\044\126\045\127\062" +
    "\210\001\002\000\004\031\uffb5\001\002\000\004\031\212" +
    "\001\002\000\024\004\116\005\124\006\122\007\121\010" +
    "\115\011\114\012\111\027\117\051\107\001\002\000\010" +
    "\031\214\056\216\064\215\001\002\000\024\004\116\005" +
    "\124\006\122\007\121\010\115\011\114\012\111\027\117" +
    "\051\107\001\002\000\062\031\uffb4\047\uffb4\050\uffb4\051" +
    "\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\064\uffb4" +
    "\065\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075" +
    "\uffb4\076\uffb4\077\uffb4\101\uffb4\102\uffb4\103\uffb4\104\uffb4" +
    "\105\uffb4\001\002\000\004\063\217\001\002\000\030\050" +
    "\uffb1\051\uffb1\055\uffb1\061\uffb1\065\uffb1\071\uffb1\073\uffb1" +
    "\075\uffb1\103\uffb1\104\uffb1\105\uffb1\001\002\000\030\050" +
    "\026\051\033\055\022\061\027\065\013\071\021\073\015" +
    "\075\032\103\035\104\020\105\014\001\002\000\036\031" +
    "\uffb0\050\026\051\033\055\022\056\uffb0\061\027\064\uffb0" +
    "\065\013\071\021\073\015\075\032\103\035\104\020\105" +
    "\014\001\002\000\012\032\223\043\131\044\126\045\127" +
    "\001\002\000\004\063\224\001\002\000\030\050\uffaf\051" +
    "\uffaf\055\uffaf\061\uffaf\065\uffaf\071\uffaf\073\uffaf\075\uffaf" +
    "\103\uffaf\104\uffaf\105\uffaf\001\002\000\030\050\026\051" +
    "\033\055\022\061\027\065\013\071\021\073\015\075\032" +
    "\103\035\104\020\105\014\001\002\000\036\031\uffae\050" +
    "\026\051\033\055\022\056\uffae\061\027\064\uffae\065\013" +
    "\071\021\073\015\075\032\103\035\104\020\105\014\001" +
    "\002\000\012\032\230\043\131\044\126\045\127\001\002" +
    "\000\004\063\231\001\002\000\030\050\uffb3\051\uffb3\055" +
    "\uffb3\061\uffb3\065\uffb3\071\uffb3\073\uffb3\075\uffb3\103\uffb3" +
    "\104\uffb3\105\uffb3\001\002\000\030\050\026\051\033\055" +
    "\022\061\027\065\013\071\021\073\015\075\032\103\035" +
    "\104\020\105\014\001\002\000\036\031\uffb2\050\026\051" +
    "\033\055\022\056\uffb2\061\027\064\uffb2\065\013\071\021" +
    "\073\015\075\032\103\035\104\020\105\014\001\002\000" +
    "\004\051\033\001\002\000\006\034\105\052\236\001\002" +
    "\000\012\015\045\016\046\017\047\020\051\001\002\000" +
    "\004\053\uffe0\001\002\000\004\053\241\001\002\000\024" +
    "\004\116\005\124\006\122\007\121\010\115\011\114\012" +
    "\111\027\117\051\107\001\002\000\012\033\243\043\131" +
    "\044\126\045\127\001\002\000\062\031\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf" +
    "\064\uffdf\065\uffdf\070\uffdf\071\uffdf\072\uffdf\073\uffdf\074" +
    "\uffdf\075\uffdf\076\uffdf\077\uffdf\101\uffdf\102\uffdf\103\uffdf" +
    "\104\uffdf\105\uffdf\001\002\000\012\043\131\044\126\045" +
    "\127\063\uffd2\001\002\000\004\063\247\001\002\000\062" +
    "\031\uffd1\047\uffd1\050\uffd1\051\uffd1\055\uffd1\056\uffd1\057" +
    "\uffd1\060\uffd1\061\uffd1\064\uffd1\065\uffd1\070\uffd1\071\uffd1" +
    "\072\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\101" +
    "\uffd1\102\uffd1\103\uffd1\104\uffd1\105\uffd1\001\002\000\030" +
    "\050\026\051\033\055\022\061\027\065\013\071\021\073" +
    "\015\075\032\103\035\104\020\105\014\001\002\000\036" +
    "\050\026\051\033\055\022\056\253\057\252\060\254\061" +
    "\027\065\013\071\021\073\015\075\032\103\035\104\020" +
    "\105\014\001\002\000\010\056\264\057\265\060\266\001" +
    "\002\000\062\031\uffd0\047\uffd0\050\uffd0\051\uffd0\055\uffd0" +
    "\056\uffd0\057\uffd0\060\uffd0\061\uffd0\064\uffd0\065\uffd0\070" +
    "\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0" +
    "\077\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\105\uffd0\001" +
    "\002\000\030\050\uffcf\051\uffcf\055\uffcf\061\uffcf\065\uffcf" +
    "\071\uffcf\073\uffcf\075\uffcf\103\uffcf\104\uffcf\105\uffcf\001" +
    "\002\000\024\004\116\005\124\006\122\007\121\010\115" +
    "\011\114\012\111\027\117\051\107\001\002\000\012\043" +
    "\131\044\126\045\127\063\256\001\002\000\030\050\uffcc" +
    "\051\uffcc\055\uffcc\061\uffcc\065\uffcc\071\uffcc\073\uffcc\075" +
    "\uffcc\103\uffcc\104\uffcc\105\uffcc\001\002\000\030\050\026" +
    "\051\033\055\022\061\027\065\013\071\021\073\015\075" +
    "\032\103\035\104\020\105\014\001\002\000\036\050\026" +
    "\051\033\055\022\056\uffcb\057\uffcb\060\uffcb\061\027\065" +
    "\013\071\021\073\015\075\032\103\035\104\020\105\014" +
    "\001\002\000\030\050\026\051\033\055\022\061\027\065" +
    "\013\071\021\073\015\075\032\103\035\104\020\105\014" +
    "\001\002\000\032\050\026\051\033\055\022\057\263\061" +
    "\027\065\013\071\021\073\015\075\032\103\035\104\020" +
    "\105\014\001\002\000\062\031\uffce\047\uffce\050\uffce\051" +
    "\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce\064\uffce" +
    "\065\uffce\070\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075" +
    "\uffce\076\uffce\077\uffce\101\uffce\102\uffce\103\uffce\104\uffce" +
    "\105\uffce\001\002\000\030\050\uffc8\051\uffc8\055\uffc8\061" +
    "\uffc8\065\uffc8\071\uffc8\073\uffc8\075\uffc8\103\uffc8\104\uffc8" +
    "\105\uffc8\001\002\000\062\031\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\064\uffcd" +
    "\065\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd\075" +
    "\uffcd\076\uffcd\077\uffcd\101\uffcd\102\uffcd\103\uffcd\104\uffcd" +
    "\105\uffcd\001\002\000\024\004\116\005\124\006\122\007" +
    "\121\010\115\011\114\012\111\027\117\051\107\001\002" +
    "\000\012\043\131\044\126\045\127\063\270\001\002\000" +
    "\030\050\uffca\051\uffca\055\uffca\061\uffca\065\uffca\071\uffca" +
    "\073\uffca\075\uffca\103\uffca\104\uffca\105\uffca\001\002\000" +
    "\030\050\026\051\033\055\022\061\027\065\013\071\021" +
    "\073\015\075\032\103\035\104\020\105\014\001\002\000" +
    "\036\050\026\051\033\055\022\056\uffc9\057\uffc9\060\uffc9" +
    "\061\027\065\013\071\021\073\015\075\032\103\035\104" +
    "\020\105\014\001\002\000\030\050\026\051\033\055\022" +
    "\061\027\065\013\071\021\073\015\075\032\103\035\104" +
    "\020\105\014\001\002\000\036\050\026\051\033\055\022" +
    "\056\uffc7\057\uffc7\060\uffc7\061\027\065\013\071\021\073" +
    "\015\075\032\103\035\104\020\105\014\001\002\000\012" +
    "\043\131\044\126\045\127\062\276\001\002\000\032\050" +
    "\uffbd\051\uffbd\055\uffbd\061\uffbd\065\uffbd\071\uffbd\072\uffbb" +
    "\073\uffbd\075\uffbd\103\uffbd\104\uffbd\105\uffbd\001\002\000" +
    "\004\072\303\001\002\000\030\050\026\051\033\055\022" +
    "\061\027\065\013\071\021\073\015\075\032\103\035\104" +
    "\020\105\014\001\002\000\032\050\026\051\033\055\022" +
    "\061\027\065\013\071\021\072\302\073\015\075\032\103" +
    "\035\104\020\105\014\001\002\000\062\031\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061" +
    "\uffbc\064\uffbc\065\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc" +
    "\074\uffbc\075\uffbc\076\uffbc\077\uffbc\101\uffbc\102\uffbc\103" +
    "\uffbc\104\uffbc\105\uffbc\001\002\000\062\031\uffba\047\uffba" +
    "\050\uffba\051\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061" +
    "\uffba\064\uffba\065\uffba\070\uffba\071\uffba\072\uffba\073\uffba" +
    "\074\uffba\075\uffba\076\uffba\077\uffba\101\uffba\102\uffba\103" +
    "\uffba\104\uffba\105\uffba\001\002\000\012\033\305\043\131" +
    "\044\126\045\127\001\002\000\062\031\uffe3\047\uffe3\050" +
    "\uffe3\051\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3" +
    "\064\uffe3\065\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074" +
    "\uffe3\075\uffe3\076\uffe3\077\uffe3\101\uffe3\102\uffe3\103\uffe3" +
    "\104\uffe3\105\uffe3\001\002\000\036\047\uffef\050\uffef\051" +
    "\uffef\055\uffef\061\uffef\065\uffef\071\uffef\073\uffef\075\uffef" +
    "\076\uffef\101\uffef\103\uffef\104\uffef\105\uffef\001\002\000" +
    "\036\047\ufff4\050\ufff4\051\ufff4\055\ufff4\061\ufff4\065\ufff4" +
    "\071\ufff4\073\ufff4\075\ufff4\076\ufff4\101\ufff4\103\ufff4\104" +
    "\ufff4\105\ufff4\001\002\000\036\047\ufff2\050\ufff2\051\ufff2" +
    "\055\ufff2\061\ufff2\065\ufff2\071\ufff2\073\ufff2\075\ufff2\076" +
    "\ufff2\101\ufff2\103\ufff2\104\ufff2\105\ufff2\001\002\000\036" +
    "\047\ufff3\050\ufff3\051\ufff3\055\ufff3\061\ufff3\065\ufff3\071" +
    "\ufff3\073\ufff3\075\ufff3\076\ufff3\101\ufff3\103\ufff3\104\ufff3" +
    "\105\ufff3\001\002\000\036\047\ufff1\050\ufff1\051\ufff1\055" +
    "\ufff1\061\ufff1\065\ufff1\071\ufff1\073\ufff1\075\ufff1\076\ufff1" +
    "\101\ufff1\103\ufff1\104\ufff1\105\ufff1\001\002\000\036\047" +
    "\ufff5\050\ufff5\051\ufff5\055\ufff5\061\ufff5\065\ufff5\071\ufff5" +
    "\073\ufff5\075\ufff5\076\ufff5\101\ufff5\103\ufff5\104\ufff5\105" +
    "\ufff5\001\002\000\004\002\uffff\001\002\000\036\047\uffee" +
    "\050\uffee\051\uffee\055\uffee\061\uffee\065\uffee\071\uffee\073" +
    "\uffee\075\uffee\076\uffee\101\uffee\103\uffee\104\uffee\105\uffee" +
    "\001\002\000\036\047\ufff0\050\ufff0\051\ufff0\055\ufff0\061" +
    "\ufff0\065\ufff0\071\ufff0\073\ufff0\075\ufff0\076\ufff0\101\ufff0" +
    "\103\ufff0\104\ufff0\105\ufff0\001\002\000\030\050\026\051" +
    "\033\055\022\061\027\065\013\071\021\073\015\075\032" +
    "\103\035\104\020\105\014\001\002\000\024\004\116\005" +
    "\124\006\122\007\121\010\115\011\114\012\111\027\117" +
    "\051\107\001\002\000\070\031\uffb7\043\131\044\126\045" +
    "\127\047\uffb7\050\uffb7\051\uffb7\055\uffb7\056\uffb7\057\uffb7" +
    "\060\uffb7\061\uffb7\064\uffb7\065\uffb7\070\uffb7\071\uffb7\072" +
    "\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\101\uffb7" +
    "\102\uffb7\103\uffb7\104\uffb7\105\uffb7\001\002\000\032\050" +
    "\026\051\033\055\022\061\027\065\013\071\021\073\015" +
    "\074\323\075\032\103\035\104\020\105\014\001\002\000" +
    "\024\004\116\005\124\006\122\007\121\010\115\011\114" +
    "\012\111\027\117\051\107\001\002\000\070\031\uffb8\043" +
    "\131\044\126\045\127\047\uffb8\050\uffb8\051\uffb8\055\uffb8" +
    "\056\uffb8\057\uffb8\060\uffb8\061\uffb8\064\uffb8\065\uffb8\070" +
    "\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8" +
    "\077\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8\105\uffb8\001" +
    "\002\000\012\033\326\043\131\044\126\045\127\001\002" +
    "\000\062\031\uffe2\047\uffe2\050\uffe2\051\uffe2\055\uffe2\056" +
    "\uffe2\057\uffe2\060\uffe2\061\uffe2\064\uffe2\065\uffe2\070\uffe2" +
    "\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077" +
    "\uffe2\101\uffe2\102\uffe2\103\uffe2\104\uffe2\105\uffe2\001\002" +
    "\000\004\054\330\001\002\000\024\004\116\005\124\006" +
    "\122\007\121\010\115\011\114\012\111\027\117\051\107" +
    "\001\002\000\012\043\131\044\126\045\127\066\uffc6\001" +
    "\002\000\004\066\333\001\002\000\024\004\116\005\124" +
    "\006\122\007\121\010\115\011\114\012\111\027\117\051" +
    "\107\001\002\000\014\043\131\044\126\045\127\062\uffc5" +
    "\067\uffc5\001\002\000\006\062\336\067\337\001\002\000" +
    "\032\050\uffc3\051\uffc3\055\uffc3\061\uffc3\065\uffc3\070\347" +
    "\071\uffc3\073\uffc3\075\uffc3\103\uffc3\104\uffc3\105\uffc3\001" +
    "\002\000\024\004\116\005\124\006\122\007\121\010\115" +
    "\011\114\012\111\027\117\051\107\001\002\000\062\031" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\055\uffc4\056\uffc4\057\uffc4" +
    "\060\uffc4\061\uffc4\064\uffc4\065\uffc4\070\uffc4\071\uffc4\072" +
    "\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\101\uffc4" +
    "\102\uffc4\103\uffc4\104\uffc4\105\uffc4\001\002\000\012\043" +
    "\131\044\126\045\127\062\342\001\002\000\032\050\uffc1" +
    "\051\uffc1\055\uffc1\061\uffc1\065\uffc1\070\343\071\uffc1\073" +
    "\uffc1\075\uffc1\103\uffc1\104\uffc1\105\uffc1\001\002\000\062" +
    "\031\uffbe\047\uffbe\050\uffbe\051\uffbe\055\uffbe\056\uffbe\057" +
    "\uffbe\060\uffbe\061\uffbe\064\uffbe\065\uffbe\070\uffbe\071\uffbe" +
    "\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\101" +
    "\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe\001\002\000\030" +
    "\050\026\051\033\055\022\061\027\065\013\071\021\073" +
    "\015\075\032\103\035\104\020\105\014\001\002\000\032" +
    "\050\026\051\033\055\022\061\027\065\013\070\346\071" +
    "\021\073\015\075\032\103\035\104\020\105\014\001\002" +
    "\000\062\031\uffc0\047\uffc0\050\uffc0\051\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\060\uffc0\061\uffc0\064\uffc0\065\uffc0\070\uffc0" +
    "\071\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077" +
    "\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0\105\uffc0\001\002" +
    "\000\062\031\uffbf\047\uffbf\050\uffbf\051\uffbf\055\uffbf\056" +
    "\uffbf\057\uffbf\060\uffbf\061\uffbf\064\uffbf\065\uffbf\070\uffbf" +
    "\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077" +
    "\uffbf\101\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf\001\002" +
    "\000\030\050\026\051\033\055\022\061\027\065\013\071" +
    "\021\073\015\075\032\103\035\104\020\105\014\001\002" +
    "\000\032\050\026\051\033\055\022\061\027\065\013\070" +
    "\352\071\021\073\015\075\032\103\035\104\020\105\014" +
    "\001\002\000\062\031\uffc2\047\uffc2\050\uffc2\051\uffc2\055" +
    "\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\064\uffc2\065\uffc2" +
    "\070\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076" +
    "\uffc2\077\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2" +
    "\001\002\000\032\050\uffeb\051\uffeb\055\uffeb\061\uffeb\065" +
    "\uffeb\071\uffeb\073\uffeb\075\uffeb\100\355\103\uffeb\104\uffeb" +
    "\105\uffeb\001\002\000\030\050\026\051\033\055\022\061" +
    "\027\065\013\071\021\073\015\075\032\103\035\104\020" +
    "\105\014\001\002\000\004\027\356\001\002\000\004\051" +
    "\056\001\002\000\006\030\360\034\060\001\002\000\030" +
    "\050\uffe9\051\uffe9\055\uffe9\061\uffe9\065\uffe9\071\uffe9\073" +
    "\uffe9\075\uffe9\103\uffe9\104\uffe9\105\uffe9\001\002\000\030" +
    "\050\026\051\033\055\022\061\027\065\013\071\021\073" +
    "\015\075\032\103\035\104\020\105\014\001\002\000\032" +
    "\050\026\051\033\055\022\061\027\065\013\071\021\073" +
    "\015\075\032\077\363\103\035\104\020\105\014\001\002" +
    "\000\036\047\uffe8\050\uffe8\051\uffe8\055\uffe8\061\uffe8\065" +
    "\uffe8\071\uffe8\073\uffe8\075\uffe8\076\uffe8\101\uffe8\103\uffe8" +
    "\104\uffe8\105\uffe8\001\002\000\032\050\026\051\033\055" +
    "\022\061\027\065\013\071\021\073\015\075\032\077\365" +
    "\103\035\104\020\105\014\001\002\000\036\047\uffea\050" +
    "\uffea\051\uffea\055\uffea\061\uffea\065\uffea\071\uffea\073\uffea" +
    "\075\uffea\076\uffea\101\uffea\103\uffea\104\uffea\105\uffea\001" +
    "\002\000\004\002\001\001\002\000\004\002\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\006\001\001\000\040\002\015" +
    "\004\030\005\016\010\040\011\033\012\023\016\010\020" +
    "\024\022\037\023\035\024\022\025\036\026\027\030\042" +
    "\031\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\122\013\324" +
    "\036\112\037\111\040\107\041\117\001\001\000\004\064" +
    "\316\001\001\000\036\004\310\005\306\010\040\011\312" +
    "\012\023\016\010\020\024\022\037\023\035\024\307\025" +
    "\314\026\311\030\315\031\305\001\001\000\002\001\001" +
    "\000\016\006\122\013\303\036\112\037\111\040\107\041" +
    "\117\001\001\000\016\006\122\013\274\036\112\037\111" +
    "\040\107\041\117\001\001\000\016\006\122\013\243\036" +
    "\112\037\111\040\107\041\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\233\001" +
    "\001\000\016\006\122\013\206\036\112\037\111\040\107" +
    "\041\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\122\013\204\036\112\037\111\040\107\041\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\051\001\001\000\002\001" +
    "\001\000\034\004\066\005\063\010\040\011\067\012\023" +
    "\014\102\016\010\020\024\022\037\023\035\024\065\025" +
    "\070\031\062\001\001\000\002\001\001\000\004\027\054" +
    "\001\001\000\002\001\001\000\004\007\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\061\001\001" +
    "\000\034\004\066\005\063\010\040\011\067\012\023\014" +
    "\064\016\010\020\024\022\037\023\035\024\065\025\070" +
    "\031\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\004\074\005\072\010\040\011\075\012\023\016\010" +
    "\020\024\022\037\023\035\024\073\025\076\031\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\101\001\001\000" +
    "\002\001\001\000\032\004\074\005\072\010\040\011\075" +
    "\012\023\016\010\020\024\022\037\023\035\024\073\025" +
    "\076\031\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\122\013\124\036\112\037\111\040\107\041" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\071\166" +
    "\001\001\000\004\032\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\073\132\001\001" +
    "\000\014\006\122\036\112\037\111\040\107\041\133\001" +
    "\001\000\004\032\134\001\001\000\004\074\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\122\036\112\037\111\040\107\041\144\001\001\000" +
    "\002\001\001\000\010\036\162\037\111\040\107\001\001" +
    "\000\010\036\147\037\111\040\107\001\001\000\002\001" +
    "\001\000\006\037\161\040\107\001\001\000\006\037\160" +
    "\040\107\001\001\000\006\037\153\040\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\072\164\001\001" +
    "\000\014\006\122\036\112\037\111\040\107\041\165\001" +
    "\001\000\002\001\001\000\014\006\122\036\112\037\111" +
    "\040\107\041\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\122" +
    "\013\176\034\175\036\112\037\111\040\107\041\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\131" +
    "\001\001\000\016\006\122\013\202\036\112\037\111\040" +
    "\107\041\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\131\001\001\000\002\001\001\000\004\033" +
    "\131\001\001\000\002\001\001\000\004\033\131\001\001" +
    "\000\004\065\210\001\001\000\004\017\212\001\001\000" +
    "\016\006\122\013\226\036\112\037\111\040\107\041\117" +
    "\001\001\000\002\001\001\000\016\006\122\013\221\036" +
    "\112\037\111\040\107\041\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\067\217\001\001\000\034\004" +
    "\066\005\063\010\040\011\067\012\023\014\220\016\010" +
    "\020\024\022\037\023\035\024\065\025\070\031\062\001" +
    "\001\000\032\004\074\005\072\010\040\011\075\012\023" +
    "\016\010\020\024\022\037\023\035\024\073\025\076\031" +
    "\071\001\001\000\004\033\131\001\001\000\002\001\001" +
    "\000\004\070\224\001\001\000\034\004\066\005\063\010" +
    "\040\011\067\012\023\014\225\016\010\020\024\022\037" +
    "\023\035\024\065\025\070\031\062\001\001\000\032\004" +
    "\074\005\072\010\040\011\075\012\023\016\010\020\024" +
    "\022\037\023\035\024\073\025\076\031\071\001\001\000" +
    "\004\033\131\001\001\000\002\001\001\000\004\066\231" +
    "\001\001\000\034\004\066\005\063\010\040\011\067\012" +
    "\023\014\232\016\010\020\024\022\037\023\035\024\065" +
    "\025\070\031\062\001\001\000\032\004\074\005\072\010" +
    "\040\011\075\012\023\016\010\020\024\022\037\023\035" +
    "\024\073\025\076\031\071\001\001\000\004\010\234\001" +
    "\001\000\002\001\001\000\004\007\236\001\001\000\004" +
    "\050\237\001\001\000\002\001\001\000\016\006\122\013" +
    "\241\036\112\037\111\040\107\041\117\001\001\000\004" +
    "\033\131\001\001\000\002\001\001\000\006\033\131\051" +
    "\244\001\001\000\004\035\245\001\001\000\002\001\001" +
    "\000\034\004\066\005\063\010\040\011\067\012\023\014" +
    "\247\016\010\020\024\022\037\023\035\024\065\025\070" +
    "\031\062\001\001\000\034\004\074\005\072\010\040\011" +
    "\075\012\023\015\250\016\010\020\024\022\037\023\035" +
    "\024\073\025\076\031\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\260\001\001\000\016\006\122" +
    "\013\254\036\112\037\111\040\107\041\117\001\001\000" +
    "\004\033\131\001\001\000\004\053\256\001\001\000\034" +
    "\004\066\005\063\010\040\011\067\012\023\014\257\016" +
    "\010\020\024\022\037\023\035\024\065\025\070\031\062" +
    "\001\001\000\032\004\074\005\072\010\040\011\075\012" +
    "\023\016\010\020\024\022\037\023\035\024\073\025\076" +
    "\031\071\001\001\000\034\004\066\005\063\010\040\011" +
    "\067\012\023\014\261\016\010\020\024\022\037\023\035" +
    "\024\065\025\070\031\062\001\001\000\032\004\074\005" +
    "\072\010\040\011\075\012\023\016\010\020\024\022\037" +
    "\023\035\024\073\025\076\031\071\001\001\000\002\001" +
    "\001\000\004\055\272\001\001\000\002\001\001\000\016" +
    "\006\122\013\266\036\112\037\111\040\107\041\117\001" +
    "\001\000\004\033\131\001\001\000\004\054\270\001\001" +
    "\000\034\004\066\005\063\010\040\011\067\012\023\014" +
    "\271\016\010\020\024\022\037\023\035\024\065\025\070" +
    "\031\062\001\001\000\032\004\074\005\072\010\040\011" +
    "\075\012\023\016\010\020\024\022\037\023\035\024\073" +
    "\025\076\031\071\001\001\000\034\004\066\005\063\010" +
    "\040\011\067\012\023\014\273\016\010\020\024\022\037" +
    "\023\035\024\065\025\070\031\062\001\001\000\032\004" +
    "\074\005\072\010\040\011\075\012\023\016\010\020\024" +
    "\022\037\023\035\024\073\025\076\031\071\001\001\000" +
    "\004\033\131\001\001\000\006\062\277\063\276\001\001" +
    "\000\002\001\001\000\034\004\066\005\063\010\040\011" +
    "\067\012\023\014\300\016\010\020\024\022\037\023\035" +
    "\024\065\025\070\031\062\001\001\000\032\004\074\005" +
    "\072\010\040\011\075\012\023\016\010\020\024\022\037" +
    "\023\035\024\073\025\076\031\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\004\066\005\063\010\040\011\067\012\023\014\321" +
    "\016\010\020\024\022\037\023\035\024\065\025\070\031" +
    "\062\001\001\000\016\006\122\013\320\036\112\037\111" +
    "\040\107\041\117\001\001\000\004\033\131\001\001\000" +
    "\032\004\074\005\072\010\040\011\075\012\023\016\010" +
    "\020\024\022\037\023\035\024\073\025\076\031\071\001" +
    "\001\000\016\006\122\013\323\036\112\037\111\040\107" +
    "\041\117\001\001\000\004\033\131\001\001\000\004\033" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\122\013\330\036\112\037\111\040\107\041\117\001" +
    "\001\000\006\033\131\056\331\001\001\000\002\001\001" +
    "\000\016\006\122\013\333\036\112\037\111\040\107\041" +
    "\117\001\001\000\006\033\131\057\334\001\001\000\004" +
    "\021\337\001\001\000\004\060\347\001\001\000\016\006" +
    "\122\013\340\036\112\037\111\040\107\041\117\001\001" +
    "\000\002\001\001\000\004\033\131\001\001\000\004\061" +
    "\343\001\001\000\002\001\001\000\034\004\066\005\063" +
    "\010\040\011\067\012\023\014\344\016\010\020\024\022" +
    "\037\023\035\024\065\025\070\031\062\001\001\000\032" +
    "\004\074\005\072\010\040\011\075\012\023\016\010\020" +
    "\024\022\037\023\035\024\073\025\076\031\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\066\005" +
    "\063\010\040\011\067\012\023\014\350\016\010\020\024" +
    "\022\037\023\035\024\065\025\070\031\062\001\001\000" +
    "\032\004\074\005\072\010\040\011\075\012\023\016\010" +
    "\020\024\022\037\023\035\024\073\025\076\031\071\001" +
    "\001\000\002\001\001\000\004\043\353\001\001\000\034" +
    "\004\066\005\063\010\040\011\067\012\023\014\363\016" +
    "\010\020\024\022\037\023\035\024\065\025\070\031\062" +
    "\001\001\000\002\001\001\000\004\027\356\001\001\000" +
    "\002\001\001\000\004\044\360\001\001\000\034\004\066" +
    "\005\063\010\040\011\067\012\023\014\361\016\010\020" +
    "\024\022\037\023\035\024\065\025\070\031\062\001\001" +
    "\000\032\004\074\005\072\010\040\011\075\012\023\016" +
    "\010\020\024\022\037\023\035\024\073\025\076\031\071" +
    "\001\001\000\002\001\001\000\032\004\074\005\072\010" +
    "\040\011\075\012\023\016\010\020\024\022\037\023\035" +
    "\024\073\025\076\031\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Variables para el Arbol sintactico
    proyecto_olc1.arbolSintactico arbolAux = proyecto_olc1.interfaz.arbol;
    proyecto_olc1.Nodo nodoAux = proyecto_olc1.interfaz.nodo;

    int v1 = 0;
    int contLL = 0;
    String cond;

    public static String txtPython = ""; //Variable que guarda el código python
    String auxP = ""; //Guarda condicion/expresion
    String aux2=""; //Guarda informacion de lista parametros, nombres y expresiones/condiciones
    String tmpPS = ""; //Guarda condicion del switch case
    String tmp = "";   // Guarda lista de resultados asignacion/declaracion
    String tmpPARA =""; //Guarda condicion hasta(condicion) del ciclo para
    int cont1 = 0; //contador de nombres asignacion/declaracion

    int contTPY = 0; //contador de tabulacion
    
    public static String txtGo = ""; //Variable que guarda el código Golang
    String auxTP = ""; //guarda el tipo de dato
    String auxC = "";
    String aux2G = "";
    String tmpG="";
    String auxID="";
    String tmpPARAG="";
    String imps = ""; //guarda bloque de importaciones
    int flag = 0; //verificador para cierre de llave main
    int flag2 = 0;

    //caracter ascii
    String cA = ""; //guarda el valor del token caracter Ascci
    int c = 0; //guarda el valor del caracter asccii

    //Metodo para calcular la identación correcta python
    public String tab(){
        String tab = "";
        for(int i = 0; i < (contTPY*4); i++) {
            tab+=" ";

        }
       
        return tab;
    }

    //Método al que se llama automáticamente ante algún error sintactico. 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
            claseErrores datos = new claseErrores(String.valueOf(s.value), "Error sintáctico", "No se esperaba este componente:",s.left,s.right);
            Analizador_Lexico.TError.add(datos);
    } 
    
    //Método al que se llama en el momento en que ya no es posible una recuperación de errores. 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
            claseErrores datos = new claseErrores("Null", "Error sintáctico", "Error irrecuperable", s.left,s.right);
            Analizador_Lexico.TError.add(datos);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$A_sintactico$actions {


    String sumaO(Object v1, Object v2){
        auxP+= " "+v1.toString() + " + " + v2.toString();
        auxC+= " "+v1.toString() + " + " + v2.toString();
        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        return "";
    }
    
    String restaO(Object v1, Object v2){
        auxP+= " "+v1.toString() + " - " + v2.toString();
        auxC+= " "+v1.toString() + " - " + v2.toString();
        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        flag2=0;
        return "";
    }

    String multi(Object v1, Object v2){
        auxP+= " "+v1.toString() + " * " + v2.toString();
        auxC+= " "+v1.toString() + " * " + v2.toString();
        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        return "";
    }

    String divs(Object v1, Object v2){

        auxP+= " "+v1.toString() + " / " + v2.toString();
        auxC+= " "+v1.toString() + " / " + v2.toString();
        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        return "";
    }
    
    String modulo(Object v1, Object v2){

        auxP+= " "+v1.toString() + " % " + v2.toString();
        auxC+= " "+v1.toString() + " % " + v2.toString();
        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        return "";
    }
    
    String potencia(Object v1, Object v2){

        auxP+= " "+v1.toString() + " ** " + v2.toString();
        auxC+= " math.Pow(float64("+v1.toString() + "),float64(" + v2.toString()+"))";
        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        return "";
    }

  private final A_sintactico parser;

  /** Constructor */
  CUP$A_sintactico$actions(A_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$A_sintactico$do_action_part00000000(
    int                        CUP$A_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_sintactico$parser,
    java.util.Stack            CUP$A_sintactico$stack,
    int                        CUP$A_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$A_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$A_sintactico$parser.done_parsing();
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
 
        arbolAux.InsertarRecursivo(nodoAux,"inicio","Global");
        arbolAux.InsertarRecursivo(nodoAux,"inicio","inicio");

        txtPython+=tab()+"def main():\n";
        imps+= "import (\n\"fmt\"\n\"math\"\n)\n";
        txtGo+=tab()+"package main\n"+tab()+imps+"func main(){\n";
        contTPY+=1;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",32, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= inicio NT$0 cuerpo fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int crpleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int crpright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object crp = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        //arbol
        arbolAux.InsertarRecursivo(nodoAux,"fin","Global");
        arbolAux.InsertarRecursivo(nodoAux,"fin","fin");

        txtPython+="if __name__ == '__main__':\n    main()";
        
        if(flag==0){
            txtGo+="}";
        }

        contTPY-=1;
        imps = "";
        System.out.println(txtPython);
        System.out.println(txtGo);
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error fin 
            {
              Object RESULT =null;
		System.out.println("Falta inicio");
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpo ::= DECLARACION 
            {
              Object RESULT =null;
		
            arbolAux.InsertarRecursivo(nodoAux,"cuerpo","Global");
            arbolAux.InsertarRecursivo(nodoAux,"DECLARACION","cuerpo");
        
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo ::= ASIGNACION 
            {
              Object RESULT =null;
		
            arbolAux.InsertarRecursivo(nodoAux,"cuerpo","Global");
            arbolAux.InsertarRecursivo(nodoAux,"ASIGNACION","cuerpo");
        
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo ::= CONDICIONALES 
            {
              Object RESULT =null;
		
            arbolAux.InsertarRecursivo(nodoAux,"cuerpo","Global");
            arbolAux.InsertarRecursivo(nodoAux,"CONDICIONALES","cuerpo");
        
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo ::= RETORNO 
            {
              Object RESULT =null;
		
           arbolAux.InsertarRecursivo(nodoAux,"cuerpo","Global");
           arbolAux.InsertarRecursivo(nodoAux,"RETORNO","cuerpo");
        
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo ::= METODO 
            {
              Object RESULT =null;
		
           arbolAux.InsertarRecursivo(nodoAux,"cuerpo","Global");
           arbolAux.InsertarRecursivo(nodoAux,"METODO","cuerpo");
        
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo ::= FUNCION 
            {
              Object RESULT =null;
		
           arbolAux.InsertarRecursivo(nodoAux,"cuerpo","Global");
           arbolAux.InsertarRecursivo(nodoAux,"FUNCION","cuerpo");
        
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo ::= LLAMADA 
            {
              Object RESULT =null;
		cond="cuerpo";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo ::= IMPRESION 
            {
              Object RESULT =null;
		
           arbolAux.InsertarRecursivo(nodoAux,"cuerpo","Global");
           arbolAux.InsertarRecursivo(nodoAux,"IMPRESION","cuerpo");
        
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo ::= cuerpo CONDICIONALES 
            {
              Object RESULT =null;
		 arbolAux.InsertarRecursivo(nodoAux,"CONDICIONALES","cuerpo"); 
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo ::= cuerpo DECLARACION 
            {
              Object RESULT =null;
		 arbolAux.InsertarRecursivo(nodoAux,"DECLARACION","cuerpo"); 
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo ::= cuerpo ASIGNACION 
            {
              Object RESULT =null;
		 arbolAux.InsertarRecursivo(nodoAux,"ASIGNACION","cuerpo"); 
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cuerpo ::= cuerpo RETORNO 
            {
              Object RESULT =null;
		 arbolAux.InsertarRecursivo(nodoAux,"RETORNO","cuerpo"); 
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpo ::= cuerpo METODO 
            {
              Object RESULT =null;
		 arbolAux.InsertarRecursivo(nodoAux,"METODO","cuerpo"); 
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cuerpo ::= cuerpo FUNCION 
            {
              Object RESULT =null;
		 arbolAux.InsertarRecursivo(nodoAux,"FUNCION","cuerpo"); 
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cuerpo ::= cuerpo LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cuerpo ::= cuerpo IMPRESION 
            {
              Object RESULT =null;
		 arbolAux.InsertarRecursivo(nodoAux,"IMPRESION","cuerpo"); 
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LLAMADA ::= ejecutar id abrir_par cerrar_par puntoComa 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		  
                if(v1==0){
                    arbolAux.InsertarRecursivo(nodoAux,"cuerpo","Global");
                    v1 = 1;
                }
                
                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-LLAMADA","cuerpo");

                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-ejecutar",String.valueOf(contLL)+"-LLAMADA");
                arbolAux.InsertarRecursivo(nodoAux,"ejecutar",String.valueOf(contLL)+"-ejecutar");

                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-id",String.valueOf(contLL)+"-LLAMADA");
                arbolAux.InsertarRecursivo(nodoAux,idd.toString(),String.valueOf(contLL)+"-id");

                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-abrir_par",String.valueOf(contLL)+"-LLAMADA");
                arbolAux.InsertarRecursivo(nodoAux,"(",String.valueOf(contLL)+"-abrir_par");
                
                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-cerrar_par",String.valueOf(contLL)+"-LLAMADA");
                arbolAux.InsertarRecursivo(nodoAux,")",String.valueOf(contLL)+"-cerrar_par");

                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-puntoComa",String.valueOf(contLL)+"-LLAMADA");
                arbolAux.InsertarRecursivo(nodoAux,";",String.valueOf(contLL)+"-puntoComa");
    
                txtPython+=tab()+String.valueOf(idd)+"()\n";
                txtGo+= tab()+String.valueOf(idd)+"()\n";
                contLL++;
            
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LLAMADA ::= ejecutar id abrir_par LEJC cerrar_par puntoComa 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		
        txtPython+= tab()+ String.valueOf(idd)+"("+aux2+")\n";
        txtGo+=tab()+String.valueOf(idd)+"("+aux2G+")\n";
        auxP="";
        auxC="";
        aux2="";
        aux2G="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$1 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        txtPython+=tab()+"def "+String.valueOf(idd)+"():\n";
        flag=1;
        txtGo+="}\n";
        txtGo+="func "+String.valueOf(idd)+"(){\n";
        contTPY+=1; 
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",33, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // METODO ::= metodo id NT$1 INSTRUCCIONES Finmetodo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$2 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;

        txtPython+=tab()+"def "+String.valueOf(idd)+"("+aux2+"):\n";
        flag=1;
        txtGo+="}\n";
        txtGo+="func "+String.valueOf(idd)+"("+aux2G+"){\n";
        contTPY+=1; 
        aux2="";
        aux2G="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",34, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // METODO ::= metodo id con_parametros abrir_par LISTAP cerrar_par NT$2 INSTRUCCIONES Finmetodo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$3 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        txtPython+=tab()+"def "+String.valueOf(idd)+":\n";
        flag=1;
        txtGo+="}\n";
        txtGo+="func "+String.valueOf(idd)+"()"+String.valueOf(tdd)+"{\n";
        contTPY+=1; 
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",35, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCION ::= funcion id TIPODATO NT$3 INSTRUCCIONES Finfuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$4 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;

        txtPython+=tab()+"def "+String.valueOf(idd)+"("+aux2+"):\n";
        flag=1;
        txtGo+="}\n";
        txtGo+="func "+String.valueOf(idd)+"("+aux2G+")"+String.valueOf(tdd)+"{\n";
        contTPY+=1; 
        aux2="";
        aux2G="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",36, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCION ::= funcion id TIPODATO con_parametros abrir_par LISTAP cerrar_par NT$4 INSTRUCCIONES Finfuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IMPRESION ::= imprimir CONDICION puntoComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		       
        txtPython+=tab()+"print("+auxP+")\n";
        txtGo+=tab()+"fmt.Print("+auxC+")\n";
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",19, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IMPRESION ::= imprimir_nl CONDICION puntoComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		
        txtPython+=tab()+"print("+auxP+",\"\\n\")\n";
        txtGo+=tab()+"fmt.Println("+auxC+")\n";
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",19, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$5 ::= 
            {
              Object RESULT =null;

                txtPython+=tab();
                txtGo+=tab()+"var ";
            
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",37, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int ttdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int ttdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object ttd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
auxTP+=ttd;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",38, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Ringresar NT$5 LISTA Rcomo TIPODATO NT$6 RCon_valor CONDICION puntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int ttdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int ttdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object ttd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		
                txtPython+=aux2;
                txtGo+=aux2;

                aux2="";
                txtPython+=" = ";
                txtGo+=" "+auxTP+" = ";
                auxTP="";
           
                for(int i = 0 ; i <= cont1; i = i + 1)
                {
                    if(i==0){
                        tmp+=auxP;
                        tmpG+=auxC;
                    }
                    else{
                        tmp+= "," + auxP;
                        tmpG+= ","+ auxC;
                    }

                };
                txtPython+= tmp+"\n";
                txtGo+= tmpG+"\n"; 
                auxP="";
                auxC="";
                tmp="";
                tmpG="";
                cont1=0;
            
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGNACION ::= LISTA asignacion CONDICION puntoComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		
                txtPython+= tab()+aux2;
                txtGo+= tab()+aux2;
                aux2="";
                txtPython+=" = ";
                txtGo+=" = ";

                for(int i = 0 ; i <= cont1; i = i + 1)
                {
                    if(i==0){
                        tmp+=auxP;
                        tmpG+=auxC;
                    }
                    else{
                        tmp+= "," + auxP;
                        tmpG+= ","+ auxC;
                    }

                };
                txtPython+= tmp+"\n";
                txtGo+=tmpG+"\n";
                auxP="";
                auxC="";
                tmp="";
                tmpG="";
                cont1=0;
            
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTAP ::= id TIPODATO 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        aux2+=String.valueOf(idd);
        aux2G+= String.valueOf(idd)+" "+String.valueOf(tdd);
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAP",21, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTAP ::= LISTAP Coma id TIPODATO 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        aux2+=","+String.valueOf(idd);
        aux2G+=","+String.valueOf(idd)+" "+String.valueOf(tdd);
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAP",21, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LISTA ::= id 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        aux2+=idd.toString();
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTA ::= LISTA Coma id 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        aux2+=","+idd.toString();
        cont1=cont1+1;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LEJC ::= CONDICION 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        aux2+=auxP;
        aux2G+=auxC;
        auxC="";
        auxP="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LEJC",26, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LEJC ::= LEJC Coma CONDICION 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        aux2+=","+auxP;
        aux2G+=","+auxC;
        auxC="";
        auxP="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LEJC",26, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONDICIONALES ::= IF 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONDICIONALES ::= SEGUN 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONDICIONALES ::= PARA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONDICIONALES ::= MIENTRAS 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONDICIONALES ::= REPETIR 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$7 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        txtPython+=tab()+"if "+auxP+":\n";
        txtGo+=tab()+"if "+auxC+" {\n";
        contTPY+=1; auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",39, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF ::= condSi CONDICION NT$7 auxFS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IF",8, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // auxFS ::= entonces INSTRUCCIONES finSi 
            {
              Object RESULT =null;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("auxFS",27, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$8 ::= 
            {
              Object RESULT =null;

        contTPY-=1;
        txtPython+=tab()+"else:\n";
        txtGo+=tab()+"} else {\n";
        contTPY+=1;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",40, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // auxFS ::= entonces INSTRUCCIONES contrario NT$8 INSTRUCCIONES finSi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("auxFS",27, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // auxFS ::= entonces INSTRUCCIONES BLOQUE finSi 
            {
              Object RESULT =null;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("auxFS",27, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$9 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        contTPY-=1; 
        txtPython+=tab()+"elif "+auxP+":\n";
        txtGo+= tab()+"}else if "+auxC+" {\n";
        contTPY+=1;
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",41, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BLOQUE ::= OSi CONDICION entonces NT$9 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$10 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        contTPY-=1; 
        txtPython+=tab()+"elif "+auxP+":\n";
        txtGo+=tab()+"}else if "+auxC+" {\n";
        contTPY+=1;
        auxP=""; auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",42, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BLOQUE ::= BLOQUE OSi CONDICION entonces NT$10 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$11 ::= 
            {
              Object RESULT =null;

        contTPY-=1;
        txtPython+=tab()+"else:\n";
        txtGo+=tab()+" }else {\n";
        contTPY+=1;
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",43, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BLOQUE ::= BLOQUE contrario NT$11 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$12 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        auxID=String.valueOf(idd);
        txtPython+=tab()+"for "+auxID+" in range("+auxP; 
        txtGo+=tab()+"for "+auxID+" := "+auxC+";";
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",44, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        tmpPARA=auxP;
        tmpPARAG=auxC;
        contTPY+=1; 
        auxP="";
        auxC="";
        
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",45, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARA ::= para id asignacion CONDICION NT$12 hasta CONDICION NT$13 BLOQUEPARA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",14, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$14 ::= 
            {
              Object RESULT =null;

        txtPython+=","+tmpPARA+"):\n";
        txtGo+= " "+tmpPARAG+";"+auxID+"++ {\n";
        tmpPARA ="";tmpPARAG="";auxID="";

    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",46, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BLOQUEPARA ::= hacer NT$14 INSTRUCCIONES finPara 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		 
        contTPY-=1; txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUEPARA",15, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$15 ::= 
            {
              Object RESULT =null;

        txtPython+=","+tmpPARA+","+auxP+"):\n";
        txtGo+= " "+tmpPARAG+";"+auxID+"+= "+auxC+"{\n";
        tmpPARA ="";tmpPARAG="";auxID="";auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",47, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BLOQUEPARA ::= incremento CONDICION hacer NT$15 INSTRUCCIONES finPara 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		 
        contTPY-=1; txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUEPARA",15, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BLOQUEPARA ::= hacer finPara 
            {
              Object RESULT =null;
		
        txtPython+=","+tmpPARA+"):\n";
        txtGo+= " "+tmpPARAG+";"+auxID+"++ {\n";
        tmpPARA ="";tmpPARAG="";auxID="";
        contTPY-=1; txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUEPARA",15, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BLOQUEPARA ::= incremento CONDICION hacer finPara 
            {
              Object RESULT =null;
		
        txtPython+=","+tmpPARA+","+auxP+"):\n";
        txtGo+= " "+tmpPARAG+";"+auxID+"+= "+auxC+"{\n";
        tmpPARA ="";tmpPARAG="";auxID="";auxP="";auxC="";
        contTPY-=1; txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUEPARA",15, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$16 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        txtPython+=tab()+"while "+auxP+":\n";
        txtGo+=tab()+"for true {\n"; contTPY+=1; 
        txtGo+=tab()+"if !("+auxC+"){\n";  contTPY+=1;
        txtGo+=tab()+"break\n";  contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",48, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MIENTRAS ::= mientras CONDICION hacer NT$16 INSTRUCCIONES finMientras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",16, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$17 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        txtPython+=tab()+"while "+auxP+":\n";
        txtGo+=tab()+"for true {\n"; contTPY+=1; 
        txtGo+=tab()+"if !("+auxC+"){\n";  contTPY+=1;
        txtGo+=tab()+"break\n";  contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",49, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // MIENTRAS ::= mientras CONDICION hacer NT$17 finMientras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",16, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$18 ::= 
            {
              Object RESULT =null;

        txtPython+=tab()+"while "+auxP+"\n";
        txtGo+= tab()+"for true {\n";
        contTPY+=1;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",50, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // REPETIR ::= repetir NT$18 INSTRUCCIONES hastaQue CONDICION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        txtPython+=tab()+"if "+auxP+" == False:\n";
        txtGo+=tab()+"if ("+auxC+"){\n"; contTPY+=1;
        txtPython+=tab()+"break\n";
        txtGo+=tab()+"break}\n";
        contTPY-=2; 
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",17, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // REPETIR ::= repetir hastaQue CONDICION 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        txtPython+=tab()+"while "+auxP+"\n";
        txtGo+= tab()+"for true {\n"; contTPY+=1;
        txtPython+=tab()+"if "+auxP+" == False:\n";
        txtGo+=tab()+"if ("+auxC+"){\n"; contTPY+=1;
        txtPython+=tab()+"break\n"; 
        txtGo+=tab()+"break}\n";
        contTPY-=2; 
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",17, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // RETORNO ::= retornar CONDICION puntoComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		
        txtPython+=tab()+"return "+auxP+"\n";
        txtGo+=tab()+"return "+auxC+"\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",18, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$19 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        tmpPS+=auxP;
        txtGo+=tab()+"switch "+auxC+" {\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$19",51, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SEGUN ::= segun CONDICION hacer NT$19 CASE finSegun 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		
        contTPY-=1;
        txtGo+=tab()+"}\n";
        tmpPS="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",12, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$20 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

        txtPython+=tab()+"if "+tmpPS+"=="+auxP+":\n";
        txtGo+= tab()+"case "+auxC+":\n";
        contTPY+=1;
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$20",52, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CASE ::= aitr CONDICION citr entonces NT$20 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$21 ::= 
            {
              Object RESULT =null;

        contTPY-=1;
        txtPython+=tab()+"else:\n";
        txtGo+= tab()+"default:\n";
        contTPY+=1;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$21",53, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CASE ::= CASE contrario entonces NT$21 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$22 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

        contTPY-=1; 
        txtPython+=tab()+"elif "+tmpPS+"=="+auxP+":\n";
        txtGo+= tab()+"case "+auxC+":\n";
        contTPY+=1;
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$22",54, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CASE ::= CASE aitr CONDICION citr entonces NT$22 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERACIONES ::= EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        RESULT=a; 
        System.out.println("datoTot:"+a.toString());
        //si empieza con $ es caracter
        if(a.toString().length()>1){ 
            if((a.toString().charAt(1)=='$')){
                //obtener numero
                cA+= a.toString().replace("'","").replace("$","").replace("{","").replace("}","");
                c = Integer.parseInt(cA); 
                //verificar numero sino espacion en blanco
                if((c>=65 && c<=90)||(c>=97 && c<=122)){
                    char convertedChar = (char)c; 
                    auxP+= "'"+String.valueOf(convertedChar)+"'";
                    auxC+= "'"+String.valueOf(convertedChar)+"'";
                    cA="";
                }
                else{
                    auxP+= "\" \"";
                    auxC+= "\" \"";
                    cA="";
                }
            }
            else if(a.toString().toLowerCase().equals("verdadero")){
                auxP+= "True";
                auxC+= "true";
            }
            else if(a.toString().toLowerCase().equals("falso")){
                auxP+= "False";
                auxC+= "false";
            }
            else{
                auxP+= a.toString();
                auxC+= a.toString();
            }
        }
        else{
            auxP+= a.toString();
            auxC+= a.toString();
        }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES",31, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= EXPRESION mas OP1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = sumaO(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= EXPRESION resta OP1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = restaO(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= OP1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT =a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP1 ::= OP1 mult OP2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = multi(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP1",28, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP1 ::= OP1 div OP2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = divs(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP1",28, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OP1 ::= OP1 Rmod OP2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = modulo(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP1",28, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OP1 ::= OP2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT =a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP1",28, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP2 ::= OP2 Rpotencia abrir_cor OP3 cerrar_cor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		RESULT = potencia(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP2",29, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP2 ::= OP3 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP2",29, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$23 ::= 
            {
              Object RESULT =null;
auxP+="("; auxC+="(";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$23",55, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP3 ::= abrir_par NT$23 OPERACIONES cerrar_par 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		RESULT = a; auxP+=")"; auxC+=")";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OP3 ::= digitoEntero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OP3 ::= digitoDecimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP3 ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP3 ::= Cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OP3 ::= caracter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OP3 ::= Rtrue 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OP3 ::= Rfalse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP3 ::= caracterAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
            RESULT = a;
            
        
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CONDICION ::= OPERACIONES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$24 ::= 
            {
              Object RESULT =null;
		int oprleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
auxP+=opr; auxC+=opr;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$24",56, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONDICION ::= OPERACIONES OP NT$24 OPERACIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$25 ::= 
            {
              Object RESULT =null;
		int ooplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int ooplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oopl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        if(oopl.toString().equals("or")){
            auxP+=" or ";
            auxC+=" || ";
        }

        if(oopl.toString().equals("and")){
            auxP+=" and ";
            auxC+=" && ";
        }

        if(oopl.toString().equals("not")){
            auxP+=" not ";
            auxC+=" ! ";
        }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$25",57, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$26 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int ooplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int ooplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object oopl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
auxP+=opr; auxC+=opr;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$26",58, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CONDICION ::= CONDICION OPL NT$25 OPERACIONES OP NT$26 OPERACIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int ooplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).left;
		int ooplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).right;
		Object oopl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OP ::= mayor 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=">";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OP ::= menor 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="<";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OP ::= mayorIgual 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=">=";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OP ::= menorIgual 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="<=";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OP ::= igual 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="==";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OP ::= diferente 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="!=";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OPL ::= or 
            {
              Object RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=opl;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OPL",25, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OPL ::= and 
            {
              Object RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=opl;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OPL",25, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OPL ::= not 
            {
              Object RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=opl;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OPL",25, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // INSTRUCCIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // INSTRUCCIONES ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // INSTRUCCIONES ::= CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // INSTRUCCIONES ::= LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // INSTRUCCIONES ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // INSTRUCCIONES ::= RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // INSTRUCCIONES ::= INSTRUCCIONES RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // INSTRUCCIONES ::= INSTRUCCIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // INSTRUCCIONES ::= INSTRUCCIONES ASIGNACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // INSTRUCCIONES ::= INSTRUCCIONES CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // INSTRUCCIONES ::= INSTRUCCIONES LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // INSTRUCCIONES ::= INSTRUCCIONES IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TIPODATO ::= Rnumero 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="float64";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TIPODATO ::= Rcadena 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="string";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TIPODATO ::= Rboolean 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="bool";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TIPODATO ::= Rcaracter 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="byte";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$A_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$A_sintactico$do_action(
    int                        CUP$A_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_sintactico$parser,
    java.util.Stack            CUP$A_sintactico$stack,
    int                        CUP$A_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$A_sintactico$do_action_part00000000(
                               CUP$A_sintactico$act_num,
                               CUP$A_sintactico$parser,
                               CUP$A_sintactico$stack,
                               CUP$A_sintactico$top);
    }
}

}
