package Analizadores;
import java_cup.runtime.Symbol;
import java.util.LinkedList;


parser code 
{:
    
    //Método al que se llama automáticamente ante algún error sintactico. 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    
//Método al que se llama en el momento en que ya no es posible una recuperación de errores. 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  
:} 

//Terminales
terminal Cadena;
terminal digitoEntero;
terminal digitoDecimal;
terminal caracter;
terminal Rnumero;
terminal Rcadena;
terminal Rboolean;
terminal Rcaracter;
terminal mas;
terminal resta;
terminal mult;
terminal div;
terminal Rpotencia;
terminal Rmod;
terminal abrir_par;
terminal cerrar_par;
terminal aitr;
terminal citr;
terminal puntoComa;
terminal Coma;
terminal mayor;
terminal menor;
terminal mayorIgual;
terminal menorIgual;
terminal igual;
terminal diferente;
terminal or;
terminal and;
terminal not;
terminal inicio;
terminal fin;
terminal comentario1;
terminal comentario2;
terminal Ringresar;
terminal id;
terminal Rcomo;
terminal RCon_valor;
terminal asignacion;
terminal condSi;
terminal contrario;
terminal finSi;
terminal OSi;
terminal segun;
terminal hacer;
terminal entonces;
terminal finSegun;
terminal para;
terminal hasta;
terminal incremento;
terminal finPara;
terminal mientras;
terminal finMientras;
terminal repetir;
terminal hastaQue;
terminal retornar;
terminal metodo;
terminal Finmetodo;
terminal con_parametros;
terminal funcion;
terminal Finfuncion;
terminal ejecutar;
terminal imprimir;
terminal imprimir_nl;

//No terminales
non terminal cuerpo,INICIO, ASIGNACION,DECLARACION, EXPRESION, TIPODATO;
non terminal LISTA, CONDICIONALES;
non terminal IF, CONDICION, INSTRUCCIONES, BLOQUE;
non terminal SEGUN,VALOR, CASE;
non terminal PARA,VALORP;
non terminal MIENTRAS,REPETIR;
non terminal RETORNO, IMPRESION;
non terminal METODO, LISTAP, FUNCION, LLAMADA;

//gramaticas
start with INICIO;

INICIO::= inicio cuerpo fin;

cuerpo::= DECLARACION puntoComa
    | ASIGNACION puntoComa
    | CONDICIONALES
    | EXPRESION
    | RETORNO
    | METODO
    | FUNCION
    | LLAMADA
    | IMPRESION
    | cuerpo EXPRESION
    | cuerpo CONDICIONALES
    | cuerpo DECLARACION puntoComa
    | cuerpo ASIGNACION puntoComa
    | cuerpo RETORNO
    | cuerpo METODO
    | cuerpo FUNCION
    | cuerpo LLAMADA
    | cuerpo IMPRESION
;

LLAMADA::= ejecutar id abrir_par cerrar_par puntoComa
    | ejecutar id abrir_par LISTAP cerrar_par puntoComa
;

METODO::= metodo id INSTRUCCIONES Finmetodo
        | metodo id con_parametros abrir_par LISTAP cerrar_par INSTRUCCIONES Finmetodo
;

FUNCION::= funcion id TIPODATO INSTRUCCIONES Finfuncion
        | funcion id TIPODATO INSTRUCCIONES RETORNO Finfuncion
        | funcion id TIPODATO con_parametros abrir_par LISTAP cerrar_par INSTRUCCIONES Finfuncion
        | funcion id TIPODATO con_parametros abrir_par LISTAP cerrar_par INSTRUCCIONES RETORNO Finfuncion
;

IMPRESION::= imprimir EXPRESION puntoComa
    | imprimir_nl EXPRESION puntoComa
;

DECLARACION::= Ringresar LISTA Rcomo TIPODATO RCon_valor EXPRESION
; 

ASIGNACION::= LISTA asignacion EXPRESION
;

LISTAP::= id TIPODATO
        | LISTAP Coma id TIPODATO
;

LISTA::= id
        | LISTA Coma id
;

CONDICIONALES::= IF
                | SEGUN
                | PARA
                | MIENTRAS
                | REPETIR
;

IF::= condSi CONDICION entonces INSTRUCCIONES finSi
    | condSi CONDICION INSTRUCCIONES  contrario INSTRUCCIONES finSi
    | condSi CONDICION INSTRUCCIONES BLOQUE contrario INSTRUCCIONES finSi
;

PARA::= para id asignacion VALORP hasta VALORP hacer INSTRUCCIONES finPara
    | para id asignacion VALORP hasta VALORP hacer finPara
    | para id asignacion VALORP hasta VALORP incremento digitoEntero hacer INSTRUCCIONES finPara
    | para id asignacion VALORP hasta VALORP incremento digitoEntero hacer finPara
;

MIENTRAS::= mientras CONDICION hacer INSTRUCCIONES finMientras
        | mientras CONDICION hacer finMientras
;

REPETIR::= repetir INSTRUCCIONES hastaQue CONDICION
        | repetir hastaQue CONDICION
;

RETORNO::= retornar EXPRESION puntoComa
        | retornar CONDICION puntoComa
        | retornar digitoEntero puntoComa
        | retornar digitoDecimal puntoComa
;

VALORP::= id
        | digitoEntero
        | EXPRESION
;

SEGUN::= segun VALOR hacer CASE finSegun
;

CASE::= aitr VALOR citr entonces INSTRUCCIONES
        | CASE contrario entonces INSTRUCCIONES
        | CASE aitr VALOR citr entonces INSTRUCCIONES
;

VALOR::= id
        | EXPRESION
;

//Falta agregar esto 
EXPRESION::= digitoEntero mas digitoEntero
            
;


BLOQUE::= OSi CONDICION entonces INSTRUCCIONES
        | BLOQUE OSi CONDICION entonces INSTRUCCIONES
        | BLOQUE contrario entonces INSTRUCCIONES
;

CONDICION::= id igual id //Prueba
;

INSTRUCCIONES::= Cadena puntoComa //prueba
;


TIPODATO::= Rnumero
            | Rcadena
            | Rboolean
            | Rcaracter
;
