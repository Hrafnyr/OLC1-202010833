package Analizadores;
import java_cup.runtime.Symbol;

//java -jar java-cup-11b.jar -parser A_sintactico -symbols Simbolos sintactico.cup

parser code 
{:
    //Variable que guarda el código python
    public String txtPython = "";
    String auxP = "";

    //Método al que se llama automáticamente ante algún error sintactico. 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
            claseErrores datos = new claseErrores(String.valueOf(s.value), "Error sintáctico", "eliminar entrada incorrecta",s.left,s.right);
            Analizador_Lexico.TError.add(datos);
    } 
    
    //Método al que se llama en el momento en que ya no es posible una recuperación de errores. 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
            claseErrores datos = new claseErrores("Null", "Error sintáctico", "eliminar entrada incorrecta",s.left,s.right);
            Analizador_Lexico.TError.add(datos);
    }
:} 

//FALTA LIMPIAR TEXTO Y ELIMINAR SYSTEM.OUT.PRINT...

//Terminales
terminal Cadena;
terminal digitoEntero;
terminal digitoDecimal;
terminal caracter;
terminal caracterAS;
terminal Rtrue;
terminal Rfalse;
terminal abrir_cor;
terminal cerrar_cor;
terminal Rnumero;
terminal Rcadena;
terminal Rboolean;
terminal Rcaracter;
terminal mas;
terminal resta;
terminal mult;
terminal div;
terminal Rpotencia;
terminal Rmod;
terminal abrir_par;
terminal cerrar_par;
terminal aitr;
terminal citr;
terminal puntoComa;
terminal Coma;
terminal mayor;
terminal menor;
terminal mayorIgual;
terminal menorIgual;
terminal igual;
terminal diferente;
terminal or;
terminal and;
terminal not;
terminal inicio;
terminal fin;
terminal Ringresar;
terminal id;
terminal Rcomo;
terminal RCon_valor;
terminal asignacion;
terminal condSi;
terminal contrario;
terminal finSi;
terminal OSi;
terminal segun;
terminal hacer;
terminal entonces;
terminal finSegun;
terminal para;
terminal hasta;
terminal incremento;
terminal finPara;
terminal mientras;
terminal finMientras;
terminal repetir;
terminal hastaQue;
terminal retornar;
terminal metodo;
terminal Finmetodo;
terminal con_parametros;
terminal funcion;
terminal Finfuncion;
terminal ejecutar;
terminal imprimir;
terminal imprimir_nl;

//No terminales
non terminal cuerpo,INICIO, ASIGNACION,DECLARACION, EXPRESION, TIPODATO;
non terminal LISTA, CONDICIONALES;
non terminal IF, CONDICION, INSTRUCCIONES, BLOQUE;
non terminal SEGUN, CASE;
non terminal PARA;
non terminal MIENTRAS,REPETIR;
non terminal RETORNO, IMPRESION;
non terminal METODO, LISTAP, FUNCION, LLAMADA;}
non terminal OP, OPL;
non terminal LEJC;

//gramaticas
start with INICIO;

INICIO::= inicio cuerpo fin
;

cuerpo::= DECLARACION 
    | ASIGNACION 
    | CONDICIONALES
    | RETORNO
    | METODO
    | FUNCION
    | LLAMADA
    | IMPRESION
    | cuerpo CONDICIONALES
    | cuerpo DECLARACION 
    | cuerpo ASIGNACION 
    | cuerpo RETORNO
    | cuerpo METODO
    | cuerpo FUNCION
    | cuerpo LLAMADA
    | cuerpo IMPRESION
    | error puntoComa {:System.out.println("Se espera punto y coma");:}
    | error asignacion {:System.out.println("Se espera ->");:}
    | error Coma {:System.out.println("Se espera coma");:}
;

LLAMADA::= ejecutar id:idd abrir_par cerrar_par puntoComa
            {:txtPython+= String.valueOf(idd)+"()\n"; System.out.println(txtPython);:}
    | ejecutar id:idd abrir_par LEJC cerrar_par puntoComa
    {:txtPython+= String.valueOf(idd)+"("+auxP+")\n"; System.out.println(txtPython); auxP="";:}
;

METODO::= metodo id:idd {:txtPython+="def "+String.valueOf(idd)+"\n\t"; System.out.println(txtPython); auxP="";:} INSTRUCCIONES Finmetodo
        | metodo id:idd con_parametros abrir_par LISTAP cerrar_par {:txtPython+="def "+String.valueOf(idd)+"("+auxP+")\n\t"; System.out.println(txtPython); auxP="";:} INSTRUCCIONES Finmetodo
;

FUNCION::= funcion id:idd TIPODATO {:txtPython+="def "+String.valueOf(idd)+"\n\t"; System.out.println(txtPython); auxP="";:} INSTRUCCIONES Finfuncion
        | funcion id:idd TIPODATO con_parametros abrir_par LISTAP cerrar_par {:txtPython+="def "+String.valueOf(idd)+"("+auxP+")\n\t"; System.out.println(txtPython); auxP="";:} INSTRUCCIONES  Finfuncion 
;

IMPRESION::= imprimir CONDICION:b puntoComa 
            {:txtPython+="print("+String.valueOf(b)+")\n"; System.out.println(txtPython);:}
        | imprimir_nl CONDICION:b puntoComa 
            {:txtPython+="print("+String.valueOf(b)+"\\n)\n"; System.out.println(txtPython);:}
;

DECLARACION::= Ringresar LISTA Rcomo TIPODATO RCon_valor CONDICION puntoComa
; 

ASIGNACION::= LISTA asignacion CONDICION puntoComa
;

LISTAP::= id:idd TIPODATO {:auxP+=String.valueOf(idd);:} 
        | LISTAP Coma id:idd  TIPODATO {:auxP+=","+String.valueOf(idd);:}
;

LISTA::= id
        | LISTA Coma id
;

LEJC::= CONDICION:b  {:auxP+=b.toString();:}
        | LEJC    Coma CONDICION:b  {:auxP+=","+b.toString();:}
;

CONDICIONALES::= IF
                | SEGUN
                | PARA
                | MIENTRAS
                | REPETIR
;

IF::= condSi CONDICION entonces INSTRUCCIONES finSi
    | condSi CONDICION INSTRUCCIONES  contrario INSTRUCCIONES finSi
    | condSi CONDICION INSTRUCCIONES BLOQUE  finSi
;

PARA::= para id asignacion CONDICION hasta CONDICION hacer INSTRUCCIONES finPara
    | para id asignacion CONDICION hasta CONDICION hacer finPara
    | para id asignacion CONDICION hasta CONDICION incremento digitoEntero hacer INSTRUCCIONES finPara
    | para id asignacion CONDICION hasta CONDICION incremento digitoEntero hacer finPara
;

MIENTRAS::= mientras CONDICION hacer INSTRUCCIONES finMientras
        | mientras CONDICION hacer finMientras
;

REPETIR::= repetir INSTRUCCIONES hastaQue CONDICION
        | repetir hastaQue CONDICION
;

RETORNO::= retornar CONDICION:b puntoComa {:txtPython+="return "+String.valueOf(b)+"\n"; System.out.println(txtPython);:}
;

SEGUN::= segun CONDICION hacer CASE finSegun
;

CASE::= aitr CONDICION citr entonces INSTRUCCIONES
        | CASE contrario entonces INSTRUCCIONES
        | CASE aitr CONDICION citr entonces INSTRUCCIONES
;

//Falta operaciones aritmeticas
EXPRESION::= digitoEntero:a {:RESULT = a;:} 
    | digitoDecimal:a {:RESULT = a;:} 
    | id:a  {:RESULT = a;:} 
    | Cadena:a {:RESULT = a;:} 
    | caracter:a {:RESULT = a;:} 
    | Rtrue:a {:RESULT = a;:} 
    | Rfalse:a {:RESULT = a;:} 
    | caracterAS:a {:RESULT = a;:} 
;

BLOQUE::= OSi CONDICION entonces INSTRUCCIONES
        | BLOQUE OSi CONDICION entonces INSTRUCCIONES
        | BLOQUE contrario INSTRUCCIONES
;

//Falta codigo de traduccion
CONDICION::= EXPRESION:a {:RESULT = a;:} 
        | EXPRESION OP EXPRESION 
        | CONDICION OPL EXPRESION   
;

OP::= mayor
    | menor
    | mayorIgual
    | menorIgual
    | igual
    | diferente
;

OPL::= or:opl {:RESULT=opl;:}
    | and: opl {:RESULT=opl;:}
    | not: opl {:RESULT=opl;:}
;

INSTRUCCIONES::= DECLARACION
    | ASIGNACION
    | CONDICIONALES
    | LLAMADA
    | IMPRESION
    | RETORNO
    | INSTRUCCIONES RETORNO
    | INSTRUCCIONES DECLARACION 
    | INSTRUCCIONES ASIGNACION
    | INSTRUCCIONES CONDICIONALES
    | INSTRUCCIONES LLAMADA
    | INSTRUCCIONES IMPRESION
;


TIPODATO::= Rnumero:td {:RESULT=td;:}
            | Rcadena:td {:RESULT=td;:}
            | Rboolean:td {:RESULT=td;:}
            | Rcaracter:td {:RESULT=td;:}
;
