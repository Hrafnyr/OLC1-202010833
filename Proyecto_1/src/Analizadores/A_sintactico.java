
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import proyecto_olc1.Nodo;
import proyecto_olc1.arbolSintactico;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class A_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public A_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public A_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public A_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\245\000\002\002\004\000\002\045\002\000\002\003" +
    "\006\000\002\003\004\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\004\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\004\000\002\031\007\000\002\046\002\000" +
    "\002\031\011\000\002\047\002\000\002\026\007\000\002" +
    "\050\002\000\002\026\013\000\002\051\002\000\002\030" +
    "\010\000\002\052\002\000\002\030\014\000\002\053\002" +
    "\000\002\025\006\000\002\054\002\000\002\025\006\000" +
    "\002\055\002\000\002\056\002\000\002\005\013\000\002" +
    "\057\002\000\002\004\007\000\002\027\004\000\002\027" +
    "\006\000\002\010\003\000\002\010\005\000\002\034\003" +
    "\000\002\060\002\000\002\034\006\000\002\061\002\000" +
    "\002\011\004\000\002\062\002\000\002\011\004\000\002" +
    "\063\002\000\002\011\004\000\002\064\002\000\002\011" +
    "\004\000\002\065\002\000\002\011\004\000\002\066\002" +
    "\000\002\067\002\000\002\012\007\000\002\070\002\000" +
    "\002\071\002\000\002\035\007\000\002\042\003\000\002" +
    "\072\002\000\002\042\006\000\002\073\002\000\002\042" +
    "\005\000\002\074\002\000\002\075\002\000\002\015\010" +
    "\000\002\076\002\000\002\077\002\000\002\015\011\000" +
    "\002\100\002\000\002\015\006\000\002\101\002\000\002" +
    "\102\002\000\002\103\002\000\002\020\014\000\002\104" +
    "\002\000\002\021\006\000\002\021\004\000\002\105\002" +
    "\000\002\021\007\000\002\106\002\000\002\043\005\000" +
    "\002\043\003\000\002\107\002\000\002\110\002\000\002" +
    "\022\010\000\002\111\002\000\002\044\005\000\002\112" +
    "\002\000\002\044\004\000\002\113\002\000\002\114\002" +
    "\000\002\023\010\000\002\115\002\000\002\023\006\000" +
    "\002\116\002\000\002\024\006\000\002\117\002\000\002" +
    "\120\002\000\002\016\011\000\002\121\002\000\002\122" +
    "\002\000\002\017\011\000\002\123\002\000\002\017\007" +
    "\000\002\124\002\000\002\125\002\000\002\017\012\000" +
    "\002\126\002\000\002\041\004\000\002\006\005\000\002" +
    "\006\005\000\002\006\003\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\003\000\002\037\007" +
    "\000\002\037\003\000\002\127\002\000\002\040\006\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\013\003\000\002\130\002" +
    "\000\002\013\006\000\002\131\002\000\002\132\002\000" +
    "\002\013\011\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\006\003\004\046\006\001\002\000\004\047" +
    "\u0115\001\002\000\004\002\u0114\001\002\000\034\050\000" +
    "\051\000\055\000\061\000\065\000\071\000\073\000\075" +
    "\000\076\000\101\000\103\000\104\000\105\000\001\002" +
    "\000\034\050\025\051\uffdb\055\uffd2\061\uffd0\065\uffce\071" +
    "\uffcc\073\uffca\075\030\076\010\101\034\103\032\104\023" +
    "\105\015\001\002\000\004\051\u0109\001\002\000\036\047" +
    "\ufff7\050\ufff7\051\ufff7\055\ufff7\061\ufff7\065\ufff7\071\ufff7" +
    "\073\ufff7\075\ufff7\076\ufff7\101\ufff7\103\ufff7\104\ufff7\105" +
    "\ufff7\001\002\000\004\073\377\001\002\000\004\071\uffa9" +
    "\001\002\000\004\065\332\001\002\000\024\004\uffe0\005" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\027\uffe0" +
    "\051\uffe0\001\002\000\036\047\324\050\025\051\uffdb\055" +
    "\uffd2\061\uffd0\065\uffce\071\uffcc\073\uffca\075\030\076\010" +
    "\101\034\103\032\104\023\105\015\001\002\000\004\061" +
    "\265\001\002\000\004\055\222\001\002\000\004\051\202" +
    "\001\002\000\036\047\ufffd\050\ufffd\051\ufffd\055\ufffd\061" +
    "\ufffd\065\ufffd\071\ufffd\073\ufffd\075\ufffd\076\ufffd\101\ufffd" +
    "\103\ufffd\104\ufffd\105\ufffd\001\002\000\024\004\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\027\uffe2" +
    "\051\uffe2\001\002\000\036\047\ufffa\050\ufffa\051\ufffa\055" +
    "\ufffa\061\ufffa\065\ufffa\071\ufffa\073\ufffa\075\ufffa\076\ufffa" +
    "\101\ufffa\103\ufffa\104\ufffa\105\ufffa\001\002\000\004\051" +
    "\uffde\001\002\000\036\047\ufff9\050\ufff9\051\ufff9\055\ufff9" +
    "\061\ufff9\065\ufff9\071\ufff9\073\ufff9\075\ufff9\076\ufff9\101" +
    "\ufff9\103\ufff9\104\ufff9\105\ufff9\001\002\000\036\047\ufffc" +
    "\050\ufffc\051\ufffc\055\ufffc\061\ufffc\065\ufffc\071\ufffc\073" +
    "\ufffc\075\ufffc\076\ufffc\101\ufffc\103\ufffc\104\ufffc\105\ufffc" +
    "\001\002\000\024\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010" +
    "\uff9d\011\uff9d\012\uff9d\027\uff9d\051\uff9d\001\002\000\036" +
    "\047\ufffb\050\ufffb\051\ufffb\055\ufffb\061\ufffb\065\ufffb\071" +
    "\ufffb\073\ufffb\075\ufffb\076\ufffb\101\ufffb\103\ufffb\104\ufffb" +
    "\105\ufffb\001\002\000\004\051\077\001\002\000\036\047" +
    "\ufff6\050\ufff6\051\ufff6\055\ufff6\061\ufff6\065\ufff6\071\ufff6" +
    "\073\ufff6\075\ufff6\076\ufff6\101\ufff6\103\ufff6\104\ufff6\105" +
    "\ufff6\001\002\000\004\051\036\001\002\000\036\047\ufff8" +
    "\050\ufff8\051\ufff8\055\ufff8\061\ufff8\065\ufff8\071\ufff8\073" +
    "\ufff8\075\ufff8\076\ufff8\101\ufff8\103\ufff8\104\ufff8\105\ufff8" +
    "\001\002\000\012\015\037\016\040\017\041\020\043\001" +
    "\002\000\040\030\uff60\034\uff60\050\uff60\051\uff60\053\uff60" +
    "\055\uff60\061\uff60\065\uff60\071\uff60\073\uff60\075\uff60\100" +
    "\uff60\103\uff60\104\uff60\105\uff60\001\002\000\040\030\uff5f" +
    "\034\uff5f\050\uff5f\051\uff5f\053\uff5f\055\uff5f\061\uff5f\065" +
    "\uff5f\071\uff5f\073\uff5f\075\uff5f\100\uff5f\103\uff5f\104\uff5f" +
    "\105\uff5f\001\002\000\040\030\uff5e\034\uff5e\050\uff5e\051" +
    "\uff5e\053\uff5e\055\uff5e\061\uff5e\065\uff5e\071\uff5e\073\uff5e" +
    "\075\uff5e\100\uff5e\103\uff5e\104\uff5e\105\uff5e\001\002\000" +
    "\032\050\uffe6\051\uffe6\055\uffe6\061\uffe6\065\uffe6\071\uffe6" +
    "\073\uffe6\075\uffe6\100\044\103\uffe6\104\uffe6\105\uffe6\001" +
    "\002\000\040\030\uff5d\034\uff5d\050\uff5d\051\uff5d\053\uff5d" +
    "\055\uff5d\061\uff5d\065\uff5d\071\uff5d\073\uff5d\075\uff5d\100" +
    "\uff5d\103\uff5d\104\uff5d\105\uff5d\001\002\000\004\027\064" +
    "\001\002\000\030\050\025\051\uffdb\055\uffd2\061\uffd0\065" +
    "\uffce\071\uffcc\073\uffca\075\030\103\032\104\023\105\015" +
    "\001\002\000\054\031\uff69\050\uff69\051\uff69\055\uff69\056" +
    "\uff69\057\uff69\060\uff69\061\uff69\064\uff69\065\uff69\070\uff69" +
    "\071\uff69\072\uff69\073\uff69\074\uff69\075\uff69\077\uff69\102" +
    "\uff69\103\uff69\104\uff69\105\uff69\001\002\000\054\031\uff6c" +
    "\050\uff6c\051\uff6c\055\uff6c\056\uff6c\057\uff6c\060\uff6c\061" +
    "\uff6c\064\uff6c\065\uff6c\070\uff6c\071\uff6c\072\uff6c\073\uff6c" +
    "\074\uff6c\075\uff6c\077\uff6c\102\uff6c\103\uff6c\104\uff6c\105" +
    "\uff6c\001\002\000\032\050\025\051\uffdb\055\uffd2\061\uffd0" +
    "\065\uffce\071\uffcc\073\uffca\075\030\102\063\103\032\104" +
    "\023\105\015\001\002\000\054\031\uff67\050\uff67\051\uff67" +
    "\055\uff67\056\uff67\057\uff67\060\uff67\061\uff67\064\uff67\065" +
    "\uff67\070\uff67\071\uff67\072\uff67\073\uff67\074\uff67\075\uff67" +
    "\077\uff67\102\uff67\103\uff67\104\uff67\105\uff67\001\002\000" +
    "\054\031\uff6b\050\uff6b\051\uff6b\055\uff6b\056\uff6b\057\uff6b" +
    "\060\uff6b\061\uff6b\064\uff6b\065\uff6b\070\uff6b\071\uff6b\072" +
    "\uff6b\073\uff6b\074\uff6b\075\uff6b\077\uff6b\102\uff6b\103\uff6b" +
    "\104\uff6b\105\uff6b\001\002\000\054\031\uff6a\050\uff6a\051" +
    "\uff6a\055\uff6a\056\uff6a\057\uff6a\060\uff6a\061\uff6a\064\uff6a" +
    "\065\uff6a\070\uff6a\071\uff6a\072\uff6a\073\uff6a\074\uff6a\075" +
    "\uff6a\077\uff6a\102\uff6a\103\uff6a\104\uff6a\105\uff6a\001\002" +
    "\000\054\031\uff68\050\uff68\051\uff68\055\uff68\056\uff68\057" +
    "\uff68\060\uff68\061\uff68\064\uff68\065\uff68\070\uff68\071\uff68" +
    "\072\uff68\073\uff68\074\uff68\075\uff68\077\uff68\102\uff68\103" +
    "\uff68\104\uff68\105\uff68\001\002\000\054\031\uff62\050\uff62" +
    "\051\uff62\055\uff62\056\uff62\057\uff62\060\uff62\061\uff62\064" +
    "\uff62\065\uff62\070\uff62\071\uff62\072\uff62\073\uff62\074\uff62" +
    "\075\uff62\077\uff62\102\uff62\103\uff62\104\uff62\105\uff62\001" +
    "\002\000\054\031\uff65\050\uff65\051\uff65\055\uff65\056\uff65" +
    "\057\uff65\060\uff65\061\uff65\064\uff65\065\uff65\070\uff65\071" +
    "\uff65\072\uff65\073\uff65\074\uff65\075\uff65\077\uff65\102\uff65" +
    "\103\uff65\104\uff65\105\uff65\001\002\000\054\031\uff66\050" +
    "\uff66\051\uff66\055\uff66\056\uff66\057\uff66\060\uff66\061\uff66" +
    "\064\uff66\065\uff66\070\uff66\071\uff66\072\uff66\073\uff66\074" +
    "\uff66\075\uff66\077\uff66\102\uff66\103\uff66\104\uff66\105\uff66" +
    "\001\002\000\054\031\uff64\050\uff64\051\uff64\055\uff64\056" +
    "\uff64\057\uff64\060\uff64\061\uff64\064\uff64\065\uff64\070\uff64" +
    "\071\uff64\072\uff64\073\uff64\074\uff64\075\uff64\077\uff64\102" +
    "\uff64\103\uff64\104\uff64\105\uff64\001\002\000\054\031\uff63" +
    "\050\uff63\051\uff63\055\uff63\056\uff63\057\uff63\060\uff63\061" +
    "\uff63\064\uff63\065\uff63\070\uff63\071\uff63\072\uff63\073\uff63" +
    "\074\uff63\075\uff63\077\uff63\102\uff63\103\uff63\104\uff63\105" +
    "\uff63\001\002\000\054\031\uff61\050\uff61\051\uff61\055\uff61" +
    "\056\uff61\057\uff61\060\uff61\061\uff61\064\uff61\065\uff61\070" +
    "\uff61\071\uff61\072\uff61\073\uff61\074\uff61\075\uff61\077\uff61" +
    "\102\uff61\103\uff61\104\uff61\105\uff61\001\002\000\036\047" +
    "\uffe5\050\uffe5\051\uffe5\055\uffe5\061\uffe5\065\uffe5\071\uffe5" +
    "\073\uffe5\075\uffe5\076\uffe5\101\uffe5\103\uffe5\104\uffe5\105" +
    "\uffe5\001\002\000\004\051\066\001\002\000\006\030\071" +
    "\034\070\001\002\000\012\015\037\016\040\017\041\020" +
    "\043\001\002\000\006\030\uffd9\034\uffd9\001\002\000\004" +
    "\051\075\001\002\000\030\050\uffe4\051\uffe4\055\uffe4\061" +
    "\uffe4\065\uffe4\071\uffe4\073\uffe4\075\uffe4\103\uffe4\104\uffe4" +
    "\105\uffe4\001\002\000\030\050\025\051\uffdb\055\uffd2\061" +
    "\uffd0\065\uffce\071\uffcc\073\uffca\075\030\103\032\104\023" +
    "\105\015\001\002\000\032\050\025\051\uffdb\055\uffd2\061" +
    "\uffd0\065\uffce\071\uffcc\073\uffca\075\030\102\074\103\032" +
    "\104\023\105\015\001\002\000\036\047\uffe3\050\uffe3\051" +
    "\uffe3\055\uffe3\061\uffe3\065\uffe3\071\uffe3\073\uffe3\075\uffe3" +
    "\076\uffe3\101\uffe3\103\uffe3\104\uffe3\105\uffe3\001\002\000" +
    "\012\015\037\016\040\017\041\020\043\001\002\000\006" +
    "\030\uffd8\034\uffd8\001\002\000\004\027\100\001\002\000" +
    "\026\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec" +
    "\012\uffec\027\uffec\030\102\051\uffec\001\002\000\024\004" +
    "\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90" +
    "\027\uff90\051\uff90\001\002\000\004\033\103\001\002\000" +
    "\062\031\uffed\047\uffed\050\uffed\051\uffed\055\uffed\056\uffed" +
    "\057\uffed\060\uffed\061\uffed\064\uffed\065\uffed\070\uffed\071" +
    "\uffed\072\uffed\073\uffed\074\uffed\075\uffed\076\uffed\077\uffed" +
    "\101\uffed\102\uffed\103\uffed\104\uffed\105\uffed\001\002\000" +
    "\014\030\uffd5\034\uffd5\043\155\044\153\045\154\001\002" +
    "\000\124\030\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035" +
    "\166\036\165\037\163\040\162\041\164\042\167\043\uff7b" +
    "\044\uff7b\045\uff7b\047\uff7b\050\uff7b\051\uff7b\055\uff7b\056" +
    "\uff7b\057\uff7b\060\uff7b\061\uff7b\062\uff7b\063\uff7b\064\uff7b" +
    "\065\uff7b\066\uff7b\067\uff7b\070\uff7b\071\uff7b\072\uff7b\073" +
    "\uff7b\074\uff7b\075\uff7b\076\uff7b\077\uff7b\101\uff7b\102\uff7b" +
    "\103\uff7b\104\uff7b\105\uff7b\001\002\000\006\030\147\034" +
    "\146\001\002\000\024\004\117\005\124\006\122\007\121" +
    "\010\116\011\115\012\112\027\120\051\110\001\002\000" +
    "\142\014\uff81\021\uff81\022\uff81\023\uff81\024\uff81\025\uff81" +
    "\026\uff81\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81\035" +
    "\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81" +
    "\044\uff81\045\uff81\047\uff81\050\uff81\051\uff81\055\uff81\056" +
    "\uff81\057\uff81\060\uff81\061\uff81\062\uff81\063\uff81\064\uff81" +
    "\065\uff81\066\uff81\067\uff81\070\uff81\071\uff81\072\uff81\073" +
    "\uff81\074\uff81\075\uff81\076\uff81\077\uff81\101\uff81\102\uff81" +
    "\103\uff81\104\uff81\105\uff81\001\002\000\140\021\uff86\022" +
    "\uff86\023\uff86\024\uff86\025\uff86\026\uff86\030\uff86\031\uff86" +
    "\032\uff86\033\uff86\034\uff86\035\uff86\036\uff86\037\uff86\040" +
    "\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86\047\uff86" +
    "\050\uff86\051\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061" +
    "\uff86\062\uff86\063\uff86\064\uff86\065\uff86\066\uff86\067\uff86" +
    "\070\uff86\071\uff86\072\uff86\073\uff86\074\uff86\075\uff86\076" +
    "\uff86\077\uff86\101\uff86\102\uff86\103\uff86\104\uff86\105\uff86" +
    "\001\002\000\142\014\uff7d\021\uff7d\022\uff7d\023\uff7d\024" +
    "\uff7d\025\uff7d\026\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d" +
    "\034\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042" +
    "\uff7d\043\uff7d\044\uff7d\045\uff7d\047\uff7d\050\uff7d\051\uff7d" +
    "\055\uff7d\056\uff7d\057\uff7d\060\uff7d\061\uff7d\062\uff7d\063" +
    "\uff7d\064\uff7d\065\uff7d\066\uff7d\067\uff7d\070\uff7d\071\uff7d" +
    "\072\uff7d\073\uff7d\074\uff7d\075\uff7d\076\uff7d\077\uff7d\101" +
    "\uff7d\102\uff7d\103\uff7d\104\uff7d\105\uff7d\001\002\000\140" +
    "\021\uff88\022\uff88\023\uff88\024\uff88\025\134\026\uff88\030" +
    "\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035\uff88\036\uff88" +
    "\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045" +
    "\uff88\047\uff88\050\uff88\051\uff88\055\uff88\056\uff88\057\uff88" +
    "\060\uff88\061\uff88\062\uff88\063\uff88\064\uff88\065\uff88\066" +
    "\uff88\067\uff88\070\uff88\071\uff88\072\uff88\073\uff88\074\uff88" +
    "\075\uff88\076\uff88\077\uff88\101\uff88\102\uff88\103\uff88\104" +
    "\uff88\105\uff88\001\002\000\136\021\uff8c\022\uff8c\023\131" +
    "\024\132\026\130\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034" +
    "\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c" +
    "\043\uff8c\044\uff8c\045\uff8c\047\uff8c\050\uff8c\051\uff8c\055" +
    "\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c" +
    "\064\uff8c\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c\072" +
    "\uff8c\073\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c\101\uff8c" +
    "\102\uff8c\103\uff8c\104\uff8c\105\uff8c\001\002\000\142\014" +
    "\uff7e\021\uff7e\022\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e" +
    "\030\uff7e\031\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e\036" +
    "\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e" +
    "\045\uff7e\047\uff7e\050\uff7e\051\uff7e\055\uff7e\056\uff7e\057" +
    "\uff7e\060\uff7e\061\uff7e\062\uff7e\063\uff7e\064\uff7e\065\uff7e" +
    "\066\uff7e\067\uff7e\070\uff7e\071\uff7e\072\uff7e\073\uff7e\074" +
    "\uff7e\075\uff7e\076\uff7e\077\uff7e\101\uff7e\102\uff7e\103\uff7e" +
    "\104\uff7e\105\uff7e\001\002\000\142\014\uff7c\021\uff7c\022" +
    "\uff7c\023\uff7c\024\uff7c\025\uff7c\026\uff7c\030\uff7c\031\uff7c" +
    "\032\uff7c\033\uff7c\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040" +
    "\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\047\uff7c" +
    "\050\uff7c\051\uff7c\055\uff7c\056\uff7c\057\uff7c\060\uff7c\061" +
    "\uff7c\062\uff7c\063\uff7c\064\uff7c\065\uff7c\066\uff7c\067\uff7c" +
    "\070\uff7c\071\uff7c\072\uff7c\073\uff7c\074\uff7c\075\uff7c\076" +
    "\uff7c\077\uff7c\101\uff7c\102\uff7c\103\uff7c\104\uff7c\105\uff7c" +
    "\001\002\000\142\014\uff80\021\uff80\022\uff80\023\uff80\024" +
    "\uff80\025\uff80\026\uff80\030\uff80\031\uff80\032\uff80\033\uff80" +
    "\034\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042" +
    "\uff80\043\uff80\044\uff80\045\uff80\047\uff80\050\uff80\051\uff80" +
    "\055\uff80\056\uff80\057\uff80\060\uff80\061\uff80\062\uff80\063" +
    "\uff80\064\uff80\065\uff80\066\uff80\067\uff80\070\uff80\071\uff80" +
    "\072\uff80\073\uff80\074\uff80\075\uff80\076\uff80\077\uff80\101" +
    "\uff80\102\uff80\103\uff80\104\uff80\105\uff80\001\002\000\024" +
    "\004\uff85\005\uff85\006\uff85\007\uff85\010\uff85\011\uff85\012" +
    "\uff85\027\uff85\051\uff85\001\002\000\142\014\uff7f\021\uff7f" +
    "\022\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f\030\uff7f\031" +
    "\uff7f\032\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f\037\uff7f" +
    "\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\047" +
    "\uff7f\050\uff7f\051\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f" +
    "\061\uff7f\062\uff7f\063\uff7f\064\uff7f\065\uff7f\066\uff7f\067" +
    "\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f\074\uff7f\075\uff7f" +
    "\076\uff7f\077\uff7f\101\uff7f\102\uff7f\103\uff7f\104\uff7f\105" +
    "\uff7f\001\002\000\142\014\uff82\021\uff82\022\uff82\023\uff82" +
    "\024\uff82\025\uff82\026\uff82\030\uff82\031\uff82\032\uff82\033" +
    "\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040\uff82\041\uff82" +
    "\042\uff82\043\uff82\044\uff82\045\uff82\047\uff82\050\uff82\051" +
    "\uff82\055\uff82\056\uff82\057\uff82\060\uff82\061\uff82\062\uff82" +
    "\063\uff82\064\uff82\065\uff82\066\uff82\067\uff82\070\uff82\071" +
    "\uff82\072\uff82\073\uff82\074\uff82\075\uff82\076\uff82\077\uff82" +
    "\101\uff82\102\uff82\103\uff82\104\uff82\105\uff82\001\002\000" +
    "\130\021\126\022\125\030\uff8f\031\uff8f\032\uff8f\033\uff8f" +
    "\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042" +
    "\uff8f\043\uff8f\044\uff8f\045\uff8f\047\uff8f\050\uff8f\051\uff8f" +
    "\055\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f\063" +
    "\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f\071\uff8f" +
    "\072\uff8f\073\uff8f\074\uff8f\075\uff8f\076\uff8f\077\uff8f\101" +
    "\uff8f\102\uff8f\103\uff8f\104\uff8f\105\uff8f\001\002\000\142" +
    "\014\uff83\021\uff83\022\uff83\023\uff83\024\uff83\025\uff83\026" +
    "\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83\035\uff83" +
    "\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044" +
    "\uff83\045\uff83\047\uff83\050\uff83\051\uff83\055\uff83\056\uff83" +
    "\057\uff83\060\uff83\061\uff83\062\uff83\063\uff83\064\uff83\065" +
    "\uff83\066\uff83\067\uff83\070\uff83\071\uff83\072\uff83\073\uff83" +
    "\074\uff83\075\uff83\076\uff83\077\uff83\101\uff83\102\uff83\103" +
    "\uff83\104\uff83\105\uff83\001\002\000\024\004\117\005\124" +
    "\006\122\007\121\010\116\011\115\012\112\027\120\051" +
    "\110\001\002\000\024\004\117\005\124\006\122\007\121" +
    "\010\116\011\115\012\112\027\120\051\110\001\002\000" +
    "\136\021\uff8e\022\uff8e\023\131\024\132\026\130\030\uff8e" +
    "\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037" +
    "\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e" +
    "\047\uff8e\050\uff8e\051\uff8e\055\uff8e\056\uff8e\057\uff8e\060" +
    "\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e" +
    "\067\uff8e\070\uff8e\071\uff8e\072\uff8e\073\uff8e\074\uff8e\075" +
    "\uff8e\076\uff8e\077\uff8e\101\uff8e\102\uff8e\103\uff8e\104\uff8e" +
    "\105\uff8e\001\002\000\024\004\117\005\124\006\122\007" +
    "\121\010\116\011\115\012\112\027\120\051\110\001\002" +
    "\000\024\004\117\005\124\006\122\007\121\010\116\011" +
    "\115\012\112\027\120\051\110\001\002\000\024\004\117" +
    "\005\124\006\122\007\121\010\116\011\115\012\112\027" +
    "\120\051\110\001\002\000\140\021\uff8a\022\uff8a\023\uff8a" +
    "\024\uff8a\025\134\026\uff8a\030\uff8a\031\uff8a\032\uff8a\033" +
    "\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a" +
    "\042\uff8a\043\uff8a\044\uff8a\045\uff8a\047\uff8a\050\uff8a\051" +
    "\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a" +
    "\063\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a\071" +
    "\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a\076\uff8a\077\uff8a" +
    "\101\uff8a\102\uff8a\103\uff8a\104\uff8a\105\uff8a\001\002\000" +
    "\004\013\135\001\002\000\024\004\117\005\124\006\122" +
    "\007\121\010\116\011\115\012\112\027\120\051\110\001" +
    "\002\000\004\014\137\001\002\000\140\021\uff87\022\uff87" +
    "\023\uff87\024\uff87\025\uff87\026\uff87\030\uff87\031\uff87\032" +
    "\uff87\033\uff87\034\uff87\035\uff87\036\uff87\037\uff87\040\uff87" +
    "\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87\047\uff87\050" +
    "\uff87\051\uff87\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87" +
    "\062\uff87\063\uff87\064\uff87\065\uff87\066\uff87\067\uff87\070" +
    "\uff87\071\uff87\072\uff87\073\uff87\074\uff87\075\uff87\076\uff87" +
    "\077\uff87\101\uff87\102\uff87\103\uff87\104\uff87\105\uff87\001" +
    "\002\000\140\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\134" +
    "\026\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035" +
    "\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b" +
    "\044\uff8b\045\uff8b\047\uff8b\050\uff8b\051\uff8b\055\uff8b\056" +
    "\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b\064\uff8b" +
    "\065\uff8b\066\uff8b\067\uff8b\070\uff8b\071\uff8b\072\uff8b\073" +
    "\uff8b\074\uff8b\075\uff8b\076\uff8b\077\uff8b\101\uff8b\102\uff8b" +
    "\103\uff8b\104\uff8b\105\uff8b\001\002\000\140\021\uff89\022" +
    "\uff89\023\uff89\024\uff89\025\134\026\uff89\030\uff89\031\uff89" +
    "\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89\037\uff89\040" +
    "\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89\047\uff89" +
    "\050\uff89\051\uff89\055\uff89\056\uff89\057\uff89\060\uff89\061" +
    "\uff89\062\uff89\063\uff89\064\uff89\065\uff89\066\uff89\067\uff89" +
    "\070\uff89\071\uff89\072\uff89\073\uff89\074\uff89\075\uff89\076" +
    "\uff89\077\uff89\101\uff89\102\uff89\103\uff89\104\uff89\105\uff89" +
    "\001\002\000\136\021\uff8d\022\uff8d\023\131\024\132\026" +
    "\130\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d" +
    "\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044" +
    "\uff8d\045\uff8d\047\uff8d\050\uff8d\051\uff8d\055\uff8d\056\uff8d" +
    "\057\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d\065" +
    "\uff8d\066\uff8d\067\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d" +
    "\074\uff8d\075\uff8d\076\uff8d\077\uff8d\101\uff8d\102\uff8d\103" +
    "\uff8d\104\uff8d\105\uff8d\001\002\000\024\004\uff90\005\uff90" +
    "\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\027\uff90\051" +
    "\uff90\001\002\000\004\030\145\001\002\000\142\014\uff84" +
    "\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84\026\uff84\030" +
    "\uff84\031\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84" +
    "\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045" +
    "\uff84\047\uff84\050\uff84\051\uff84\055\uff84\056\uff84\057\uff84" +
    "\060\uff84\061\uff84\062\uff84\063\uff84\064\uff84\065\uff84\066" +
    "\uff84\067\uff84\070\uff84\071\uff84\072\uff84\073\uff84\074\uff84" +
    "\075\uff84\076\uff84\077\uff84\101\uff84\102\uff84\103\uff84\104" +
    "\uff84\105\uff84\001\002\000\024\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\010\uffd4\011\uffd4\012\uffd4\027\uffd4\051\uffd4\001" +
    "\002\000\004\033\150\001\002\000\062\031\uffeb\047\uffeb" +
    "\050\uffeb\051\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061" +
    "\uffeb\064\uffeb\065\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb" +
    "\074\uffeb\075\uffeb\076\uffeb\077\uffeb\101\uffeb\102\uffeb\103" +
    "\uffeb\104\uffeb\105\uffeb\001\002\000\024\004\uff90\005\uff90" +
    "\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\027\uff90\051" +
    "\uff90\001\002\000\014\030\uffd3\034\uffd3\043\155\044\153" +
    "\045\154\001\002\000\024\004\uff6e\005\uff6e\006\uff6e\007" +
    "\uff6e\010\uff6e\011\uff6e\012\uff6e\027\uff6e\051\uff6e\001\002" +
    "\000\024\004\uff6d\005\uff6d\006\uff6d\007\uff6d\010\uff6d\011" +
    "\uff6d\012\uff6d\027\uff6d\051\uff6d\001\002\000\024\004\uff6f" +
    "\005\uff6f\006\uff6f\007\uff6f\010\uff6f\011\uff6f\012\uff6f\027" +
    "\uff6f\051\uff6f\001\002\000\024\004\uff78\005\uff78\006\uff78" +
    "\007\uff78\010\uff78\011\uff78\012\uff78\027\uff78\051\uff78\001" +
    "\002\000\024\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90" +
    "\011\uff90\012\uff90\027\uff90\051\uff90\001\002\000\016\035" +
    "\166\036\165\037\163\040\162\041\164\042\167\001\002" +
    "\000\024\004\uff77\005\uff77\006\uff77\007\uff77\010\uff77\011" +
    "\uff77\012\uff77\027\uff77\051\uff77\001\002\000\024\004\uff72" +
    "\005\uff72\006\uff72\007\uff72\010\uff72\011\uff72\012\uff72\027" +
    "\uff72\051\uff72\001\002\000\024\004\uff73\005\uff73\006\uff73" +
    "\007\uff73\010\uff73\011\uff73\012\uff73\027\uff73\051\uff73\001" +
    "\002\000\024\004\uff71\005\uff71\006\uff71\007\uff71\010\uff71" +
    "\011\uff71\012\uff71\027\uff71\051\uff71\001\002\000\024\004" +
    "\uff74\005\uff74\006\uff74\007\uff74\010\uff74\011\uff74\012\uff74" +
    "\027\uff74\051\uff74\001\002\000\024\004\uff75\005\uff75\006" +
    "\uff75\007\uff75\010\uff75\011\uff75\012\uff75\027\uff75\051\uff75" +
    "\001\002\000\024\004\uff70\005\uff70\006\uff70\007\uff70\010" +
    "\uff70\011\uff70\012\uff70\027\uff70\051\uff70\001\002\000\024" +
    "\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90\012" +
    "\uff90\027\uff90\051\uff90\001\002\000\110\030\uff76\031\uff76" +
    "\032\uff76\033\uff76\034\uff76\043\uff76\044\uff76\045\uff76\047" +
    "\uff76\050\uff76\051\uff76\055\uff76\056\uff76\057\uff76\060\uff76" +
    "\061\uff76\062\uff76\063\uff76\064\uff76\065\uff76\066\uff76\067" +
    "\uff76\070\uff76\071\uff76\072\uff76\073\uff76\074\uff76\075\uff76" +
    "\076\uff76\077\uff76\101\uff76\102\uff76\103\uff76\104\uff76\105" +
    "\uff76\001\002\000\024\004\uff7a\005\uff7a\006\uff7a\007\uff7a" +
    "\010\uff7a\011\uff7a\012\uff7a\027\uff7a\051\uff7a\001\002\000" +
    "\024\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90" +
    "\012\uff90\027\uff90\051\uff90\001\002\000\110\030\uff79\031" +
    "\uff79\032\uff79\033\uff79\034\uff79\043\uff79\044\uff79\045\uff79" +
    "\047\uff79\050\uff79\051\uff79\055\uff79\056\uff79\057\uff79\060" +
    "\uff79\061\uff79\062\uff79\063\uff79\064\uff79\065\uff79\066\uff79" +
    "\067\uff79\070\uff79\071\uff79\072\uff79\073\uff79\074\uff79\075" +
    "\uff79\076\uff79\077\uff79\101\uff79\102\uff79\103\uff79\104\uff79" +
    "\105\uff79\001\002\000\024\004\uff90\005\uff90\006\uff90\007" +
    "\uff90\010\uff90\011\uff90\012\uff90\027\uff90\051\uff90\001\002" +
    "\000\012\033\177\043\155\044\153\045\154\001\002\000" +
    "\062\031\uff9c\047\uff9c\050\uff9c\051\uff9c\055\uff9c\056\uff9c" +
    "\057\uff9c\060\uff9c\061\uff9c\064\uff9c\065\uff9c\070\uff9c\071" +
    "\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c\077\uff9c" +
    "\101\uff9c\102\uff9c\103\uff9c\104\uff9c\105\uff9c\001\002\000" +
    "\004\051\202\001\002\000\006\034\204\052\203\001\002" +
    "\000\010\034\uffd7\052\uffd7\054\uffd7\001\002\000\012\015" +
    "\037\016\040\017\041\020\043\001\002\000\004\051\205" +
    "\001\002\000\010\034\uffd6\052\uffd6\054\uffd6\001\002\000" +
    "\004\053\uffdd\001\002\000\004\053\210\001\002\000\024" +
    "\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90\012" +
    "\uff90\027\uff90\051\uff90\001\002\000\012\033\212\043\155" +
    "\044\153\045\154\001\002\000\062\031\uffdc\047\uffdc\050" +
    "\uffdc\051\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc" +
    "\064\uffdc\065\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074" +
    "\uffdc\075\uffdc\076\uffdc\077\uffdc\101\uffdc\102\uffdc\103\uffdc" +
    "\104\uffdc\105\uffdc\001\002\000\024\004\uff90\005\uff90\006" +
    "\uff90\007\uff90\010\uff90\011\uff90\012\uff90\027\uff90\051\uff90" +
    "\001\002\000\012\033\215\043\155\044\153\045\154\001" +
    "\002\000\062\031\uffe1\047\uffe1\050\uffe1\051\uffe1\055\uffe1" +
    "\056\uffe1\057\uffe1\060\uffe1\061\uffe1\064\uffe1\065\uffe1\070" +
    "\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1" +
    "\077\uffe1\101\uffe1\102\uffe1\103\uffe1\104\uffe1\105\uffe1\001" +
    "\002\000\006\034\204\054\217\001\002\000\024\004\uff90" +
    "\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\027" +
    "\uff90\051\uff90\001\002\000\012\033\221\043\155\044\153" +
    "\045\154\001\002\000\062\031\uffda\047\uffda\050\uffda\051" +
    "\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\064\uffda" +
    "\065\uffda\070\uffda\071\uffda\072\uffda\073\uffda\074\uffda\075" +
    "\uffda\076\uffda\077\uffda\101\uffda\102\uffda\103\uffda\104\uffda" +
    "\105\uffda\001\002\000\024\004\uffc8\005\uffc8\006\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\027\uffc8\051\uffc8\001\002" +
    "\000\062\031\uffd1\047\uffd1\050\uffd1\051\uffd1\055\uffd1\056" +
    "\uffd1\057\uffd1\060\uffd1\061\uffd1\064\uffd1\065\uffd1\070\uffd1" +
    "\071\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077" +
    "\uffd1\101\uffd1\102\uffd1\103\uffd1\104\uffd1\105\uffd1\001\002" +
    "\000\024\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011" +
    "\uff90\012\uff90\027\uff90\051\uff90\001\002\000\012\043\155" +
    "\044\153\045\154\063\uffc7\001\002\000\004\063\uffc5\001" +
    "\002\000\004\063\231\001\002\000\062\031\uffc6\047\uffc6" +
    "\050\uffc6\051\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061" +
    "\uffc6\064\uffc6\065\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6" +
    "\074\uffc6\075\uffc6\076\uffc6\077\uffc6\101\uffc6\102\uffc6\103" +
    "\uffc6\104\uffc6\105\uffc6\001\002\000\030\050\025\051\uffdb" +
    "\055\uffd2\061\uffd0\065\uffce\071\uffcc\073\uffca\075\030\103" +
    "\032\104\023\105\015\001\002\000\036\050\025\051\uffdb" +
    "\055\uffd2\056\uffc4\057\uffc4\060\uffc4\061\uffd0\065\uffce\071" +
    "\uffcc\073\uffca\075\030\103\032\104\023\105\015\001\002" +
    "\000\010\056\235\057\236\060\uffbf\001\002\000\004\060" +
    "\244\001\002\000\030\050\uffc1\051\uffc1\055\uffc1\061\uffc1" +
    "\065\uffc1\071\uffc1\073\uffc1\075\uffc1\103\uffc1\104\uffc1\105" +
    "\uffc1\001\002\000\062\031\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\064\uffc2\065" +
    "\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2" +
    "\076\uffc2\077\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105" +
    "\uffc2\001\002\000\062\031\uffc3\047\uffc3\050\uffc3\051\uffc3" +
    "\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\064\uffc3\065" +
    "\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3" +
    "\076\uffc3\077\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\105" +
    "\uffc3\001\002\000\030\050\025\051\uffdb\055\uffd2\061\uffd0" +
    "\065\uffce\071\uffcc\073\uffca\075\030\103\032\104\023\105" +
    "\015\001\002\000\032\050\025\051\uffdb\055\uffd2\057\242" +
    "\061\uffd0\065\uffce\071\uffcc\073\uffca\075\030\103\032\104" +
    "\023\105\015\001\002\000\062\031\uffc0\047\uffc0\050\uffc0" +
    "\051\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\064" +
    "\uffc0\065\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0" +
    "\075\uffc0\076\uffc0\077\uffc0\101\uffc0\102\uffc0\103\uffc0\104" +
    "\uffc0\105\uffc0\001\002\000\010\056\252\057\253\060\254" +
    "\001\002\000\024\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010" +
    "\uffbd\011\uffbd\012\uffbd\027\uffbd\051\uffbd\001\002\000\024" +
    "\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90\012" +
    "\uff90\027\uff90\051\uff90\001\002\000\012\043\155\044\153" +
    "\045\154\063\247\001\002\000\030\050\uffbc\051\uffbc\055" +
    "\uffbc\061\uffbc\065\uffbc\071\uffbc\073\uffbc\075\uffbc\103\uffbc" +
    "\104\uffbc\105\uffbc\001\002\000\030\050\025\051\uffdb\055" +
    "\uffd2\061\uffd0\065\uffce\071\uffcc\073\uffca\075\030\103\032" +
    "\104\023\105\015\001\002\000\036\050\025\051\uffdb\055" +
    "\uffd2\056\uffbb\057\uffbb\060\uffbb\061\uffd0\065\uffce\071\uffcc" +
    "\073\uffca\075\030\103\032\104\023\105\015\001\002\000" +
    "\030\050\uffb7\051\uffb7\055\uffb7\061\uffb7\065\uffb7\071\uffb7" +
    "\073\uffb7\075\uffb7\103\uffb7\104\uffb7\105\uffb7\001\002\000" +
    "\062\031\uffbe\047\uffbe\050\uffbe\051\uffbe\055\uffbe\056\uffbe" +
    "\057\uffbe\060\uffbe\061\uffbe\064\uffbe\065\uffbe\070\uffbe\071" +
    "\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe" +
    "\101\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe\001\002\000" +
    "\024\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba" +
    "\012\uffba\027\uffba\051\uffba\001\002\000\024\004\uff90\005" +
    "\uff90\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\027\uff90" +
    "\051\uff90\001\002\000\012\043\155\044\153\045\154\063" +
    "\257\001\002\000\030\050\uffb9\051\uffb9\055\uffb9\061\uffb9" +
    "\065\uffb9\071\uffb9\073\uffb9\075\uffb9\103\uffb9\104\uffb9\105" +
    "\uffb9\001\002\000\030\050\025\051\uffdb\055\uffd2\061\uffd0" +
    "\065\uffce\071\uffcc\073\uffca\075\030\103\032\104\023\105" +
    "\015\001\002\000\036\050\025\051\uffdb\055\uffd2\056\uffb8" +
    "\057\uffb8\060\uffb8\061\uffd0\065\uffce\071\uffcc\073\uffca\075" +
    "\030\103\032\104\023\105\015\001\002\000\030\050\025" +
    "\051\uffdb\055\uffd2\061\uffd0\065\uffce\071\uffcc\073\uffca\075" +
    "\030\103\032\104\023\105\015\001\002\000\036\050\025" +
    "\051\uffdb\055\uffd2\056\uffb6\057\uffb6\060\uffb6\061\uffd0\065" +
    "\uffce\071\uffcc\073\uffca\075\030\103\032\104\023\105\015" +
    "\001\002\000\062\031\uffcf\047\uffcf\050\uffcf\051\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\064\uffcf\065\uffcf" +
    "\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076" +
    "\uffcf\077\uffcf\101\uffcf\102\uffcf\103\uffcf\104\uffcf\105\uffcf" +
    "\001\002\000\024\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010" +
    "\uff9b\011\uff9b\012\uff9b\027\uff9b\051\uff9b\001\002\000\024" +
    "\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90\012" +
    "\uff90\027\uff90\051\uff90\001\002\000\012\043\155\044\153" +
    "\045\154\062\270\001\002\000\004\031\uff9a\001\002\000" +
    "\004\031\uff98\001\002\000\004\031\310\001\002\000\010" +
    "\031\uff93\056\275\064\274\001\002\000\062\031\uff99\047" +
    "\uff99\050\uff99\051\uff99\055\uff99\056\uff99\057\uff99\060\uff99" +
    "\061\uff99\064\uff99\065\uff99\070\uff99\071\uff99\072\uff99\073" +
    "\uff99\074\uff99\075\uff99\076\uff99\077\uff99\101\uff99\102\uff99" +
    "\103\uff99\104\uff99\105\uff99\001\002\000\004\063\305\001" +
    "\002\000\004\031\277\001\002\000\024\004\uff90\005\uff90" +
    "\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\027\uff90\051" +
    "\uff90\001\002\000\012\032\301\043\155\044\153\045\154" +
    "\001\002\000\004\063\302\001\002\000\030\050\uff92\051" +
    "\uff92\055\uff92\061\uff92\065\uff92\071\uff92\073\uff92\075\uff92" +
    "\103\uff92\104\uff92\105\uff92\001\002\000\030\050\025\051" +
    "\uffdb\055\uffd2\061\uffd0\065\uffce\071\uffcc\073\uffca\075\030" +
    "\103\032\104\023\105\015\001\002\000\036\031\uff91\050" +
    "\025\051\uffdb\055\uffd2\056\uff91\061\uffd0\064\uff91\065\uffce" +
    "\071\uffcc\073\uffca\075\030\103\032\104\023\105\015\001" +
    "\002\000\030\050\uff95\051\uff95\055\uff95\061\uff95\065\uff95" +
    "\071\uff95\073\uff95\075\uff95\103\uff95\104\uff95\105\uff95\001" +
    "\002\000\030\050\025\051\uffdb\055\uffd2\061\uffd0\065\uffce" +
    "\071\uffcc\073\uffca\075\030\103\032\104\023\105\015\001" +
    "\002\000\036\031\uff94\050\025\051\uffdb\055\uffd2\056\uff94" +
    "\061\uffd0\064\uff94\065\uffce\071\uffcc\073\uffca\075\030\103" +
    "\032\104\023\105\015\001\002\000\024\004\uff90\005\uff90" +
    "\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\027\uff90\051" +
    "\uff90\001\002\000\012\032\312\043\155\044\153\045\154" +
    "\001\002\000\004\063\313\001\002\000\030\050\uff97\051" +
    "\uff97\055\uff97\061\uff97\065\uff97\071\uff97\073\uff97\075\uff97" +
    "\103\uff97\104\uff97\105\uff97\001\002\000\030\050\025\051" +
    "\uffdb\055\uffd2\061\uffd0\065\uffce\071\uffcc\073\uffca\075\030" +
    "\103\032\104\023\105\015\001\002\000\036\031\uff96\050" +
    "\025\051\uffdb\055\uffd2\056\uff96\061\uffd0\064\uff96\065\uffce" +
    "\071\uffcc\073\uffca\075\030\103\032\104\023\105\015\001" +
    "\002\000\036\047\uffef\050\uffef\051\uffef\055\uffef\061\uffef" +
    "\065\uffef\071\uffef\073\uffef\075\uffef\076\uffef\101\uffef\103" +
    "\uffef\104\uffef\105\uffef\001\002\000\036\047\ufff4\050\ufff4" +
    "\051\ufff4\055\ufff4\061\ufff4\065\ufff4\071\ufff4\073\ufff4\075" +
    "\ufff4\076\ufff4\101\ufff4\103\ufff4\104\ufff4\105\ufff4\001\002" +
    "\000\036\047\ufff2\050\ufff2\051\ufff2\055\ufff2\061\ufff2\065" +
    "\ufff2\071\ufff2\073\ufff2\075\ufff2\076\ufff2\101\ufff2\103\ufff2" +
    "\104\ufff2\105\ufff2\001\002\000\036\047\ufff1\050\ufff1\051" +
    "\ufff1\055\ufff1\061\ufff1\065\ufff1\071\ufff1\073\ufff1\075\ufff1" +
    "\076\ufff1\101\ufff1\103\ufff1\104\ufff1\105\ufff1\001\002\000" +
    "\036\047\ufff3\050\ufff3\051\ufff3\055\ufff3\061\ufff3\065\ufff3" +
    "\071\ufff3\073\ufff3\075\ufff3\076\ufff3\101\ufff3\103\ufff3\104" +
    "\ufff3\105\ufff3\001\002\000\036\047\ufff5\050\ufff5\051\ufff5" +
    "\055\ufff5\061\ufff5\065\ufff5\071\ufff5\073\ufff5\075\ufff5\076" +
    "\ufff5\101\ufff5\103\ufff5\104\ufff5\105\ufff5\001\002\000\004" +
    "\002\uffff\001\002\000\036\047\uffee\050\uffee\051\uffee\055" +
    "\uffee\061\uffee\065\uffee\071\uffee\073\uffee\075\uffee\076\uffee" +
    "\101\uffee\103\uffee\104\uffee\105\uffee\001\002\000\036\047" +
    "\ufff0\050\ufff0\051\ufff0\055\ufff0\061\ufff0\065\ufff0\071\ufff0" +
    "\073\ufff0\075\ufff0\076\ufff0\101\ufff0\103\ufff0\104\ufff0\105" +
    "\ufff0\001\002\000\024\004\uff90\005\uff90\006\uff90\007\uff90" +
    "\010\uff90\011\uff90\012\uff90\027\uff90\051\uff90\001\002\000" +
    "\012\033\331\043\155\044\153\045\154\001\002\000\062" +
    "\031\uffdf\047\uffdf\050\uffdf\051\uffdf\055\uffdf\056\uffdf\057" +
    "\uffdf\060\uffdf\061\uffdf\064\uffdf\065\uffdf\070\uffdf\071\uffdf" +
    "\072\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf\101" +
    "\uffdf\102\uffdf\103\uffdf\104\uffdf\105\uffdf\001\002\000\004" +
    "\051\334\001\002\000\062\031\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\064\uffcd" +
    "\065\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd\075" +
    "\uffcd\076\uffcd\077\uffcd\101\uffcd\102\uffcd\103\uffcd\104\uffcd" +
    "\105\uffcd\001\002\000\004\054\335\001\002\000\024\004" +
    "\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5" +
    "\027\uffb5\051\uffb5\001\002\000\024\004\uff90\005\uff90\006" +
    "\uff90\007\uff90\010\uff90\011\uff90\012\uff90\027\uff90\051\uff90" +
    "\001\002\000\012\043\155\044\153\045\154\066\uffb4\001" +
    "\002\000\004\066\341\001\002\000\024\004\uff90\005\uff90" +
    "\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\027\uff90\051" +
    "\uff90\001\002\000\014\043\155\044\153\045\154\062\uffb3" +
    "\067\uffb3\001\002\000\006\062\344\067\345\001\002\000" +
    "\032\050\uffb1\051\uffb1\055\uffb1\061\uffb1\065\uffb1\070\360" +
    "\071\uffb1\073\uffb1\075\uffb1\103\uffb1\104\uffb1\105\uffb1\001" +
    "\002\000\024\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae" +
    "\011\uffae\012\uffae\027\uffae\051\uffae\001\002\000\062\031" +
    "\uffb2\047\uffb2\050\uffb2\051\uffb2\055\uffb2\056\uffb2\057\uffb2" +
    "\060\uffb2\061\uffb2\064\uffb2\065\uffb2\070\uffb2\071\uffb2\072" +
    "\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2\101\uffb2" +
    "\102\uffb2\103\uffb2\104\uffb2\105\uffb2\001\002\000\024\004" +
    "\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90" +
    "\027\uff90\051\uff90\001\002\000\012\043\155\044\153\045" +
    "\154\062\351\001\002\000\032\050\uffac\051\uffac\055\uffac" +
    "\061\uffac\065\uffac\070\354\071\uffac\073\uffac\075\uffac\103" +
    "\uffac\104\uffac\105\uffac\001\002\000\030\050\025\051\uffdb" +
    "\055\uffd2\061\uffd0\065\uffce\071\uffcc\073\uffca\075\030\103" +
    "\032\104\023\105\015\001\002\000\062\031\uffad\047\uffad" +
    "\050\uffad\051\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061" +
    "\uffad\064\uffad\065\uffad\070\uffad\071\uffad\072\uffad\073\uffad" +
    "\074\uffad\075\uffad\076\uffad\077\uffad\101\uffad\102\uffad\103" +
    "\uffad\104\uffad\105\uffad\001\002\000\062\031\uffaa\047\uffaa" +
    "\050\uffaa\051\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061" +
    "\uffaa\064\uffaa\065\uffaa\070\uffaa\071\uffaa\072\uffaa\073\uffaa" +
    "\074\uffaa\075\uffaa\076\uffaa\077\uffaa\101\uffaa\102\uffaa\103" +
    "\uffaa\104\uffaa\105\uffaa\001\002\000\032\050\025\051\uffdb" +
    "\055\uffd2\061\uffd0\065\uffce\070\356\071\uffcc\073\uffca\075" +
    "\030\103\032\104\023\105\015\001\002\000\062\031\uffab" +
    "\047\uffab\050\uffab\051\uffab\055\uffab\056\uffab\057\uffab\060" +
    "\uffab\061\uffab\064\uffab\065\uffab\070\uffab\071\uffab\072\uffab" +
    "\073\uffab\074\uffab\075\uffab\076\uffab\077\uffab\101\uffab\102" +
    "\uffab\103\uffab\104\uffab\105\uffab\001\002\000\030\050\025" +
    "\051\uffdb\055\uffd2\061\uffd0\065\uffce\071\uffcc\073\uffca\075" +
    "\030\103\032\104\023\105\015\001\002\000\062\031\uffaf" +
    "\047\uffaf\050\uffaf\051\uffaf\055\uffaf\056\uffaf\057\uffaf\060" +
    "\uffaf\061\uffaf\064\uffaf\065\uffaf\070\uffaf\071\uffaf\072\uffaf" +
    "\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\101\uffaf\102" +
    "\uffaf\103\uffaf\104\uffaf\105\uffaf\001\002\000\032\050\025" +
    "\051\uffdb\055\uffd2\061\uffd0\065\uffce\070\362\071\uffcc\073" +
    "\uffca\075\030\103\032\104\023\105\015\001\002\000\062" +
    "\031\uffb0\047\uffb0\050\uffb0\051\uffb0\055\uffb0\056\uffb0\057" +
    "\uffb0\060\uffb0\061\uffb0\064\uffb0\065\uffb0\070\uffb0\071\uffb0" +
    "\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\101" +
    "\uffb0\102\uffb0\103\uffb0\104\uffb0\105\uffb0\001\002\000\004" +
    "\071\365\001\002\000\062\031\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\064\uffcb" +
    "\065\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075" +
    "\uffcb\076\uffcb\077\uffcb\101\uffcb\102\uffcb\103\uffcb\104\uffcb" +
    "\105\uffcb\001\002\000\024\004\uff90\005\uff90\006\uff90\007" +
    "\uff90\010\uff90\011\uff90\012\uff90\027\uff90\051\uff90\001\002" +
    "\000\012\043\155\044\153\045\154\062\367\001\002\000" +
    "\032\050\uffa8\051\uffa8\055\uffa8\061\uffa8\065\uffa8\071\uffa8" +
    "\072\uffa8\073\uffa8\075\uffa8\103\uffa8\104\uffa8\105\uffa8\001" +
    "\002\000\032\050\uffa6\051\uffa6\055\uffa6\061\uffa6\065\uffa6" +
    "\071\uffa6\072\uffa4\073\uffa6\075\uffa6\103\uffa6\104\uffa6\105" +
    "\uffa6\001\002\000\062\031\uffa7\047\uffa7\050\uffa7\051\uffa7" +
    "\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\064\uffa7\065" +
    "\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7" +
    "\076\uffa7\077\uffa7\101\uffa7\102\uffa7\103\uffa7\104\uffa7\105" +
    "\uffa7\001\002\000\004\072\376\001\002\000\030\050\025" +
    "\051\uffdb\055\uffd2\061\uffd0\065\uffce\071\uffcc\073\uffca\075" +
    "\030\103\032\104\023\105\015\001\002\000\032\050\025" +
    "\051\uffdb\055\uffd2\061\uffd0\065\uffce\071\uffcc\072\375\073" +
    "\uffca\075\030\103\032\104\023\105\015\001\002\000\062" +
    "\031\uffa5\047\uffa5\050\uffa5\051\uffa5\055\uffa5\056\uffa5\057" +
    "\uffa5\060\uffa5\061\uffa5\064\uffa5\065\uffa5\070\uffa5\071\uffa5" +
    "\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\101" +
    "\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5\001\002\000\062" +
    "\031\uffa3\047\uffa3\050\uffa3\051\uffa3\055\uffa3\056\uffa3\057" +
    "\uffa3\060\uffa3\061\uffa3\064\uffa3\065\uffa3\070\uffa3\071\uffa3" +
    "\072\uffa3\073\uffa3\074\uffa3\075\uffa3\076\uffa3\077\uffa3\101" +
    "\uffa3\102\uffa3\103\uffa3\104\uffa3\105\uffa3\001\002\000\032" +
    "\050\uffa2\051\uffa2\055\uffa2\061\uffa2\065\uffa2\071\uffa2\073" +
    "\uffa2\074\u0101\075\uffa2\103\uffa2\104\uffa2\105\uffa2\001\002" +
    "\000\062\031\uffc9\047\uffc9\050\uffc9\051\uffc9\055\uffc9\056" +
    "\uffc9\057\uffc9\060\uffc9\061\uffc9\064\uffc9\065\uffc9\070\uffc9" +
    "\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077" +
    "\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\105\uffc9\001\002" +
    "\000\024\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011" +
    "\uff9f\012\uff9f\027\uff9f\051\uff9f\001\002\000\030\050\025" +
    "\051\uffdb\055\uffd2\061\uffd0\065\uffce\071\uffcc\073\uffca\075" +
    "\030\103\032\104\023\105\015\001\002\000\032\050\025" +
    "\051\uffdb\055\uffd2\061\uffd0\065\uffce\071\uffcc\073\uffca\074" +
    "\u0104\075\030\103\032\104\023\105\015\001\002\000\024" +
    "\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012" +
    "\uffa1\027\uffa1\051\uffa1\001\002\000\024\004\uff90\005\uff90" +
    "\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\027\uff90\051" +
    "\uff90\001\002\000\070\031\uffa0\043\155\044\153\045\154" +
    "\047\uffa0\050\uffa0\051\uffa0\055\uffa0\056\uffa0\057\uffa0\060" +
    "\uffa0\061\uffa0\064\uffa0\065\uffa0\070\uffa0\071\uffa0\072\uffa0" +
    "\073\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0\101\uffa0\102" +
    "\uffa0\103\uffa0\104\uffa0\105\uffa0\001\002\000\024\004\uff90" +
    "\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\027" +
    "\uff90\051\uff90\001\002\000\070\031\uff9e\043\155\044\153" +
    "\045\154\047\uff9e\050\uff9e\051\uff9e\055\uff9e\056\uff9e\057" +
    "\uff9e\060\uff9e\061\uff9e\064\uff9e\065\uff9e\070\uff9e\071\uff9e" +
    "\072\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e\101" +
    "\uff9e\102\uff9e\103\uff9e\104\uff9e\105\uff9e\001\002\000\032" +
    "\050\uffea\051\uffea\055\uffea\061\uffea\065\uffea\071\uffea\073" +
    "\uffea\075\uffea\100\u010b\103\uffea\104\uffea\105\uffea\001\002" +
    "\000\030\050\025\051\uffdb\055\uffd2\061\uffd0\065\uffce\071" +
    "\uffcc\073\uffca\075\030\103\032\104\023\105\015\001\002" +
    "\000\004\027\u010c\001\002\000\004\051\066\001\002\000" +
    "\006\030\u010e\034\070\001\002\000\030\050\uffe8\051\uffe8" +
    "\055\uffe8\061\uffe8\065\uffe8\071\uffe8\073\uffe8\075\uffe8\103" +
    "\uffe8\104\uffe8\105\uffe8\001\002\000\030\050\025\051\uffdb" +
    "\055\uffd2\061\uffd0\065\uffce\071\uffcc\073\uffca\075\030\103" +
    "\032\104\023\105\015\001\002\000\032\050\025\051\uffdb" +
    "\055\uffd2\061\uffd0\065\uffce\071\uffcc\073\uffca\075\030\077" +
    "\u0111\103\032\104\023\105\015\001\002\000\036\047\uffe7" +
    "\050\uffe7\051\uffe7\055\uffe7\061\uffe7\065\uffe7\071\uffe7\073" +
    "\uffe7\075\uffe7\076\uffe7\101\uffe7\103\uffe7\104\uffe7\105\uffe7" +
    "\001\002\000\032\050\025\051\uffdb\055\uffd2\061\uffd0\065" +
    "\uffce\071\uffcc\073\uffca\075\030\077\u0113\103\032\104\023" +
    "\105\015\001\002\000\036\047\uffe9\050\uffe9\051\uffe9\055" +
    "\uffe9\061\uffe9\065\uffe9\071\uffe9\073\uffe9\075\uffe9\076\uffe9" +
    "\101\uffe9\103\uffe9\104\uffe9\105\uffe9\001\002\000\004\002" +
    "\001\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\006\001\001\000\040\002\015" +
    "\004\026\005\021\011\030\024\023\025\032\026\025\030" +
    "\034\031\010\057\020\061\017\062\016\063\013\064\012" +
    "\065\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\377\001\001\000\006\022\363\107\362\001\001" +
    "\000\004\020\332\001\001\000\004\054\326\001\001\000" +
    "\036\004\321\005\316\011\322\024\317\025\324\026\320" +
    "\030\325\031\315\057\020\061\017\062\016\063\013\064" +
    "\012\065\011\001\001\000\004\016\263\001\001\000\004" +
    "\012\222\001\001\000\004\010\215\001\001\000\002\001" +
    "\001\000\004\053\212\001\001\000\002\001\001\000\004" +
    "\055\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\116\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\051\005\046\011\052" +
    "\014\047\024\050\025\053\031\045\057\020\061\017\062" +
    "\016\063\013\064\012\065\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\004\057\005\055\011\060\024" +
    "\056\025\061\031\054\057\020\061\017\062\016\063\013" +
    "\064\012\065\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\064\001\001\000\002\001\001\000\004\007\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\071" +
    "\001\001\000\034\004\051\005\046\011\052\014\072\024" +
    "\050\025\053\031\045\057\020\061\017\062\016\063\013" +
    "\064\012\065\011\001\001\000\032\004\057\005\055\011" +
    "\060\024\056\025\061\031\054\057\020\061\017\062\016" +
    "\063\013\064\012\065\011\001\001\000\002\001\001\000" +
    "\004\007\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\100\001\001\000\012\013\103\034\105\041" +
    "\104\126\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\155\001\001\000\004\032\171\001\001\000" +
    "\002\001\001\000\012\006\122\036\113\037\112\040\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\127\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\036\141\037\112\040\110\001" +
    "\001\000\010\036\126\037\112\040\110\001\001\000\002" +
    "\001\001\000\006\037\140\040\110\001\001\000\006\037" +
    "\137\040\110\001\001\000\006\037\132\040\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\041\143\126" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\151\041\104\126\106\001\001\000\004\033\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\131\156\001\001\000\006\041\157\126\106" +
    "\001\001\000\004\032\160\001\001\000\004\132\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\041\170\126\106\001\001\000\002\001\001\000\004" +
    "\130\172\001\001\000\006\041\173\126\106\001\001\000" +
    "\002\001\001\000\010\013\175\041\104\126\106\001\001" +
    "\000\004\033\155\001\001\000\002\001\001\000\004\010" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\206\001\001\000\002\001\001\000\010\013\210" +
    "\041\104\126\106\001\001\000\004\033\155\001\001\000" +
    "\002\001\001\000\010\013\213\041\104\126\106\001\001" +
    "\000\004\033\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\217\041\104\126\106\001\001\000\004" +
    "\033\155\001\001\000\002\001\001\000\004\066\223\001" +
    "\001\000\002\001\001\000\010\013\224\041\104\126\106" +
    "\001\001\000\006\033\155\067\225\001\001\000\006\035" +
    "\227\070\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\004\051\005\046\011\052\014\231\024\050\025" +
    "\053\031\045\057\020\061\017\062\016\063\013\064\012" +
    "\065\011\001\001\000\034\004\057\005\055\011\060\024" +
    "\056\025\061\031\054\057\020\061\017\062\016\063\013" +
    "\064\012\065\011\071\232\001\001\000\006\042\236\073" +
    "\233\001\001\000\004\015\242\001\001\000\004\072\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\051\005\046\011\052\014\240\024\050\025\053\031\045" +
    "\057\020\061\017\062\016\063\013\064\012\065\011\001" +
    "\001\000\032\004\057\005\055\011\060\024\056\025\061" +
    "\031\054\057\020\061\017\062\016\063\013\064\012\065" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\074\244\001\001\000\010\013\245\041\104\126\106\001" +
    "\001\000\004\033\155\001\001\000\004\075\247\001\001" +
    "\000\034\004\051\005\046\011\052\014\250\024\050\025" +
    "\053\031\045\057\020\061\017\062\016\063\013\064\012" +
    "\065\011\001\001\000\032\004\057\005\055\011\060\024" +
    "\056\025\061\031\054\057\020\061\017\062\016\063\013" +
    "\064\012\065\011\001\001\000\004\100\261\001\001\000" +
    "\002\001\001\000\004\076\254\001\001\000\010\013\255" +
    "\041\104\126\106\001\001\000\004\033\155\001\001\000" +
    "\004\077\257\001\001\000\034\004\051\005\046\011\052" +
    "\014\260\024\050\025\053\031\045\057\020\061\017\062" +
    "\016\063\013\064\012\065\011\001\001\000\032\004\057" +
    "\005\055\011\060\024\056\025\061\031\054\057\020\061" +
    "\017\062\016\063\013\064\012\065\011\001\001\000\034" +
    "\004\051\005\046\011\052\014\262\024\050\025\053\031" +
    "\045\057\020\061\017\062\016\063\013\064\012\065\011" +
    "\001\001\000\032\004\057\005\055\011\060\024\056\025" +
    "\061\031\054\057\020\061\017\062\016\063\013\064\012" +
    "\065\011\001\001\000\002\001\001\000\004\117\265\001" +
    "\001\000\010\013\266\041\104\126\106\001\001\000\004" +
    "\033\155\001\001\000\004\120\270\001\001\000\006\017" +
    "\272\121\271\001\001\000\002\001\001\000\004\124\275" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\277\041\104\126\106\001\001\000\004" +
    "\033\155\001\001\000\002\001\001\000\004\125\302\001" +
    "\001\000\034\004\051\005\046\011\052\014\303\024\050" +
    "\025\053\031\045\057\020\061\017\062\016\063\013\064" +
    "\012\065\011\001\001\000\032\004\057\005\055\011\060" +
    "\024\056\025\061\031\054\057\020\061\017\062\016\063" +
    "\013\064\012\065\011\001\001\000\004\123\305\001\001" +
    "\000\034\004\051\005\046\011\052\014\306\024\050\025" +
    "\053\031\045\057\020\061\017\062\016\063\013\064\012" +
    "\065\011\001\001\000\032\004\057\005\055\011\060\024" +
    "\056\025\061\031\054\057\020\061\017\062\016\063\013" +
    "\064\012\065\011\001\001\000\010\013\310\041\104\126" +
    "\106\001\001\000\004\033\155\001\001\000\002\001\001" +
    "\000\004\122\313\001\001\000\034\004\051\005\046\011" +
    "\052\014\314\024\050\025\053\031\045\057\020\061\017" +
    "\062\016\063\013\064\012\065\011\001\001\000\032\004" +
    "\057\005\055\011\060\024\056\025\061\031\054\057\020" +
    "\061\017\062\016\063\013\064\012\065\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\327" +
    "\041\104\126\106\001\001\000\004\033\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\101\335\001\001\000\010\013\336\041" +
    "\104\126\106\001\001\000\006\033\155\102\337\001\001" +
    "\000\002\001\001\000\010\013\341\041\104\126\106\001" +
    "\001\000\006\033\155\103\342\001\001\000\004\021\345" +
    "\001\001\000\004\104\356\001\001\000\004\105\346\001" +
    "\001\000\002\001\001\000\010\013\347\041\104\126\106" +
    "\001\001\000\004\033\155\001\001\000\006\043\352\106" +
    "\351\001\001\000\034\004\051\005\046\011\052\014\354" +
    "\024\050\025\053\031\045\057\020\061\017\062\016\063" +
    "\013\064\012\065\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\004\057\005\055\011\060\024\056\025" +
    "\061\031\054\057\020\061\017\062\016\063\013\064\012" +
    "\065\011\001\001\000\002\001\001\000\034\004\051\005" +
    "\046\011\052\014\360\024\050\025\053\031\045\057\020" +
    "\061\017\062\016\063\013\064\012\065\011\001\001\000" +
    "\002\001\001\000\032\004\057\005\055\011\060\024\056" +
    "\025\061\031\054\057\020\061\017\062\016\063\013\064" +
    "\012\065\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\365\041\104\126\106\001" +
    "\001\000\004\033\155\001\001\000\004\110\367\001\001" +
    "\000\010\044\370\111\372\112\371\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\051\005\046\011\052" +
    "\014\373\024\050\025\053\031\045\057\020\061\017\062" +
    "\016\063\013\064\012\065\011\001\001\000\032\004\057" +
    "\005\055\011\060\024\056\025\061\031\054\057\020\061" +
    "\017\062\016\063\013\064\012\065\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\113\u0101\001\001\000" +
    "\002\001\001\000\004\115\u0106\001\001\000\034\004\051" +
    "\005\046\011\052\014\u0102\024\050\025\053\031\045\057" +
    "\020\061\017\062\016\063\013\064\012\065\011\001\001" +
    "\000\032\004\057\005\055\011\060\024\056\025\061\031" +
    "\054\057\020\061\017\062\016\063\013\064\012\065\011" +
    "\001\001\000\004\114\u0104\001\001\000\010\013\u0105\041" +
    "\104\126\106\001\001\000\004\033\155\001\001\000\010" +
    "\013\u0107\041\104\126\106\001\001\000\004\033\155\001" +
    "\001\000\004\047\u0109\001\001\000\034\004\051\005\046" +
    "\011\052\014\u0111\024\050\025\053\031\045\057\020\061" +
    "\017\062\016\063\013\064\012\065\011\001\001\000\002" +
    "\001\001\000\004\027\u010c\001\001\000\002\001\001\000" +
    "\004\050\u010e\001\001\000\034\004\051\005\046\011\052" +
    "\014\u010f\024\050\025\053\031\045\057\020\061\017\062" +
    "\016\063\013\064\012\065\011\001\001\000\032\004\057" +
    "\005\055\011\060\024\056\025\061\031\054\057\020\061" +
    "\017\062\016\063\013\064\012\065\011\001\001\000\002" +
    "\001\001\000\032\004\057\005\055\011\060\024\056\025" +
    "\061\031\054\057\020\061\017\062\016\063\013\064\012" +
    "\065\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Variables para el Arbol sintactico
    proyecto_olc1.arbolSintactico arbolAux = proyecto_olc1.interfaz.arbol;
    proyecto_olc1.Nodo nodoAux = proyecto_olc1.interfaz.nodo;

    int v1,v2 = 0;
    int contLL,contCL,contEXPR = 0;
    String crp = "cuerpo"; 
    String ins = "INSTRUCCIONES";

    public static String txtPython = ""; //Variable que guarda el código python
    String auxP = ""; //Guarda condicion/expresion
    String aux2=""; //Guarda informacion de lista parametros, nombres y expresiones/condiciones
    String tmpPS = ""; //Guarda condicion del switch case
    String tmp = "";   // Guarda lista de resultados asignacion/declaracion
    String tmpPARA =""; //Guarda condicion hasta(condicion) del ciclo para
    int cont1 = 0; //contador de nombres asignacion/declaracion

    int contTPY = 0; //contador de tabulacion
    
    public static String txtGo = ""; //Variable que guarda el código Golang
    String auxTP = ""; //guarda el tipo de dato
    String auxC = "";
    String aux2G = "";
    String tmpG="";
    String auxID="";
    String tmpPARAG="";
    String imps = ""; //guarda bloque de importaciones
    int flag = 0; //verificador para cierre de llave main
    int flag2 = 0;

    //caracter ascii
    String cA = ""; //guarda el valor del token caracter Ascci
    int c = 0; //guarda el valor del caracter asccii

    //Metodo para calcular la identación correcta python
    public String tab(){
        String tab = "";
        for(int i = 0; i < (contTPY*4); i++) {
            tab+=" ";

        }
       
        return tab;
    }

    //Método al que se llama automáticamente ante algún error sintactico. 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
            claseErrores datos = new claseErrores(String.valueOf(s.value), "Error sintáctico", "No se esperaba este componente:",s.left,s.right);
            Analizador_Lexico.TError.add(datos);
    } 
    
    //Método al que se llama en el momento en que ya no es posible una recuperación de errores. 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
            claseErrores datos = new claseErrores("Null", "Error sintáctico", "Error irrecuperable", s.left,s.right);
            Analizador_Lexico.TError.add(datos);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$A_sintactico$actions {


    String sumaO(Object v1, Object v2){
        auxP+= " "+v1.toString() + " + " + v2.toString();
        auxC+= " "+v1.toString() + " + " + v2.toString();

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-Suma",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-EXPRESION");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-"+v1.toString(),String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-Suma");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-mas",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-Suma");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"- + ",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-mas");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-"+v2.toString(),String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-Suma");
        contEXPR++;
        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        return "";
    }
    
    String restaO(Object v1, Object v2){
        auxP+= " "+v1.toString() + " - " + v2.toString();
        auxC+= " "+v1.toString() + " - " + v2.toString();
        
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-Rresta",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-EXPRESION");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-"+v1.toString(),String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-Rresta");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-resta",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-Rresta");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"- - ",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-resta");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-"+v2.toString(),String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-Rresta");
        contEXPR++;

        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        flag2=0;
        return "";
    }

    String multi(Object v1, Object v2){
        auxP+= " "+v1.toString() + " * " + v2.toString();
        auxC+= " "+v1.toString() + " * " + v2.toString();

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-multi",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-EXPRESION");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-"+v1.toString(),String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-multi");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-mult",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-multi");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"- * ",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-mult");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-"+v2.toString(),String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-multi");
        contEXPR++;

        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        return "";
    }

    String divs(Object v1, Object v2){

        auxP+= " "+v1.toString() + " / " + v2.toString();
        auxC+= " "+v1.toString() + " / " + v2.toString();

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-divs",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-EXPRESION");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-"+v1.toString(),String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-divs");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-div",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-divs");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"- / ",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-div");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-"+v2.toString(),String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-divs");
        contEXPR++;

        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        return "";
    }
    
    String modulo(Object v1, Object v2){

        auxP+= " "+v1.toString() + " % " + v2.toString();
        auxC+= " "+v1.toString() + " % " + v2.toString();

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-OPmodulo",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-EXPRESION");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-"+v1.toString(),String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-OPmodulo");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-Rmod",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-OPmodulo");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"- modulo ",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-Rmod");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-"+v2.toString(),String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-OPmodulo");
        contEXPR++;

        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        return "";
    }
    
    String potencia(Object v1, Object v2){

        auxP+= " "+v1.toString() + " ** " + v2.toString();
        auxC+= " math.Pow(float64("+v1.toString() + "),float64(" + v2.toString()+"))";

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-OPpotencia",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-EXPRESION");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-"+v1.toString(),String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-OPpotencia");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-Rpotencia",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-OPpotencia");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"- potencia ",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-Rpotencia");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-abrir_C",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-OPpotencia");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"- [ ",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-abrir_C");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-"+v2.toString(),String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-OPpotencia");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-cerrar_C",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-OPpotencia");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"- ] ",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(contEXPR)+"-cerrar_C");
        contEXPR++;

        System.out.println("dato:"+v1.toString()+"," + v2.toString());
        return "";
    }

  private final A_sintactico parser;

  /** Constructor */
  CUP$A_sintactico$actions(A_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$A_sintactico$do_action_part00000000(
    int                        CUP$A_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_sintactico$parser,
    java.util.Stack            CUP$A_sintactico$stack,
    int                        CUP$A_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$A_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$A_sintactico$parser.done_parsing();
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        //arbol
        arbolAux.InsertarRecursivo(nodoAux,"Rinicio","Global");
        arbolAux.InsertarRecursivo(nodoAux,"inicio","Rinicio");
        arbolAux.InsertarRecursivo(nodoAux,"cuerpo","Global");
        arbolAux.InsertarRecursivo(nodoAux,"Rfin","Global");

        txtPython+=tab()+"def main():\n";
        imps+= "import (\n\"fmt\"\n\"math\"\n)\n";
        txtGo+=tab()+"package main\n"+tab()+imps+"func main(){\n";
        contTPY+=1;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",35, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= inicio NT$0 cuerpo fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		
        arbolAux.InsertarRecursivo(nodoAux,"fin","Rfin");

        txtPython+="if __name__ == '__main__':\n    main()";
        
        if(flag==0){
            txtGo+="}";
        }

        contTPY-=1;
        imps = "";
        System.out.println(txtPython);
        System.out.println(txtGo);
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error fin 
            {
              Object RESULT =null;
		System.out.println("Falta inicio");
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpo ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo ::= CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo ::= RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo ::= METODO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo ::= FUNCION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo ::= LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo ::= cuerpo CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo ::= cuerpo DECLARACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo ::= cuerpo ASIGNACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cuerpo ::= cuerpo RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpo ::= cuerpo METODO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cuerpo ::= cuerpo FUNCION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cuerpo ::= cuerpo LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cuerpo ::= cuerpo IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",0, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LLAMADA ::= ejecutar id abrir_par cerrar_par puntoComa 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		  
                if(crp.equals("cuerpo")){
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-LLAMADA",crp);

                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rejecutar",String.valueOf(contLL)+"-LLAMADA");
                    arbolAux.InsertarRecursivo(nodoAux,"ejecutar",String.valueOf(contLL)+"-Rejecutar");

                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-idd",String.valueOf(contLL)+"-LLAMADA");
                    arbolAux.InsertarRecursivo(nodoAux,idd.toString(),String.valueOf(contLL)+"-idd");

                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-abrir_par",String.valueOf(contLL)+"-LLAMADA");
                    arbolAux.InsertarRecursivo(nodoAux,"(",String.valueOf(contLL)+"-abrir_par");

                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-cerrar_par",String.valueOf(contLL)+"-LLAMADA");
                    arbolAux.InsertarRecursivo(nodoAux,")",String.valueOf(contLL)+"-cerrar_par");

                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-puntoComa",String.valueOf(contLL)+"-LLAMADA");
                    arbolAux.InsertarRecursivo(nodoAux,";",String.valueOf(contLL)+"-puntoComa");
                }         
                
    
                txtPython+=tab()+String.valueOf(idd)+"()\n";
                txtGo+= tab()+String.valueOf(idd)+"()\n";
                contLL++;
            
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$1 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        if(crp.equals("cuerpo")){
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-LLAMADA",crp);

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rejecutar",String.valueOf(contLL)+"-LLAMADA");
            arbolAux.InsertarRecursivo(nodoAux,"ejecutar",String.valueOf(contLL)+"-Rejecutar");

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-idd",String.valueOf(contLL)+"-LLAMADA");
            arbolAux.InsertarRecursivo(nodoAux,idd.toString(),String.valueOf(contLL)+"-idd");

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-abrir_par",String.valueOf(contLL)+"-LLAMADA");
            arbolAux.InsertarRecursivo(nodoAux,"(",String.valueOf(contLL)+"-abrir_par");

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-LEJC",String.valueOf(contLL)+"-LLAMADA");
        }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",36, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LLAMADA ::= ejecutar id abrir_par NT$1 LEJC cerrar_par puntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).value;
		
        
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-cerrar_par",String.valueOf(contLL)+"-LLAMADA");
        arbolAux.InsertarRecursivo(nodoAux,")",String.valueOf(contLL)+"-cerrar_par");

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-puntoComa",String.valueOf(contLL)+"-LLAMADA");
        arbolAux.InsertarRecursivo(nodoAux,";",String.valueOf(contLL)+"-puntoComa");
        
       

        txtPython+= tab()+ String.valueOf(idd)+"("+aux2+")\n";
        txtGo+=tab()+String.valueOf(idd)+"("+aux2G+")\n";
        contLL++;
        auxP="";
        auxC="";
        aux2="";
        aux2G="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA",23, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$2 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        if(crp.equals("cuerpo")){
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-METODO",crp);

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rmetodo",String.valueOf(contLL)+"-METODO");
            arbolAux.InsertarRecursivo(nodoAux,"metodo",String.valueOf(contLL)+"-Rmetodo");

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-idd",String.valueOf(contLL)+"-METODO");
            arbolAux.InsertarRecursivo(nodoAux,idd.toString(),String.valueOf(contLL)+"-idd");
        }  

        txtPython+=tab()+"def "+String.valueOf(idd)+"():\n";
        flag=1;
        txtGo+="}\n";
        txtGo+="func "+String.valueOf(idd)+"(){\n";
        contTPY+=1; 
        auxP="";
        auxC="";

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-METODO");
        crp="INSTRUCCIONES";

    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",37, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // METODO ::= metodo id NT$2 INSTRUCCIONES Finmetodo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		

        crp="cuerpo";
        
        contLL--;
        contCL--;
    
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-finMetodo",String.valueOf(contLL)+"-METODO");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-fin_metodo",String.valueOf(contLL)+"-finMetodo");
        
        contLL++;

        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$3 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;

        if(crp.equals("cuerpo")){
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-METODO",crp);

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rmetodo",String.valueOf(contLL)+"-METODO");
            arbolAux.InsertarRecursivo(nodoAux,"metodo",String.valueOf(contLL)+"-Rmetodo");

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-idd",String.valueOf(contLL)+"-METODO");
            arbolAux.InsertarRecursivo(nodoAux,idd.toString(),String.valueOf(contLL)+"-idd");

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rparametros",String.valueOf(contLL)+"-METODO");
            arbolAux.InsertarRecursivo(nodoAux,"con_parametros",String.valueOf(contLL)+"-Rparametros");

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-abrir_par",String.valueOf(contLL)+"-METODO");
            arbolAux.InsertarRecursivo(nodoAux,")",String.valueOf(contLL)+"-abrir_par");

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-LISTAP",String.valueOf(contLL)+"-METODO");
            arbolAux.InsertarRecursivo(nodoAux,aux2,String.valueOf(contLL)+"-LISTAP");

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-cerrar_par ",String.valueOf(contLL)+"-METODO");
            arbolAux.InsertarRecursivo(nodoAux,")",String.valueOf(contLL)+"-cerrar_par ");
        }

        txtPython+=tab()+"def "+String.valueOf(idd)+"("+aux2+"):\n";
        flag=1;
        txtGo+="}\n";
        txtGo+="func "+String.valueOf(idd)+"("+aux2G+"){\n";
        contTPY+=1; 
        aux2="";
        aux2G="";

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-METODO");
        crp="INSTRUCCIONES";

    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",38, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // METODO ::= metodo id con_parametros abrir_par LISTAP cerrar_par NT$3 INSTRUCCIONES Finmetodo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).value;
		
        crp="cuerpo";
        
        contLL--;
        contCL--;
    
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-finMetodo",String.valueOf(contLL)+"-METODO");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-fin_metodo",String.valueOf(contLL)+"-finMetodo");
        
        contLL++;

        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",20, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$4 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        if(crp.equals("cuerpo")){
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-FUNCION",crp);

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rfuncion",String.valueOf(contLL)+"-FUNCION");
            arbolAux.InsertarRecursivo(nodoAux,"funcion",String.valueOf(contLL)+"-Rfuncion");

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-idd",String.valueOf(contLL)+"-FUNCION");
            arbolAux.InsertarRecursivo(nodoAux,idd.toString(),String.valueOf(contLL)+"-idd");
            
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-TIPODATO",String.valueOf(contLL)+"-FUNCION");
           
        }  

        txtPython+=tab()+"def "+String.valueOf(idd)+":\n";
        flag=1;
        txtGo+="}\n";
        txtGo+="func "+String.valueOf(idd)+"()"+String.valueOf(tdd)+"{\n";
        contTPY+=1; 
        auxP="";
        auxC="";

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-FUNCION");
        crp="INSTRUCCIONES";

    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",39, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCION ::= funcion id TIPODATO NT$4 INSTRUCCIONES Finfuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		
        crp="cuerpo";
        
        contLL--;
        contCL--;
    
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-finFuncion",String.valueOf(contLL)+"-FUNCION");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-fin_funcion",String.valueOf(contLL)+"-finFuncion");
        
        contLL++;

        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$5 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;

        if(crp.equals("cuerpo")){
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-FUNCION",crp);

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rfuncion",String.valueOf(contLL)+"-FUNCION");
            arbolAux.InsertarRecursivo(nodoAux,"funcion",String.valueOf(contLL)+"-Rfuncion");

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-idd",String.valueOf(contLL)+"-FUNCION");
            arbolAux.InsertarRecursivo(nodoAux,idd.toString(),String.valueOf(contLL)+"-idd");
            
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-TIPODATO",String.valueOf(contLL)+"-FUNCION");

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rparametros",String.valueOf(contLL)+"-FUNCION");
            arbolAux.InsertarRecursivo(nodoAux,"con_parametros",String.valueOf(contLL)+"-Rparametros");

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-abrir_par",String.valueOf(contLL)+"-FUNCION");
            arbolAux.InsertarRecursivo(nodoAux,")",String.valueOf(contLL)+"-abrir_par");

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-LISTAP",String.valueOf(contLL)+"-FUNCION");
            arbolAux.InsertarRecursivo(nodoAux,aux2,String.valueOf(contLL)+"-LISTAP");

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-cerrar_par ",String.valueOf(contLL)+"-FUNCION");
            arbolAux.InsertarRecursivo(nodoAux,")",String.valueOf(contLL)+"-cerrar_par ");
        }

        txtPython+=tab()+"def "+String.valueOf(idd)+"("+aux2+"):\n";
        flag=1;
        txtGo+="}\n";
        txtGo+="func "+String.valueOf(idd)+"("+aux2G+")"+String.valueOf(tdd)+"{\n";
        contTPY+=1; 
        aux2="";
        aux2G="";

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-FUNCION");
        crp="INSTRUCCIONES";

    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",40, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCION ::= funcion id TIPODATO con_parametros abrir_par LISTAP cerrar_par NT$5 INSTRUCCIONES Finfuncion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)).value;
		
        crp="cuerpo";
        
        contLL--;
        contCL--;
    
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-finFuncion",String.valueOf(contLL)+"-FUNCION");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-fin_funcion",String.valueOf(contLL)+"-finFuncion");
        
        contLL++;

        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",22, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$6 ::= 
            {
              Object RESULT =null;

    if(crp.equals("cuerpo")){
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-IMPRESION",crp);
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rimprimir",String.valueOf(contLL)+"-IMPRESION");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-imprimir",String.valueOf(contLL)+"-Rimprimir");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-IMPRESION");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-puntoComa",String.valueOf(contLL)+"-IMPRESION");
        arbolAux.InsertarRecursivo(nodoAux,";",String.valueOf(contLL)+"-puntoComa");
    }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",41, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IMPRESION ::= imprimir NT$6 CONDICION puntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		       

        txtPython+=tab()+"print("+auxP+")\n";
        txtGo+=tab()+"fmt.Print("+auxC+")\n";
        contLL++;
        contCL++;
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",19, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$7 ::= 
            {
              Object RESULT =null;

        if(crp.equals("cuerpo")){
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-IMPRESION",crp);
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rimprimir_nl",String.valueOf(contLL)+"-IMPRESION");
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-imprimir_nl",String.valueOf(contLL)+"-Rimprimir_nl");
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-IMPRESION");
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-puntoComa",String.valueOf(contLL)+"-IMPRESION");
            arbolAux.InsertarRecursivo(nodoAux,";",String.valueOf(contLL)+"-puntoComa");
        }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",42, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IMPRESION ::= imprimir_nl NT$7 CONDICION puntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		
        txtPython+=tab()+"print("+auxP+",\"\\n\")\n";
        txtGo+=tab()+"fmt.Println("+auxC+")\n";
        contLL++;
        contCL++;
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRESION",19, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$8 ::= 
            {
              Object RESULT =null;

                if(crp.equals("cuerpo")){
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-DECLARACION",crp);
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Ringresar",String.valueOf(contLL)+"-DECLARACION");
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-ingresar",String.valueOf(contLL)+"-Ringresar");
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-LISTA",String.valueOf(contLL)+"-DECLARACION");
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rcomo",String.valueOf(contLL)+"-DECLARACION");
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-como",String.valueOf(contLL)+"-Rcomo");
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-TIPODATO",String.valueOf(contLL)+"-DECLARACION");
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-RCon_valor",String.valueOf(contLL)+"-DECLARACION");
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-con_valor",String.valueOf(contLL)+"-RCon_valor");
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-DECLARACION");
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-puntoComa",String.valueOf(contLL)+"-DECLARACION");
                    arbolAux.InsertarRecursivo(nodoAux,";",String.valueOf(contLL)+"-puntoComa");
                }
               
                txtPython+=tab();
                txtGo+=tab()+"var ";
            
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",43, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int ttdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int ttdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object ttd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
auxTP+=ttd;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",44, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Ringresar NT$8 LISTA Rcomo TIPODATO NT$9 RCon_valor CONDICION puntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int ttdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int ttdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object ttd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		
                contLL++;
                //contCL++;

                txtPython+=aux2;
                txtGo+=aux2;

                aux2="";
                txtPython+=" = ";
                txtGo+=" "+auxTP+" = ";
                auxTP="";
           
                for(int i = 0 ; i <= cont1; i = i + 1)
                {
                    if(i==0){
                        tmp+=auxP;
                        tmpG+=auxC;
                    }
                    else{
                        tmp+= "," + auxP;
                        tmpG+= ","+ auxC;
                    }

                };
                txtPython+= tmp+"\n";
                txtGo+= tmpG+"\n"; 
                auxP="";
                auxC="";
                tmp="";
                tmpG="";
                cont1=0;
            
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$10 ::= 
            {
              Object RESULT =null;

        //arbol
        if(crp.equals("cuerpo")){
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-ASIGNACION",crp);
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-LISTA",String.valueOf(contLL)+"-ASIGNACION");
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rasignacion",String.valueOf(contLL)+"-ASIGNACION");
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- ->",String.valueOf(contLL)+"-Rasignacion");
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-ASIGNACION");
        }
        
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",45, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACION ::= NT$10 LISTA asignacion CONDICION puntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		
                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-puntoComa",String.valueOf(contLL)+"-ASIGNACION");
                arbolAux.InsertarRecursivo(nodoAux,";",String.valueOf(contLL)+"-puntoComa");

                txtPython+= tab()+aux2;
                txtGo+= tab()+aux2;
                aux2="";
                txtPython+=" = ";
                txtGo+=" = ";

                for(int i = 0 ; i <= cont1; i = i + 1)
                {
                    if(i==0){
                        tmp+=auxP;
                        tmpG+=auxC;
                    }
                    else{
                        tmp+= "," + auxP;
                        tmpG+= ","+ auxC;
                    }

                };
                txtPython+= tmp+"\n";
                txtGo+=tmpG+"\n";
                auxP="";
                auxC="";
                tmp="";
                tmpG="";
                cont1=0;
                contLL++;
                contCL++;
            
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTAP ::= id TIPODATO 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        aux2+=String.valueOf(idd);
        aux2G+= String.valueOf(idd)+" "+String.valueOf(tdd);
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAP",21, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTAP ::= LISTAP Coma id TIPODATO 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        aux2+=","+String.valueOf(idd);
        aux2G+=","+String.valueOf(idd)+" "+String.valueOf(tdd);
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAP",21, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTA ::= id 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		                                  
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-idd",String.valueOf(contLL)+"-LISTA");
        arbolAux.InsertarRecursivo(nodoAux,idd.toString(),String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-idd");
        contCL++;
        aux2+=idd.toString();
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTA ::= LISTA Coma id 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Coma",String.valueOf(contLL)+"-LISTA");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"- , ",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Coma");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-idd",String.valueOf(contLL)+"-LISTA");
        arbolAux.InsertarRecursivo(nodoAux,idd.toString(),String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-idd");
        
        contCL++;
        aux2+=","+idd.toString();
        cont1=cont1+1;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LEJC ::= CONDICION 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-LEJC");

        contCL++;
        aux2+=auxP;
        aux2G+=auxC;
        auxC="";
        auxP="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LEJC",26, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$11 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Coma",String.valueOf(contLL)+"-LEJC");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"- , ",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Coma");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-LEJC");
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",46, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LEJC ::= LEJC Coma NT$11 CONDICION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        aux2+=","+auxP;
        aux2G+=","+auxC;
        contCL++;
        auxC="";
        auxP="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("LEJC",26, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$12 ::= 
            {
              Object RESULT =null;

        if(crp.equals("cuerpo")){
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-CONDICIONALES",crp);
        }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",47, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDICIONALES ::= NT$12 IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$13 ::= 
            {
              Object RESULT =null;

        if(crp.equals("cuerpo")){
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-CONDICIONALES",crp);
        }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",48, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDICIONALES ::= NT$13 SEGUN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$14 ::= 
            {
              Object RESULT =null;

        if(crp.equals("cuerpo")){
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-CONDICIONALES",crp);
        }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",49, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONDICIONALES ::= NT$14 PARA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$15 ::= 
            {
              Object RESULT =null;

        if(crp.equals("cuerpo")){
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-CONDICIONALES",crp);
        }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",50, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICIONALES ::= NT$15 MIENTRAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$16 ::= 
            {
              Object RESULT =null;

        if(crp.equals("cuerpo")){
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-CONDICIONALES",crp);
        }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$16",51, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONDICIONALES ::= NT$16 REPETIR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",7, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$17 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-IF",String.valueOf(contLL)+"-CONDICIONALES");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-condSi",String.valueOf(contLL)+"-IF");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- Si",String.valueOf(contLL)+"-condSi");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-IF");   
        contCL++;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$17",52, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        txtPython+=tab()+"if "+auxP+":\n";
        txtGo+=tab()+"if "+auxC+" {\n";
        contTPY+=1; auxP="";auxC="";
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-auxFS",String.valueOf(contLL)+"-IF");
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$18",53, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IF ::= condSi NT$17 CONDICION NT$18 auxFS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("IF",8, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$19 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rentonces",String.valueOf(contLL)+"-auxFS");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- entonces",String.valueOf(contLL)+"-Rentonces");        
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-auxFS");
        crp="INSTRUCCIONES";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$19",54, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

        crp="cuerpo";
        contLL--;
        contCL--;
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-AuxIFF",String.valueOf(contLL)+"-auxFS");
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$20",55, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // auxFS ::= NT$19 entonces INSTRUCCIONES NT$20 AuxIFF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("auxFS",27, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // AuxIFF ::= finSi 
            {
              Object RESULT =null;
		
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-finSi",String.valueOf(contLL)+"-AuxIFF");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-fin_Si",String.valueOf(contLL)+"-finSi");
        
        contLL++;
        contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("AuxIFF",32, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$21 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-contrario",String.valueOf(contLL)+"-AuxIFF");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-de_lo_contrario",String.valueOf(contLL)+"-contrario");
        
        contTPY-=1;
        txtPython+=tab()+"else:\n";
        txtGo+=tab()+"} else {\n";
        contTPY+=1;
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-AuxIFF");
        crp="INSTRUCCIONES";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$21",56, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // AuxIFF ::= contrario NT$21 INSTRUCCIONES finSi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		
        crp="cuerpo";
        contLL--;
        contCL--;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-finSi",String.valueOf(contLL)+"-AuxIFF");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-fin_Si",String.valueOf(contLL)+"-finSi");
        
        contLL++;
        contCL++;

        contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("AuxIFF",32, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$22 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-BLOQUE",String.valueOf(contLL)+"-AuxIFF");

    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$22",57, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // AuxIFF ::= NT$22 BLOQUE finSi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		
       
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-finSi",String.valueOf(contLL)+"-AuxIFF");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-fin_Si",String.valueOf(contLL)+"-finSi");
        contLL++;
        contCL++;

        contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("AuxIFF",32, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$23 ::= 
            {
              Object RESULT =null;


        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-OSi",String.valueOf(contLL)+"-BLOQUE");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-O_si",String.valueOf(contLL)+"-OSi");  
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-BLOQUE"); 
        contCL++;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$23",58, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$24 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Rentonces",String.valueOf(contLL)+"-BLOQUE");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- entonces",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Rentonces"); 
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-BLOQUE");
        
        contTPY-=1; 
        txtPython+=tab()+"elif "+auxP+":\n";
        txtGo+= tab()+"}else if "+auxC+" {\n";
        contTPY+=1;
        auxP="";
        auxC="";

        crp="INSTRUCCIONES";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$24",59, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BLOQUE ::= OSi NT$23 CONDICION entonces NT$24 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		
        crp="cuerpo";  
        contLL--;
        contCL--;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$25 ::= 
            {
              Object RESULT =null;

        
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-OSi",String.valueOf(contLL)+"-BLOQUE");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-O_si",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-OSi");  
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-BLOQUE");
        contCL++;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$25",60, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$26 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Rentonces",String.valueOf(contLL)+"-BLOQUE");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- entonces",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Rentonces"); 
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-BLOQUE");

        contTPY-=1; 
        txtPython+=tab()+"elif "+auxP+":\n";
        txtGo+=tab()+"}else if "+auxC+" {\n";
        contTPY+=1;
        auxP=""; auxC="";
        crp="INSTRUCCIONES";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$26",61, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BLOQUE ::= BLOQUE OSi NT$25 CONDICION entonces NT$26 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		
        crp="cuerpo";
        contLL--;
        contCL--;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$27 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-contrario",String.valueOf(contLL)+"-BLOQUE");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-de_lo_contrario",String.valueOf(contLL)+"-contrario");

        contTPY-=1;
        txtPython+=tab()+"else:\n";
        txtGo+=tab()+" }else {\n";
        contTPY+=1;
        auxP="";
        auxC="";
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-BLOQUE");
        crp="INSTRUCCIONES";

    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$27",62, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BLOQUE ::= BLOQUE contrario NT$27 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		 
        crp="cuerpo";
        contLL--;
        contCL--;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",11, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$28 ::= 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-PARA",String.valueOf(contLL)+"-CONDICIONALES");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rpara",String.valueOf(contLL)+"-PARA");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- para",String.valueOf(contLL)+"-Rpara");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rasignacion",String.valueOf(contLL)+"-PARA");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- ->",String.valueOf(contLL)+"-Rasignacion");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-PARA");   
        contCL++;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$28",63, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$29 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-RHasta",String.valueOf(contLL)+"-PARA");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- hasta",String.valueOf(contLL)+"-RHasta");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-PARA");
        contCL++;

        auxID=String.valueOf(idd);
        txtPython+=tab()+"for "+auxID+" in range("+auxP; 
        txtGo+=tab()+"for "+auxID+" := "+auxC+";";
        auxP="";
        auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$29",64, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$30 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-BLOQUEPARA",String.valueOf(contLL)+"-PARA");
        tmpPARA=auxP;
        tmpPARAG=auxC;
        contTPY+=1; 
        auxP="";
        auxC="";
        
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$30",65, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PARA ::= para id asignacion NT$28 CONDICION NT$29 hasta CONDICION NT$30 BLOQUEPARA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).right;
		Object idd = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("PARA",14, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$31 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rhacer",String.valueOf(contLL)+"-BLOQUEPARA");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- hacer",String.valueOf(contLL)+"-Rhacer");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-BLOQUEPARA");
        crp="INSTRUCCIONES";

        txtPython+=","+tmpPARA+"):\n";
        txtGo+= " "+tmpPARAG+";"+auxID+"++ {\n";
        tmpPARA ="";tmpPARAG="";auxID="";

    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$31",66, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // BLOQUEPARA ::= hacer NT$31 INSTRUCCIONES finPara 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		
        crp="cuerpo";
        contLL--;
        contCL--;
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-finPara",String.valueOf(contLL)+"-BLOQUEPARA");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-fin_para",String.valueOf(contLL)+"-finPara");
        contLL++;
        contCL++;

        contTPY-=1; txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUEPARA",15, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // BLOQUEPARA ::= hacer finPara 
            {
              Object RESULT =null;
		
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rhacer",String.valueOf(contLL)+"-BLOQUEPARA");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- hacer",String.valueOf(contLL)+"-Rhacer");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-finPara",String.valueOf(contLL)+"-BLOQUEPARA");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-fin_para",String.valueOf(contLL)+"-finPara");

        contLL++;
        contCL++;

        txtPython+=","+tmpPARA+"):\n";
        txtGo+= " "+tmpPARAG+";"+auxID+"++ {\n";
        tmpPARA ="";tmpPARAG="";auxID="";
        contTPY-=1; txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUEPARA",15, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$32 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-incremento",String.valueOf(contLL)+"-BLOQUEPARA");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-con_incremental",String.valueOf(contLL)+"-incremento");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-BLOQUEPARA");   
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-AUXPR",String.valueOf(contLL)+"-BLOQUEPARA");
        contCL++;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$32",67, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // BLOQUEPARA ::= incremento NT$32 CONDICION hacer AUXPR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUEPARA",15, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$33 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rhacer",String.valueOf(contLL)+"-AUXPR");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- hacer",String.valueOf(contLL)+"-Rhacer");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-AUXPR");
        crp="INSTRUCCIONES";

        txtPython+=","+tmpPARA+","+auxP+"):\n";
        txtGo+= " "+tmpPARAG+";"+auxID+"+= "+auxC+"{\n";
        tmpPARA ="";tmpPARAG="";auxID="";auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$33",68, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // AUXPR ::= NT$33 INSTRUCCIONES finPara 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		
        crp="cuerpo";
        contLL--;
        contCL--;
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-finPara",String.valueOf(contLL)+"-AUXPR");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-fin_para",String.valueOf(contLL)+"-finPara");
        contLL++;
        contCL++;
        contTPY-=1; txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("AUXPR",33, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // AUXPR ::= finPara 
            {
              Object RESULT =null;
		
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-finPara",String.valueOf(contLL)+"-AUXPR");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-fin_para",String.valueOf(contLL)+"-finPara");
        contLL++;
        contCL++;

        txtPython+=","+tmpPARA+","+auxP+"):\n";
        txtGo+= " "+tmpPARAG+";"+auxID+"+= "+auxC+"{\n";
        tmpPARA ="";tmpPARAG="";auxID="";auxP="";auxC="";
        contTPY-=1; txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("AUXPR",33, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$34 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-MIENTRAS",String.valueOf(contLL)+"-CONDICIONALES");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rmientras",String.valueOf(contLL)+"-MIENTRAS");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- mientras",String.valueOf(contLL)+"-Rmientras");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-MIENTRAS");   
        contCL++;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$34",69, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$35 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rhacer",String.valueOf(contLL)+"-MIENTRAS");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- hacer",String.valueOf(contLL)+"-Rhacer");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-AUXMTR",String.valueOf(contLL)+"-MIENTRAS");
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$35",70, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // MIENTRAS ::= NT$34 mientras CONDICION hacer NT$35 AUXMTR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",16, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$36 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-AUXMTR");
        crp="INSTRUCCIONES";

        txtPython+=tab()+"while "+auxP+":\n";
        txtGo+=tab()+"for true {\n"; contTPY+=1; 
        txtGo+=tab()+"if !("+auxC+"){\n";  contTPY+=1;
        txtGo+=tab()+"break\n";  contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$36",71, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // AUXMTR ::= NT$36 INSTRUCCIONES finMientras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		
        crp="cuerpo";
        contLL--;
        contCL--;
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-finMientras",String.valueOf(contLL)+"-AUXMTR");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-fin_mientras",String.valueOf(contLL)+"-finMientras");
        contLL++;
        contCL++;

        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("AUXMTR",34, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$37 ::= 
            {
              Object RESULT =null;

        txtPython+=tab()+"while "+auxP+":\n";
        txtGo+=tab()+"for true {\n"; contTPY+=1; 
        txtGo+=tab()+"if !("+auxC+"){\n";  contTPY+=1;
        txtGo+=tab()+"break\n";  contTPY-=1;
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$37",72, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // AUXMTR ::= NT$37 finMientras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		  
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-finMientras",String.valueOf(contLL)+"-AUXMTR");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-fin_mientras",String.valueOf(contLL)+"-finMientras");
        contLL++;
        contCL++;

        contTPY-=1;
        txtGo+=tab()+"}\n";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("AUXMTR",34, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$38 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-REPETIR",String.valueOf(contLL)+"-CONDICIONALES");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rrepetir",String.valueOf(contLL)+"-REPETIR");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- repetir",String.valueOf(contLL)+"-Rrepetir");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-REPETIR");
        crp="INSTRUCCIONES";

        txtPython+=tab()+"while "+auxP+"\n";
        txtGo+= tab()+"for true {\n";
        contTPY+=1;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$38",73, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$39 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

        crp="cuerpo";
        contLL--;
        contCL--;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-hastaQue",String.valueOf(contLL)+"-REPETIR");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-hasta_que",String.valueOf(contLL)+"-hastaQue");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-REPETIR");   
        contCL++;

    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$39",74, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // REPETIR ::= repetir NT$38 INSTRUCCIONES hastaQue NT$39 CONDICION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        contLL++;
        contCL++;

        txtPython+=tab()+"if "+auxP+" == False:\n";
        txtGo+=tab()+"if ("+auxC+"){\n"; contTPY+=1;
        txtPython+=tab()+"break\n";
        txtGo+=tab()+"break}\n";
        contTPY-=2; 
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",17, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$40 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-REPETIR",String.valueOf(contLL)+"-CONDICIONALES");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rrepetir",String.valueOf(contLL)+"-REPETIR");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- repetir",String.valueOf(contLL)+"-Rrepetir");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-hastaQue",String.valueOf(contLL)+"-REPETIR");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-hasta_que",String.valueOf(contLL)+"-hastaQue");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-REPETIR");   
        contCL++;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$40",75, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // REPETIR ::= repetir hastaQue NT$40 CONDICION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        contLL++;
        contCL++;

        txtPython+=tab()+"while "+auxP+"\n";
        txtGo+= tab()+"for true {\n"; contTPY+=1;
        txtPython+=tab()+"if "+auxP+" == False:\n";
        txtGo+=tab()+"if ("+auxC+"){\n"; contTPY+=1;
        txtPython+=tab()+"break\n"; 
        txtGo+=tab()+"break}\n";
        contTPY-=2; 
        txtGo+=tab()+"}\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",17, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$41 ::= 
            {
              Object RESULT =null;

        if(crp.equals("cuerpo")){
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-RETORNO",crp);

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rretornar",String.valueOf(contLL)+"-RETORNO");
            arbolAux.InsertarRecursivo(nodoAux,"retornar",String.valueOf(contLL)+"-Rretornar");

            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-RETORNO");   
            contCL++;
        } 
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$41",76, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // RETORNO ::= retornar NT$41 CONDICION puntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-puntoComa",String.valueOf(contLL)+"-RETORNO");
        arbolAux.InsertarRecursivo(nodoAux,";",String.valueOf(contLL)+"-puntoComa"); 
        contLL++;
        contCL++;

        txtPython+=tab()+"return "+auxP+"\n";
        txtGo+=tab()+"return "+auxC+"\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",18, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$42 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-SEGUN",String.valueOf(contLL)+"-CONDICIONALES");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rsegun",String.valueOf(contLL)+"-SEGUN");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-segun",String.valueOf(contLL)+"-Rsegun");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-SEGUN");   
        contCL++;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$42",77, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$43 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-Rhacer",String.valueOf(contLL)+"-SEGUN");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- hacer",String.valueOf(contLL)+"-Rhacer");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-CASE",String.valueOf(contLL)+"-SEGUN");

        tmpPS+=auxP;
        txtGo+=tab()+"switch "+auxC+" {\n";
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$43",78, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SEGUN ::= segun NT$42 CONDICION hacer NT$43 CASE finSegun 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-finSegun",String.valueOf(contLL)+"-SEGUN");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-fin_segun",String.valueOf(contLL)+"-finSegun");
        contLL++;
        contCL++;

        contTPY-=1;
        txtGo+=tab()+"}\n";
        tmpPS="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",12, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$44 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-aitr",String.valueOf(contLL)+"-CASE");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- ¿",String.valueOf(contLL)+"-aitr");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-CASE");   
        contCL++;
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-citr",String.valueOf(contLL)+"-CASE");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- ?",String.valueOf(contLL)+"-citr");

    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$44",79, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$45 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Rentonces",String.valueOf(contLL)+"-CASE");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- entonces",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Rentonces"); 
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-CASE");
        crp="INSTRUCCIONES";

        txtPython+=tab()+"if "+tmpPS+"=="+auxP+":\n";
        txtGo+= tab()+"case "+auxC+":\n";
        contTPY+=1;
        auxP="";auxC="";
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$45",80, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CASE ::= NT$44 aitr CONDICION citr entonces NT$45 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		
        crp="cuerpo";  
        contLL--;
        contCL--;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$46 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-contrario",String.valueOf(contLL)+"-CASE");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-de_lo_contrario",String.valueOf(contLL)+"-contrario");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Rentonces",String.valueOf(contLL)+"-CASE");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- entonces",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Rentonces");

        contTPY-=1;
        txtPython+=tab()+"else:\n";
        txtGo+= tab()+"default:\n";
        contTPY+=1;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-CASE");
        crp="INSTRUCCIONES";

    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$46",81, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CASE ::= CASE contrario entonces NT$46 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		
        crp="cuerpo";  
        contLL--;
        contCL--;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$47 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-aitr",String.valueOf(contLL)+"-CASE");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"- ¿",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-aitr");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION",String.valueOf(contLL)+"-CASE");   
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-citr",String.valueOf(contLL)+"-CASE");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"- ?",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-citr");
        contCL++;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$47",82, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$48 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Rentonces",String.valueOf(contLL)+"-CASE");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"- entonces",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Rentonces");

        contTPY-=1; 
        txtPython+=tab()+"elif "+tmpPS+"=="+auxP+":\n";
        txtGo+= tab()+"case "+auxC+":\n";
        contTPY+=1;
        auxP="";auxC="";

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-INSTRUCCIONES",String.valueOf(contLL)+"-CASE");
        crp="INSTRUCCIONES";

    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$48",83, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CASE ::= CASE NT$47 aitr CONDICION citr entonces NT$48 INSTRUCCIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		
        crp="cuerpo";  
        contLL--;
        contCL--;
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$49 ::= 
            {
              Object RESULT =null;

        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-OPERACIONES",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-CONDICION");
        arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-EXPRESION",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-OPERACIONES");
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$49",84, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OPERACIONES ::= NT$49 EXPRESION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
        RESULT=a; 
        System.out.println("datoTot:"+a.toString());
        //si empieza con $ es caracter
        if(a.toString().length()>1){ 
            if((a.toString().charAt(1)=='$')){
                //obtener numero
                cA+= a.toString().replace("'","").replace("$","").replace("{","").replace("}","");
                c = Integer.parseInt(cA); 
                //verificar numero sino espacion en blanco
                if((c>=65 && c<=90)||(c>=97 && c<=122)){
                    char convertedChar = (char)c; 
                    auxP+= "'"+String.valueOf(convertedChar)+"'";
                    auxC+= "'"+String.valueOf(convertedChar)+"'";

                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-caracterAS",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-EXPRESION");
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+String.valueOf(convertedChar),String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-caracterAS");

                    cA="";
                }
                else{
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-caracterAS",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-EXPRESION");
                    arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"- N/A",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-caracterAS");
                    auxP+= "\" \"";
                    auxC+= "\" \"";
                    cA="";
                }
            }
            else if(a.toString().toLowerCase().equals("verdadero")){

                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Rverdadero",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-EXPRESION");
                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-verdadero",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-Rverdadero");

                auxP+= "True";
                auxC+= "true";
            }
            else if(a.toString().toLowerCase().equals("falso")){
                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-RFalso",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-EXPRESION");
                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-falso",String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-RFalso");

                auxP+= "False";
                auxC+= "false";
            }
            else{
                arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+a.toString(),String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-EXPRESION");

                auxP+= a.toString();
                auxC+= a.toString();
            }
        }
        else{
            arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-"+a.toString(),String.valueOf(contLL)+"-"+String.valueOf(contCL)+"-EXPRESION");
            auxP+= a.toString();
            auxC+= a.toString();
        }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES",31, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= EXPRESION mas OP1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = sumaO(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION ::= EXPRESION resta OP1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = restaO(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION ::= OP1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT =a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OP1 ::= OP1 mult OP2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = multi(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP1",28, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OP1 ::= OP1 div OP2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = divs(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP1",28, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OP1 ::= OP1 Rmod OP2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = modulo(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP1",28, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OP1 ::= OP2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT =a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP1",28, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OP2 ::= OP2 Rpotencia abrir_cor OP3 cerrar_cor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		RESULT = potencia(a,b);
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP2",29, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OP2 ::= OP3 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP2",29, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$50 ::= 
            {
              Object RESULT =null;
auxP+="("; auxC+="(";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$50",85, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OP3 ::= abrir_par NT$50 OPERACIONES cerrar_par 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		RESULT = a; auxP+=")"; auxC+=")";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OP3 ::= digitoEntero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OP3 ::= digitoDecimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OP3 ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OP3 ::= Cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OP3 ::= caracter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OP3 ::= Rtrue 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OP3 ::= Rfalse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OP3 ::= caracterAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		
            RESULT = a;
            
        
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP3",30, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CONDICION ::= OPERACIONES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$51 ::= 
            {
              Object RESULT =null;
		int oprleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
auxP+=opr; auxC+=opr;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$51",86, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CONDICION ::= OPERACIONES OP NT$51 OPERACIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$52 ::= 
            {
              Object RESULT =null;
		int ooplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int ooplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oopl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;

        if(oopl.toString().equals("or")){
            auxP+=" or ";
            auxC+=" || ";
        }

        if(oopl.toString().equals("and")){
            auxP+=" and ";
            auxC+=" && ";
        }

        if(oopl.toString().equals("not")){
            auxP+=" not ";
            auxC+=" ! ";
        }
    
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$52",87, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$53 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;
		int ooplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).left;
		int ooplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).right;
		Object oopl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-3)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
auxP+=opr; auxC+=opr;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("NT$53",88, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CONDICION ::= CONDICION OPL NT$52 OPERACIONES OP NT$53 OPERACIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)).value;
		int ooplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).left;
		int ooplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).right;
		Object oopl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-5)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-2)).value;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OP ::= mayor 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=">";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OP ::= menor 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="<";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OP ::= mayorIgual 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=">=";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OP ::= menorIgual 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="<=";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OP ::= igual 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="==";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OP ::= diferente 
            {
              Object RESULT =null;
		int oopleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oopright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object oop = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="!=";
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OP",24, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OPL ::= or 
            {
              Object RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=opl;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OPL",25, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OPL ::= and 
            {
              Object RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=opl;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OPL",25, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OPL ::= not 
            {
              Object RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT=opl;
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("OPL",25, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // INSTRUCCIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // INSTRUCCIONES ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // INSTRUCCIONES ::= CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // INSTRUCCIONES ::= LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // INSTRUCCIONES ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // INSTRUCCIONES ::= RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // INSTRUCCIONES ::= INSTRUCCIONES RETORNO 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // INSTRUCCIONES ::= INSTRUCCIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // INSTRUCCIONES ::= INSTRUCCIONES ASIGNACION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // INSTRUCCIONES ::= INSTRUCCIONES CONDICIONALES 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // INSTRUCCIONES ::= INSTRUCCIONES LLAMADA 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // INSTRUCCIONES ::= INSTRUCCIONES IMPRESION 
            {
              Object RESULT =null;

              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.elementAt(CUP$A_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TIPODATO ::= Rnumero 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="float64"; arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-numero",String.valueOf(contLL)+"-TIPODATO");
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // TIPODATO ::= Rcadena 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="string";arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-cadena",String.valueOf(contLL)+"-TIPODATO");
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // TIPODATO ::= Rboolean 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="bool";arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-boolean",String.valueOf(contLL)+"-TIPODATO");
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // TIPODATO ::= Rcaracter 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$A_sintactico$stack.peek()).value;
		RESULT="byte";arbolAux.InsertarRecursivo(nodoAux,String.valueOf(contLL)+"-caracter",String.valueOf(contLL)+"-TIPODATO");
              CUP$A_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_sintactico$stack.peek()), RESULT);
            }
          return CUP$A_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$A_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$A_sintactico$do_action(
    int                        CUP$A_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_sintactico$parser,
    java.util.Stack            CUP$A_sintactico$stack,
    int                        CUP$A_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$A_sintactico$do_action_part00000000(
                               CUP$A_sintactico$act_num,
                               CUP$A_sintactico$parser,
                               CUP$A_sintactico$stack,
                               CUP$A_sintactico$top);
    }
}

}
