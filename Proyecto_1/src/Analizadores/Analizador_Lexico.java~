/* The following code was generated by JFlex 1.7.0 */

package Analizadores;
import java_cup.runtime.*;
import java.util.LinkedList;

//directrices

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 54,  5, 13, 14, 12,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    54,  0,  4,  0,  8,  0,  0,  7, 41, 42, 15, 17, 47, 37,  6, 11, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 46,  0,  0, 50, 45, 
     0, 26, 29, 25, 27, 22, 34, 49, 51, 40, 53,  2, 30, 21, 19, 24, 
    38, 52, 23, 36, 31, 20, 32,  2,  2, 48,  2, 43,  0, 44,  0,  3, 
     0, 26, 29, 25, 28, 22, 34, 49, 51, 18, 53,  2, 30, 21, 19, 24, 
    38, 52, 23, 36, 31, 20, 33,  2,  2, 48,  2,  9,  0, 10,  0,  0, 
     0,  0,  0,  0,  0, 13,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 16, 
     0,  0, 16,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\2\1\1\4\1\5"+
    "\1\6\1\7\10\1\1\7\2\1\1\7\2\1\1\10"+
    "\2\1\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\1\3\0\1\20\3\0\1\21\16\0\1\22\11\0"+
    "\1\23\1\0\1\24\3\0\1\25\1\26\1\27\1\0"+
    "\1\21\2\0\1\21\4\0\1\30\17\0\1\31\3\0"+
    "\1\32\27\0\1\33\1\0\1\34\12\0\1\35\10\0"+
    "\1\36\2\0\1\37\23\0\1\40\1\41\1\0\1\42"+
    "\1\43\1\44\1\45\2\0\1\46\2\0\1\47\1\50"+
    "\13\0\1\51\6\0\1\52\17\0\1\53\5\0\1\54"+
    "\6\0\1\55\2\0\1\56\1\57\1\60\2\0\1\61"+
    "\1\62\1\0\1\63\1\64\3\0\1\65\6\0\1\66"+
    "\1\67\6\0\1\70\2\0\1\71\3\0\1\72\1\73"+
    "\10\0\1\74\1\0\1\75\7\0\1\76\2\0\1\77"+
    "\3\0\1\100\1\101\1\102\4\0\1\103\1\0\1\104"+
    "\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\67\0\u0113\0\u014a"+
    "\0\67\0\67\0\67\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d"+
    "\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0339\0\u0370\0\u03a7\0\u03a7"+
    "\0\u03de\0\u0415\0\u044c\0\u0483\0\u0181\0\67\0\67\0\67"+
    "\0\67\0\67\0\67\0\67\0\u04ba\0\u04f1\0\u0528\0\334"+
    "\0\67\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9"+
    "\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861"+
    "\0\u0898\0\u08cf\0\u0906\0\67\0\u093d\0\u0974\0\u09ab\0\u09e2"+
    "\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\67\0\u0b2c\0\67"+
    "\0\u0b63\0\u0b9a\0\u0bd1\0\u04f1\0\67\0\67\0\u0c08\0\67"+
    "\0\u0c3f\0\u0604\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\67"+
    "\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a"+
    "\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b\0\67"+
    "\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243"+
    "\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb"+
    "\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3"+
    "\0\u15ea\0\u1621\0\u1658\0\67\0\u168f\0\67\0\u16c6\0\u16fd"+
    "\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u187e\0\u18b5"+
    "\0\67\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36"+
    "\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u1bee"+
    "\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6"+
    "\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e"+
    "\0\67\0\67\0\u1f95\0\67\0\u1fcc\0\67\0\67\0\u2003"+
    "\0\u203a\0\67\0\u2071\0\u20a8\0\67\0\67\0\u20df\0\u2116"+
    "\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce"+
    "\0\u2305\0\67\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f"+
    "\0\67\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0"+
    "\0\u2607\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u2788"+
    "\0\67\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b\0\67\0\u28d2"+
    "\0\u2909\0\u2940\0\u2977\0\u29ae\0\u29e5\0\67\0\u2a1c\0\u2a53"+
    "\0\67\0\u2a8a\0\67\0\u2ac1\0\u2af8\0\67\0\67\0\u2b2f"+
    "\0\67\0\67\0\u2b66\0\u2b9d\0\u2bd4\0\67\0\u2c0b\0\u2c42"+
    "\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e\0\67\0\67\0\u2d55\0\u2d8c"+
    "\0\u2dc3\0\u2dfa\0\u2e31\0\u2e68\0\67\0\u2e9f\0\u2ed6\0\67"+
    "\0\u2f0d\0\u2f44\0\u2f7b\0\67\0\67\0\u2fb2\0\u2fe9\0\u3020"+
    "\0\u3057\0\u308e\0\u30c5\0\u30fc\0\u3133\0\67\0\u316a\0\67"+
    "\0\u31a1\0\u31d8\0\u320f\0\u3246\0\u327d\0\u32b4\0\u32eb\0\67"+
    "\0\u3322\0\u3359\0\67\0\u3390\0\u33c7\0\u33fe\0\67\0\67"+
    "\0\67\0\u3435\0\u346c\0\u34a3\0\u34da\0\67\0\u3511\0\67"+
    "\0\67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\2\1\7"+
    "\3\2\1\10\1\6\1\0\1\6\1\11\1\12\1\13"+
    "\1\14\1\15\1\2\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\2\2\1\27\1\30\1\31"+
    "\2\32\1\33\1\34\2\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\3\2\1\45\2\2\1\6\70\0"+
    "\1\3\4\0\1\46\62\0\1\47\17\0\21\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\7\0\2\47\1\0"+
    "\3\47\1\0\4\50\1\51\1\0\61\50\2\0\1\52"+
    "\5\0\1\53\11\0\21\52\1\0\1\52\1\0\1\52"+
    "\1\0\1\52\7\0\2\52\1\0\3\52\1\0\13\54"+
    "\1\55\3\54\1\56\47\54\23\0\1\57\1\0\1\60"+
    "\65\0\1\61\3\0\1\62\60\0\1\63\3\0\1\64"+
    "\1\0\1\65\1\0\1\66\14\0\2\63\41\0\1\67"+
    "\17\0\2\70\20\0\1\71\27\0\1\72\43\0\1\73"+
    "\23\0\1\74\67\0\1\75\1\0\1\76\57\0\1\77"+
    "\71\0\1\100\70\0\1\101\64\0\1\102\62\0\1\103"+
    "\1\0\1\104\5\0\1\105\14\0\2\103\40\0\1\106"+
    "\3\0\1\107\20\0\2\106\100\0\1\110\34\0\1\111"+
    "\1\0\1\112\66\0\1\113\35\0\1\114\66\0\2\47"+
    "\1\115\16\0\21\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\7\0\2\47\1\0\3\47\10\0\1\116\70\0"+
    "\1\117\55\0\13\54\1\120\3\54\1\121\47\54\5\122"+
    "\1\120\6\122\1\123\2\0\50\122\13\54\1\120\3\54"+
    "\1\56\47\54\22\0\1\124\24\0\2\124\10\0\1\125"+
    "\53\0\1\126\45\0\1\127\100\0\1\130\55\0\1\131"+
    "\63\0\1\132\13\0\1\133\62\0\2\134\112\0\1\135"+
    "\45\0\1\136\32\0\1\137\111\0\1\140\77\0\1\141"+
    "\6\0\1\142\63\0\2\143\45\0\1\144\1\0\1\145"+
    "\70\0\1\146\3\0\2\147\65\0\2\150\35\0\1\151"+
    "\113\0\1\152\65\0\1\153\62\0\1\154\66\0\1\155"+
    "\101\0\1\156\111\0\1\157\44\0\1\160\56\0\1\161"+
    "\70\0\1\162\11\0\2\163\23\0\1\164\100\0\1\120"+
    "\3\0\1\121\54\0\1\120\112\0\1\165\64\0\1\166"+
    "\66\0\1\167\65\0\1\170\63\0\1\171\73\0\1\172"+
    "\66\0\1\173\62\0\1\174\72\0\1\175\66\0\1\176"+
    "\60\0\1\177\10\0\2\200\12\0\2\177\47\0\1\201"+
    "\65\0\1\202\64\0\1\203\62\0\1\204\24\0\2\204"+
    "\21\0\1\205\113\0\1\206\70\0\1\207\62\0\1\210"+
    "\76\0\1\211\66\0\1\212\63\0\2\213\35\0\1\214"+
    "\114\0\1\215\100\0\2\216\46\0\1\217\70\0\1\220"+
    "\72\0\1\221\62\0\1\222\77\0\1\223\30\0\1\164"+
    "\10\0\1\224\76\0\1\225\24\0\2\225\44\0\1\226"+
    "\62\0\1\227\24\0\2\227\45\0\1\230\76\0\1\231"+
    "\56\0\1\232\72\0\2\233\70\0\1\234\57\0\1\235"+
    "\62\0\1\236\124\0\1\237\27\0\1\240\24\0\2\240"+
    "\42\0\1\241\71\0\1\242\76\0\1\243\51\0\1\244"+
    "\15\0\2\245\4\0\1\246\2\244\47\0\1\247\60\0"+
    "\1\250\73\0\1\251\64\0\1\252\72\0\1\253\61\0"+
    "\1\254\14\0\1\255\2\256\1\0\1\257\42\0\1\260"+
    "\24\0\2\260\46\0\1\261\61\0\1\262\66\0\1\263"+
    "\72\0\1\264\71\0\1\265\43\0\1\266\107\0\1\267"+
    "\101\0\2\270\47\0\1\271\71\0\1\272\65\0\1\273"+
    "\42\0\1\274\113\0\1\275\66\0\1\276\41\0\1\277"+
    "\114\0\1\300\61\0\1\301\104\0\1\302\63\0\1\303"+
    "\52\0\1\304\65\0\1\305\24\0\2\305\41\0\1\306"+
    "\75\0\1\307\66\0\1\310\73\0\1\311\61\0\1\312"+
    "\37\0\1\313\115\0\1\314\67\0\2\315\54\0\1\316"+
    "\3\0\1\317\20\0\2\316\42\0\1\320\64\0\1\321"+
    "\3\0\1\322\20\0\2\321\50\0\1\323\64\0\1\324"+
    "\67\0\1\325\40\0\1\326\115\0\1\327\56\0\1\330"+
    "\24\0\2\330\50\0\1\331\64\0\1\332\66\0\1\333"+
    "\64\0\1\334\72\0\1\335\62\0\1\336\72\0\1\337"+
    "\66\0\1\340\63\0\1\341\70\0\1\342\73\0\1\343"+
    "\57\0\1\344\65\0\1\345\71\0\1\346\60\0\1\347"+
    "\71\0\1\350\66\0\1\351\77\0\1\352\52\0\1\353"+
    "\124\0\1\354\34\0\1\355\62\0\1\356\65\0\1\357"+
    "\24\0\2\357\102\0\1\360\31\0\1\361\66\0\1\362"+
    "\102\0\2\363\25\0\1\364\66\0\1\365\126\0\2\366"+
    "\60\0\1\367\57\0\1\370\66\0\1\371\66\0\1\372"+
    "\66\0\1\373\67\0\1\374\70\0\1\375\63\0\1\376"+
    "\67\0\1\377\65\0\1\u0100\62\0\1\u0101\73\0\1\u0102"+
    "\67\0\1\u0103\61\0\1\u0104\74\0\1\u0105\66\0\1\u0106"+
    "\60\0\1\u0107\45\0\1\u0108\105\0\1\u0109\24\0\2\u0109"+
    "\40\0\1\u010a\24\0\2\u010a\44\0\1\u010b\66\0\1\u010c"+
    "\67\0\1\u010d\64\0\1\u010e\64\0\1\u010f\73\0\1\u0110"+
    "\75\0\1\u0111\62\0\2\u0112\54\0\1\u0113\24\0\2\u0113"+
    "\41\0\1\u0114\71\0\1\u0115\63\0\1\u0116\124\0\1\u0117"+
    "\66\0\1\u0118\30\0\1\u0119\70\0\1\u011a\67\0\1\u011b"+
    "\77\0\1\u011c\56\0\1\u011d\67\0\1\u011e\66\0\1\u011f"+
    "\74\0\1\u0120\54\0\1\u0121\66\0\1\u0122\101\0\1\u0123"+
    "\55\0\1\u0124\77\0\1\u0125\56\0\1\u0126\71\0\1\u0127"+
    "\57\0\1\u0128\75\0\1\u0129\66\0\1\u012a\62\0\1\u012b"+
    "\63\0\1\u012c\72\0\1\u012d\71\0\1\u012e\77\0\2\u012f"+
    "\60\0\1\u0130\66\0\1\u0131\67\0\1\u0132\57\0\1\u0133"+
    "\65\0\1\u0134\71\0\1\u0135\77\0\2\u0136\44\0\1\u0137"+
    "\24\0\2\u0137\54\0\1\u0138\60\0\1\u0139\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\2\1\3\11\22\1\7\11"+
    "\1\1\3\0\1\11\3\0\1\1\16\0\1\11\11\0"+
    "\1\11\1\0\1\11\3\0\1\1\2\11\1\0\1\11"+
    "\2\0\1\1\4\0\1\11\17\0\1\11\3\0\1\1"+
    "\27\0\1\11\1\0\1\11\12\0\1\11\10\0\1\1"+
    "\2\0\1\1\23\0\2\11\1\0\1\11\1\1\2\11"+
    "\2\0\1\11\2\0\2\11\13\0\1\11\6\0\1\11"+
    "\17\0\1\11\5\0\1\11\6\0\1\11\2\0\1\11"+
    "\1\1\1\11\2\0\2\11\1\0\2\11\3\0\1\11"+
    "\6\0\2\11\6\0\1\11\2\0\1\11\3\0\2\11"+
    "\10\0\1\11\1\0\1\11\7\0\1\11\2\0\1\11"+
    "\3\0\3\11\4\0\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public static LinkedList<claseErrores> TError = new LinkedList<claseErrores>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("-> Error Léxico:"+yytext());
    System.out.println("Linea: "+ yyline + "  Columna:  "+ yycolumn);
    claseErrores datos = new claseErrores(yytext(), "Error Léxico", "Simbolo no existe en el lenguaje",yyline, yycolumn);
    TError.add(datos);
            } 
            // fall through
          case 70: break;
          case 2: 
            { System.out.println("Token:<digitoEntero> lexema:"+yytext());
                            return new Symbol(Simbolos.digitoEntero,yyline,yycolumn,yytext());
            } 
            // fall through
          case 71: break;
          case 3: 
            { /*este es un comentario en java, omitirlos*/
            } 
            // fall through
          case 72: break;
          case 4: 
            { System.out.println("Token:<multiplicación> lexema:"+yytext());
                return new Symbol(Simbolos.mult,yyline,yycolumn,yytext());
            } 
            // fall through
          case 73: break;
          case 5: 
            { System.out.println("Token:<interr_A> lexema:"+yytext());
                return new Symbol(Simbolos.aitr, yyline,yycolumn, yytext());
            } 
            // fall through
          case 74: break;
          case 6: 
            { System.out.println("Token:<suma> lexema:"+yytext());
                return new Symbol(Simbolos.mas,yyline,yycolumn,yytext());
            } 
            // fall through
          case 75: break;
          case 7: 
            { System.out.println("Token:<División> lexema:"+yytext());
                return new Symbol(Simbolos.div,yyline,yycolumn,yytext());
            } 
            // fall through
          case 76: break;
          case 8: 
            { System.out.println("Token:<resta> lexema:"+yytext());
                return new Symbol(Simbolos.resta,yyline,yycolumn,yytext());
            } 
            // fall through
          case 77: break;
          case 9: 
            { System.out.println("Token:<Parentesis_A> lexema:"+yytext());
                return new Symbol(Simbolos.abrir_par, yyline,yycolumn, yytext());
            } 
            // fall through
          case 78: break;
          case 10: 
            { System.out.println("Token:<Parentesis_C> lexema:"+yytext());
                return new Symbol(Simbolos.cerrar_par, yyline,yycolumn, yytext());
            } 
            // fall through
          case 79: break;
          case 11: 
            { System.out.println("Token:<Parentesis_A> lexema:"+yytext());
                return new Symbol(Simbolos.abrir_cor, yyline,yycolumn, yytext());
            } 
            // fall through
          case 80: break;
          case 12: 
            { System.out.println("Token:<Parentesis_C> lexema:"+yytext());
                return new Symbol(Simbolos.cerrar_cor, yyline,yycolumn, yytext());
            } 
            // fall through
          case 81: break;
          case 13: 
            { System.out.println("Token:<interr_C> lexema:"+yytext());
                return new Symbol(Simbolos.citr, yyline,yycolumn, yytext());
            } 
            // fall through
          case 82: break;
          case 14: 
            { System.out.println("Token:<puntoComa> lexema:"+yytext());
                return new Symbol(Simbolos.puntoComa, yyline,yycolumn, yytext());
            } 
            // fall through
          case 83: break;
          case 15: 
            { System.out.println("Token:<Coma> lexema:"+yytext());
                return new Symbol(Simbolos.Coma, yyline,yycolumn, yytext());
            } 
            // fall through
          case 84: break;
          case 16: 
            { System.out.println("Token:<Cadena> lexema:"+yytext());
                    return new Symbol(Simbolos.Cadena,yyline,yycolumn,yytext());
            } 
            // fall through
          case 85: break;
          case 17: 
            { 
            } 
            // fall through
          case 86: break;
          case 18: 
            { System.out.println("Token:<or> lexema:"+yytext());
                    return new Symbol(Simbolos.or, yyline,yycolumn, yytext());
            } 
            // fall through
          case 87: break;
          case 19: 
            { System.out.println("Token:<condSi> lexema:"+yytext());
                    return new Symbol(Simbolos.condSi,yyline,yycolumn, yytext());
            } 
            // fall through
          case 88: break;
          case 20: 
            { System.out.println("Token:<Simbolo_asignacion> lexema:"+yytext());
                    return new Symbol(Simbolos.asignacion, yyline,yycolumn, yytext());
            } 
            // fall through
          case 89: break;
          case 21: 
            { System.out.println("Token:<digitoDecimal> lexema:"+yytext());
                            return new Symbol(Simbolos.digitoDecimal,yyline,yycolumn,yytext());
            } 
            // fall through
          case 90: break;
          case 22: 
            { System.out.println("Token:<id> lexema:"+yytext());
                    return new Symbol(Simbolos.id, yyline,yycolumn, yytext());
            } 
            // fall through
          case 91: break;
          case 23: 
            { System.out.println("Token:<caracter> lexema:"+yytext());
                        return new Symbol(Simbolos.caracter,yyline,yycolumn,yytext());
            } 
            // fall through
          case 92: break;
          case 24: 
            { System.out.println("Token:<not> lexema:"+yytext());
                    return new Symbol(Simbolos.not, yyline,yycolumn, yytext());
            } 
            // fall through
          case 93: break;
          case 25: 
            { System.out.println("Token:<and> lexema:"+yytext());
                    return new Symbol(Simbolos.and, yyline,yycolumn, yytext());
            } 
            // fall through
          case 94: break;
          case 26: 
            { System.out.println("Token Reservada:<fin> lexema:"+yytext());
                    return new Symbol(Simbolos.fin, yyline,yycolumn, yytext());
            } 
            // fall through
          case 95: break;
          case 27: 
            { System.out.println("Token:<OSi> lexema:"+yytext());
                    return new Symbol(Simbolos.OSi, yyline,yycolumn, yytext());
            } 
            // fall through
          case 96: break;
          case 28: 
            { System.out.println("Token reservada:<como> lexema:"+yytext());
                    return new Symbol(Simbolos.Rcomo, yyline,yycolumn, yytext());
            } 
            // fall through
          case 97: break;
          case 29: 
            { System.out.println("Token:<para> lexema:"+yytext());
                    return new Symbol(Simbolos.para, yyline,yycolumn, yytext());
            } 
            // fall through
          case 98: break;
          case 30: 
            { System.out.println("Token:<menor> lexema:"+yytext());
                    return new Symbol(Simbolos.menor, yyline,yycolumn, yytext());
            } 
            // fall through
          case 99: break;
          case 31: 
            { System.out.println("Token:<mayor> lexema:"+yytext());
                    return new Symbol(Simbolos.mayor, yyline,yycolumn, yytext());
            } 
            // fall through
          case 100: break;
          case 32: 
            { System.out.println("Token:<falso> lexema:"+yytext());
                        return new Symbol(Simbolos.Rfalse,yyline,yycolumn,yytext());
            } 
            // fall through
          case 101: break;
          case 33: 
            { System.out.println("Token:<segun> lexema:"+yytext());
                    return new Symbol(Simbolos.segun, yyline,yycolumn, yytext());
            } 
            // fall through
          case 102: break;
          case 34: 
            { System.out.println("Token:<hacer> lexema:"+yytext());
                    return new Symbol(Simbolos.hacer, yyline,yycolumn, yytext());
            } 
            // fall through
          case 103: break;
          case 35: 
            { System.out.println("Token:<hasta> lexema:"+yytext());
                    return new Symbol(Simbolos.hasta, yyline,yycolumn, yytext());
            } 
            // fall through
          case 104: break;
          case 36: 
            { System.out.println("Token:<caracterAS> lexema:"+yytext());
                        return new Symbol(Simbolos.caracterAS,yyline,yycolumn,yytext());
            } 
            // fall through
          case 105: break;
          case 37: 
            { System.out.println("Token Reservada:<inicio> lexema:"+yytext());
                        return new Symbol(Simbolos.inicio, yyline,yycolumn, yytext());
            } 
            // fall through
          case 106: break;
          case 38: 
            { System.out.println("Token Reservada:<Número> lexema:"+yytext());
                    return new Symbol(Simbolos.Rnumero,yyline,yycolumn,yytext());
            } 
            // fall through
          case 107: break;
          case 39: 
            { System.out.println("Token:<metodo> lexema:"+yytext());
                        return new Symbol(Simbolos.metodo, yyline,yycolumn, yytext());
            } 
            // fall through
          case 108: break;
          case 40: 
            { System.out.println("Token Reservada:<modulo> lexema:"+yytext());
                    return new Symbol(Simbolos.Rmod,yyline,yycolumn,yytext());
            } 
            // fall through
          case 109: break;
          case 41: 
            { System.out.println("Token Reservada:<Cadena> lexema:"+yytext());
                    return new Symbol(Simbolos.Rcadena,yyline,yycolumn,yytext());
            } 
            // fall through
          case 110: break;
          case 42: 
            { System.out.println("Token:<finSi> lexema:"+yytext());
                        return new Symbol(Simbolos.finSi, yyline,yycolumn, yytext());
            } 
            // fall through
          case 111: break;
          case 43: 
            { System.out.println("Token:<repetir> lexema:"+yytext());
                        return new Symbol(Simbolos.repetir,yyline,yycolumn, yytext());
            } 
            // fall through
          case 112: break;
          case 44: 
            { System.out.println("Token Reservada:<Boolean> lexema:"+yytext());
                        return new Symbol(Simbolos.Rboolean,yyline,yycolumn,yytext());
            } 
            // fall through
          case 113: break;
          case 45: 
            { System.out.println("Token:<funcion> lexema:"+yytext());
                        return new Symbol(Simbolos.funcion, yyline,yycolumn, yytext());
            } 
            // fall through
          case 114: break;
          case 46: 
            { System.out.println("Token Reservada:<ingresar> lexema:"+yytext());
                        return new Symbol(Simbolos.Ringresar,yyline,yycolumn, yytext());
            } 
            // fall through
          case 115: break;
          case 47: 
            { System.out.println("Token:<imprimir> lexema:"+yytext());
                        return new Symbol(Simbolos.imprimir, yyline,yycolumn, yytext());
            } 
            // fall through
          case 116: break;
          case 48: 
            { System.out.println("Token:<mientras> lexema:"+yytext());
                        return new Symbol(Simbolos.mientras, yyline,yycolumn, yytext());
            } 
            // fall through
          case 117: break;
          case 49: 
            { System.out.println("Token:<entonces> lexema:"+yytext());
                        return new Symbol(Simbolos.entonces, yyline,yycolumn, yytext());
            } 
            // fall through
          case 118: break;
          case 50: 
            { System.out.println("Token:<igual> lexema:"+yytext());
                        return new Symbol(Simbolos.igual, yyline,yycolumn, yytext());
            } 
            // fall through
          case 119: break;
          case 51: 
            { System.out.println("Token:<ejecutar> lexema:"+yytext());
                        return new Symbol(Simbolos.ejecutar, yyline,yycolumn, yytext());
            } 
            // fall through
          case 120: break;
          case 52: 
            { System.out.println("Token:<retornar> lexema:"+yytext());
                        return new Symbol(Simbolos.retornar, yyline,yycolumn, yytext());
            } 
            // fall through
          case 121: break;
          case 53: 
            { System.out.println("Token Reservada:<Carácter> lexema:"+yytext());
                        return new Symbol(Simbolos.Rcaracter,yyline,yycolumn,yytext());
            } 
            // fall through
          case 122: break;
          case 54: 
            { System.out.println("Token:<finPara> lexema:"+yytext());
                        return new Symbol(Simbolos.finPara,yyline,yycolumn, yytext());
            } 
            // fall through
          case 123: break;
          case 55: 
            { System.out.println("Token Reservada:<potencia> lexema:"+yytext());
                        return new Symbol(Simbolos.Rpotencia,yyline,yycolumn,yytext());
            } 
            // fall through
          case 124: break;
          case 56: 
            { System.out.println("Token Reservada:<con_valor> lexema:"+yytext());
                        return new Symbol(Simbolos.RCon_valor,yyline,yycolumn, yytext());
            } 
            // fall through
          case 125: break;
          case 57: 
            { System.out.println("Token:<Verdadero> lexema:"+yytext());
                        return new Symbol(Simbolos.Rtrue,yyline,yycolumn,yytext());
            } 
            // fall through
          case 126: break;
          case 58: 
            { System.out.println("Token:<finSegun> lexema:"+yytext());
                        return new Symbol(Simbolos.finSegun, yyline,yycolumn, yytext());
            } 
            // fall through
          case 127: break;
          case 59: 
            { System.out.println("Token:<hasta_que> lexema:"+yytext());
                        return new Symbol(Simbolos.hastaQue, yyline,yycolumn, yytext());
            } 
            // fall through
          case 128: break;
          case 60: 
            { System.out.println("Token:<Finmetodo> lexema:"+yytext());
                            return new Symbol(Simbolos.Finmetodo, yyline,yycolumn, yytext());
            } 
            // fall through
          case 129: break;
          case 61: 
            { System.out.println("Token:<imprimir_nl> lexema:"+yytext());
                            return new Symbol(Simbolos.imprimir_nl, yyline,yycolumn,yytext());
            } 
            // fall through
          case 130: break;
          case 62: 
            { System.out.println("Token:<Finfuncion> lexema:"+yytext());
                            return new Symbol(Simbolos.Finfuncion,yyline,yycolumn, yytext());
            } 
            // fall through
          case 131: break;
          case 63: 
            { System.out.println("Token:<diferente> lexema:"+yytext());
                            return new Symbol(Simbolos.diferente,yyline,yycolumn, yytext());
            } 
            // fall through
          case 132: break;
          case 64: 
            { System.out.println("Token:<fin_mientras> lexema:"+yytext());
                            return new Symbol(Simbolos.finMientras, yyline,yycolumn, yytext());
            } 
            // fall through
          case 133: break;
          case 65: 
            { System.out.println("Token:<menorIgual> lexema:"+yytext());
                            return new Symbol(Simbolos.menorIgual, yyline,yycolumn, yytext());
            } 
            // fall through
          case 134: break;
          case 66: 
            { System.out.println("Token:<mayorIgual> lexema:"+yytext());
                            return new Symbol(Simbolos.mayorIgual, yyline,yycolumn, yytext());
            } 
            // fall through
          case 135: break;
          case 67: 
            { System.out.println("Token:<con_parametros> lexema:"+yytext());
                                return new Symbol(Simbolos.con_parametros,yyline,yycolumn, yytext());
            } 
            // fall through
          case 136: break;
          case 68: 
            { System.out.println("Token:<incremento> lexema:"+yytext());
                                return new Symbol(Simbolos.incremento, yyline,yycolumn, yytext());
            } 
            // fall through
          case 137: break;
          case 69: 
            { System.out.println("Token:<contrario> lexema:"+yytext());
                                return new Symbol(Simbolos.contrario,yyline,yycolumn, yytext());
            } 
            // fall through
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
